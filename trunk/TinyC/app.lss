
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000266  00800200  0000339c  00003430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000339c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002aa  00800466  00800466  00003696  2**0
                  ALLOC
  3 .stab         00003870  00000000  00000000  00003698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003dd8  00000000  00000000  00006f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  0000ace0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ae1  00000000  00000000  0000af48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a937  00000000  00000000  0000ba29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e8  00000000  00000000  00016360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000039e7  00000000  00000000  00016848  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  0001a230  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006e31  00000000  00000000  0001a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a7c  00000000  00000000  00021501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000490  00000000  00000000  00022f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
       0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
       2:	00 00       	nop
       4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c0       	rjmp	.+314    	; 0x164 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c0       	rjmp	.+310    	; 0x164 <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	00 00       	nop
      34:	97 c0       	rjmp	.+302    	; 0x164 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c0       	rjmp	.+262    	; 0x164 <__bad_interrupt>
      5e:	00 00       	nop
      60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c0       	rjmp	.+254    	; 0x164 <__bad_interrupt>
      66:	00 00       	nop
      68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_29>
      78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c0       	rjmp	.+214    	; 0x164 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8b c2       	rjmp	.+1302   	; 0x5a8 <__vector_36>
      92:	00 00       	nop
      94:	67 c0       	rjmp	.+206    	; 0x164 <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c2       	rjmp	.+1472   	; 0x65a <__vector_38>
      9a:	00 00       	nop
      9c:	63 c0       	rjmp	.+198    	; 0x164 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	61 c0       	rjmp	.+194    	; 0x164 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c0       	rjmp	.+190    	; 0x164 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c0       	rjmp	.+186    	; 0x164 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5b c0       	rjmp	.+182    	; 0x164 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c0       	rjmp	.+178    	; 0x164 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c0       	rjmp	.+174    	; 0x164 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c0       	rjmp	.+170    	; 0x164 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c0       	rjmp	.+166    	; 0x164 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c0       	rjmp	.+162    	; 0x164 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c0       	rjmp	.+158    	; 0x164 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c0       	rjmp	.+154    	; 0x164 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4b c0       	rjmp	.+150    	; 0x164 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	49 c0       	rjmp	.+146    	; 0x164 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	47 c0       	rjmp	.+142    	; 0x164 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	45 c0       	rjmp	.+138    	; 0x164 <__bad_interrupt>
      da:	00 00       	nop
      dc:	43 c0       	rjmp	.+134    	; 0x164 <__bad_interrupt>
      de:	00 00       	nop
      e0:	41 c0       	rjmp	.+130    	; 0x164 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__vector_57>
      e8:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_58>
      ec:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_59>
      f0:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__vector_60>
      f4:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_61>
      f8:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_62>
      fc:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_63>
     100:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_64>
     104:	21 c4       	rjmp	.+2114   	; 0x948 <__vector_65>
     106:	00 00       	nop
     108:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__vector_66>
     10c:	60 c5       	rjmp	.+2752   	; 0xbce <__vector_67>
     10e:	00 00       	nop
     110:	ff c2       	rjmp	.+1534   	; 0x710 <__vector_68>
     112:	00 00       	nop
     114:	27 c0       	rjmp	.+78     	; 0x164 <__bad_interrupt>
     116:	00 00       	nop
     118:	25 c0       	rjmp	.+74     	; 0x164 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	23 c0       	rjmp	.+70     	; 0x164 <__bad_interrupt>
     11e:	00 00       	nop

00000120 <McuSleepC__atm128PowerBits>:
     120:	00 02 0e 06 0c 04                                   ......

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d1 e4       	ldi	r29, 0x41	; 65
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	14 e0       	ldi	r17, 0x04	; 4
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b2 e0       	ldi	r27, 0x02	; 2
     138:	ec e9       	ldi	r30, 0x9C	; 156
     13a:	f3 e3       	ldi	r31, 0x33	; 51
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0b bf       	out	0x3b, r16	; 59
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x14>
     142:	07 90       	elpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	a6 36       	cpi	r26, 0x66	; 102
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0x10>

0000014c <__do_clear_bss>:
     14c:	17 e0       	ldi	r17, 0x07	; 7
     14e:	a6 e6       	ldi	r26, 0x66	; 102
     150:	b4 e0       	ldi	r27, 0x04	; 4
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	a0 31       	cpi	r26, 0x10	; 16
     158:	b1 07       	cpc	r27, r17
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
     15c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <main>
     160:	0c 94 cd 19 	jmp	0x339a	; 0x339a <_exit>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__heap_end>

00000166 <__muldi3>:
     166:	ac e2       	ldi	r26, 0x2C	; 44
     168:	b0 e0       	ldi	r27, 0x00	; 0
     16a:	e9 eb       	ldi	r30, 0xB9	; 185
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__>
     172:	22 2e       	mov	r2, r18
     174:	33 2e       	mov	r3, r19
     176:	44 2e       	mov	r4, r20
     178:	55 2e       	mov	r5, r21
     17a:	66 2e       	mov	r6, r22
     17c:	77 2e       	mov	r7, r23
     17e:	88 2e       	mov	r8, r24
     180:	99 2e       	mov	r9, r25
     182:	fe 01       	movw	r30, r28
     184:	31 96       	adiw	r30, 0x01	; 1
     186:	a8 e0       	ldi	r26, 0x08	; 8
     188:	11 92       	st	Z+, r1
     18a:	aa 95       	dec	r26
     18c:	e9 f7       	brne	.-6      	; 0x188 <__muldi3+0x22>
     18e:	29 82       	std	Y+1, r2	; 0x01
     190:	3a 82       	std	Y+2, r3	; 0x02
     192:	4b 82       	std	Y+3, r4	; 0x03
     194:	5c 82       	std	Y+4, r5	; 0x04
     196:	6d 82       	std	Y+5, r6	; 0x05
     198:	7e 82       	std	Y+6, r7	; 0x06
     19a:	8f 82       	std	Y+7, r8	; 0x07
     19c:	98 86       	std	Y+8, r9	; 0x08
     19e:	fe 01       	movw	r30, r28
     1a0:	39 96       	adiw	r30, 0x09	; 9
     1a2:	b8 e0       	ldi	r27, 0x08	; 8
     1a4:	11 92       	st	Z+, r1
     1a6:	ba 95       	dec	r27
     1a8:	e9 f7       	brne	.-6      	; 0x1a4 <__muldi3+0x3e>
     1aa:	a9 86       	std	Y+9, r10	; 0x09
     1ac:	ba 86       	std	Y+10, r11	; 0x0a
     1ae:	cb 86       	std	Y+11, r12	; 0x0b
     1b0:	dc 86       	std	Y+12, r13	; 0x0c
     1b2:	ed 86       	std	Y+13, r14	; 0x0d
     1b4:	fe 86       	std	Y+14, r15	; 0x0e
     1b6:	0f 87       	std	Y+15, r16	; 0x0f
     1b8:	18 8b       	std	Y+16, r17	; 0x10
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	ab 81       	ldd	r26, Y+3	; 0x03
     1c0:	bc 81       	ldd	r27, Y+4	; 0x04
     1c2:	89 a7       	std	Y+41, r24	; 0x29
     1c4:	9a a7       	std	Y+42, r25	; 0x2a
     1c6:	ab a7       	std	Y+43, r26	; 0x2b
     1c8:	bc a7       	std	Y+44, r27	; 0x2c
     1ca:	7c 01       	movw	r14, r24
     1cc:	8d 01       	movw	r16, r26
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	9f ef       	ldi	r25, 0xFF	; 255
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	e8 22       	and	r14, r24
     1d8:	f9 22       	and	r15, r25
     1da:	0a 23       	and	r16, r26
     1dc:	1b 23       	and	r17, r27
     1de:	89 a5       	ldd	r24, Y+41	; 0x29
     1e0:	9a a5       	ldd	r25, Y+42	; 0x2a
     1e2:	ab a5       	ldd	r26, Y+43	; 0x2b
     1e4:	bc a5       	ldd	r27, Y+44	; 0x2c
     1e6:	1d 01       	movw	r2, r26
     1e8:	44 24       	eor	r4, r4
     1ea:	55 24       	eor	r5, r5
     1ec:	89 85       	ldd	r24, Y+9	; 0x09
     1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f0:	ab 85       	ldd	r26, Y+11	; 0x0b
     1f2:	bc 85       	ldd	r27, Y+12	; 0x0c
     1f4:	8d a3       	std	Y+37, r24	; 0x25
     1f6:	9e a3       	std	Y+38, r25	; 0x26
     1f8:	af a3       	std	Y+39, r26	; 0x27
     1fa:	b8 a7       	std	Y+40, r27	; 0x28
     1fc:	5c 01       	movw	r10, r24
     1fe:	6d 01       	movw	r12, r26
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	9f ef       	ldi	r25, 0xFF	; 255
     204:	a0 e0       	ldi	r26, 0x00	; 0
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	a8 22       	and	r10, r24
     20a:	b9 22       	and	r11, r25
     20c:	ca 22       	and	r12, r26
     20e:	db 22       	and	r13, r27
     210:	8d a1       	ldd	r24, Y+37	; 0x25
     212:	9e a1       	ldd	r25, Y+38	; 0x26
     214:	af a1       	ldd	r26, Y+39	; 0x27
     216:	b8 a5       	ldd	r27, Y+40	; 0x28
     218:	3d 01       	movw	r6, r26
     21a:	88 24       	eor	r8, r8
     21c:	99 24       	eor	r9, r9
     21e:	c8 01       	movw	r24, r16
     220:	b7 01       	movw	r22, r14
     222:	a6 01       	movw	r20, r12
     224:	95 01       	movw	r18, r10
     226:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__mulsi3>
     22a:	69 a3       	std	Y+33, r22	; 0x21
     22c:	7a a3       	std	Y+34, r23	; 0x22
     22e:	8b a3       	std	Y+35, r24	; 0x23
     230:	9c a3       	std	Y+36, r25	; 0x24
     232:	c8 01       	movw	r24, r16
     234:	b7 01       	movw	r22, r14
     236:	a4 01       	movw	r20, r8
     238:	93 01       	movw	r18, r6
     23a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__mulsi3>
     23e:	7b 01       	movw	r14, r22
     240:	8c 01       	movw	r16, r24
     242:	c2 01       	movw	r24, r4
     244:	b1 01       	movw	r22, r2
     246:	a6 01       	movw	r20, r12
     248:	95 01       	movw	r18, r10
     24a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__mulsi3>
     24e:	5b 01       	movw	r10, r22
     250:	6c 01       	movw	r12, r24
     252:	c2 01       	movw	r24, r4
     254:	b1 01       	movw	r22, r2
     256:	a4 01       	movw	r20, r8
     258:	93 01       	movw	r18, r6
     25a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__mulsi3>
     25e:	3b 01       	movw	r6, r22
     260:	4c 01       	movw	r8, r24
     262:	ea 0c       	add	r14, r10
     264:	fb 1c       	adc	r15, r11
     266:	0c 1d       	adc	r16, r12
     268:	1d 1d       	adc	r17, r13
     26a:	89 a1       	ldd	r24, Y+33	; 0x21
     26c:	9a a1       	ldd	r25, Y+34	; 0x22
     26e:	ab a1       	ldd	r26, Y+35	; 0x23
     270:	bc a1       	ldd	r27, Y+36	; 0x24
     272:	9d 01       	movw	r18, r26
     274:	44 27       	eor	r20, r20
     276:	55 27       	eor	r21, r21
     278:	2e 0d       	add	r18, r14
     27a:	3f 1d       	adc	r19, r15
     27c:	40 1f       	adc	r20, r16
     27e:	51 1f       	adc	r21, r17
     280:	2a 15       	cp	r18, r10
     282:	3b 05       	cpc	r19, r11
     284:	4c 05       	cpc	r20, r12
     286:	5d 05       	cpc	r21, r13
     288:	40 f4       	brcc	.+16     	; 0x29a <__muldi3+0x134>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	a1 e0       	ldi	r26, 0x01	; 1
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	68 0e       	add	r6, r24
     294:	79 1e       	adc	r7, r25
     296:	8a 1e       	adc	r8, r26
     298:	9b 1e       	adc	r9, r27
     29a:	ca 01       	movw	r24, r20
     29c:	aa 27       	eor	r26, r26
     29e:	bb 27       	eor	r27, r27
     2a0:	86 0d       	add	r24, r6
     2a2:	97 1d       	adc	r25, r7
     2a4:	a8 1d       	adc	r26, r8
     2a6:	b9 1d       	adc	r27, r9
     2a8:	8d 8f       	std	Y+29, r24	; 0x1d
     2aa:	9e 8f       	std	Y+30, r25	; 0x1e
     2ac:	af 8f       	std	Y+31, r26	; 0x1f
     2ae:	b8 a3       	std	Y+32, r27	; 0x20
     2b0:	a9 01       	movw	r20, r18
     2b2:	33 27       	eor	r19, r19
     2b4:	22 27       	eor	r18, r18
     2b6:	89 a1       	ldd	r24, Y+33	; 0x21
     2b8:	9a a1       	ldd	r25, Y+34	; 0x22
     2ba:	ab a1       	ldd	r26, Y+35	; 0x23
     2bc:	bc a1       	ldd	r27, Y+36	; 0x24
     2be:	a0 70       	andi	r26, 0x00	; 0
     2c0:	b0 70       	andi	r27, 0x00	; 0
     2c2:	28 0f       	add	r18, r24
     2c4:	39 1f       	adc	r19, r25
     2c6:	4a 1f       	adc	r20, r26
     2c8:	5b 1f       	adc	r21, r27
     2ca:	29 8f       	std	Y+25, r18	; 0x19
     2cc:	3a 8f       	std	Y+26, r19	; 0x1a
     2ce:	4b 8f       	std	Y+27, r20	; 0x1b
     2d0:	5c 8f       	std	Y+28, r21	; 0x1c
     2d2:	a9 8c       	ldd	r10, Y+25	; 0x19
     2d4:	ba 8c       	ldd	r11, Y+26	; 0x1a
     2d6:	cb 8c       	ldd	r12, Y+27	; 0x1b
     2d8:	dc 8c       	ldd	r13, Y+28	; 0x1c
     2da:	ed 8c       	ldd	r14, Y+29	; 0x1d
     2dc:	fe 8c       	ldd	r15, Y+30	; 0x1e
     2de:	0f 8d       	ldd	r16, Y+31	; 0x1f
     2e0:	18 a1       	ldd	r17, Y+32	; 0x20
     2e2:	fe 01       	movw	r30, r28
     2e4:	71 96       	adiw	r30, 0x11	; 17
     2e6:	98 e0       	ldi	r25, 0x08	; 8
     2e8:	11 92       	st	Z+, r1
     2ea:	9a 95       	dec	r25
     2ec:	e9 f7       	brne	.-6      	; 0x2e8 <__muldi3+0x182>
     2ee:	ed 8a       	std	Y+21, r14	; 0x15
     2f0:	fe 8a       	std	Y+22, r15	; 0x16
     2f2:	0f 8b       	std	Y+23, r16	; 0x17
     2f4:	18 8f       	std	Y+24, r17	; 0x18
     2f6:	2d 81       	ldd	r18, Y+5	; 0x05
     2f8:	3e 81       	ldd	r19, Y+6	; 0x06
     2fa:	4f 81       	ldd	r20, Y+7	; 0x07
     2fc:	58 85       	ldd	r21, Y+8	; 0x08
     2fe:	6d a1       	ldd	r22, Y+37	; 0x25
     300:	7e a1       	ldd	r23, Y+38	; 0x26
     302:	8f a1       	ldd	r24, Y+39	; 0x27
     304:	98 a5       	ldd	r25, Y+40	; 0x28
     306:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__mulsi3>
     30a:	3b 01       	movw	r6, r22
     30c:	4c 01       	movw	r8, r24
     30e:	2d 85       	ldd	r18, Y+13	; 0x0d
     310:	3e 85       	ldd	r19, Y+14	; 0x0e
     312:	4f 85       	ldd	r20, Y+15	; 0x0f
     314:	58 89       	ldd	r21, Y+16	; 0x10
     316:	69 a5       	ldd	r22, Y+41	; 0x29
     318:	7a a5       	ldd	r23, Y+42	; 0x2a
     31a:	8b a5       	ldd	r24, Y+43	; 0x2b
     31c:	9c a5       	ldd	r25, Y+44	; 0x2c
     31e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__mulsi3>
     322:	2d 89       	ldd	r18, Y+21	; 0x15
     324:	3e 89       	ldd	r19, Y+22	; 0x16
     326:	4f 89       	ldd	r20, Y+23	; 0x17
     328:	58 8d       	ldd	r21, Y+24	; 0x18
     32a:	26 0f       	add	r18, r22
     32c:	37 1f       	adc	r19, r23
     32e:	48 1f       	adc	r20, r24
     330:	59 1f       	adc	r21, r25
     332:	26 0d       	add	r18, r6
     334:	37 1d       	adc	r19, r7
     336:	48 1d       	adc	r20, r8
     338:	59 1d       	adc	r21, r9
     33a:	2d 8b       	std	Y+21, r18	; 0x15
     33c:	3e 8b       	std	Y+22, r19	; 0x16
     33e:	4f 8b       	std	Y+23, r20	; 0x17
     340:	58 8f       	std	Y+24, r21	; 0x18
     342:	6d 88       	ldd	r6, Y+21	; 0x15
     344:	7e 88       	ldd	r7, Y+22	; 0x16
     346:	8f 88       	ldd	r8, Y+23	; 0x17
     348:	98 8c       	ldd	r9, Y+24	; 0x18
     34a:	2a 2d       	mov	r18, r10
     34c:	3b 2d       	mov	r19, r11
     34e:	4c 2d       	mov	r20, r12
     350:	5d 2d       	mov	r21, r13
     352:	66 2d       	mov	r22, r6
     354:	77 2d       	mov	r23, r7
     356:	88 2d       	mov	r24, r8
     358:	99 2d       	mov	r25, r9
     35a:	e2 e1       	ldi	r30, 0x12	; 18
     35c:	ac 96       	adiw	r28, 0x2c	; 44
     35e:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__>

00000362 <__lshrdi3>:
     362:	a0 e1       	ldi	r26, 0x10	; 16
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e7 eb       	ldi	r30, 0xB7	; 183
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__>
     36e:	22 2e       	mov	r2, r18
     370:	33 2e       	mov	r3, r19
     372:	44 2e       	mov	r4, r20
     374:	55 2e       	mov	r5, r21
     376:	66 2e       	mov	r6, r22
     378:	77 2e       	mov	r7, r23
     37a:	88 2e       	mov	r8, r24
     37c:	99 2e       	mov	r9, r25
     37e:	00 23       	and	r16, r16
     380:	09 f4       	brne	.+2      	; 0x384 <__lshrdi3+0x22>
     382:	66 c0       	rjmp	.+204    	; 0x450 <__lshrdi3+0xee>
     384:	88 e0       	ldi	r24, 0x08	; 8
     386:	fe 01       	movw	r30, r28
     388:	31 96       	adiw	r30, 0x01	; 1
     38a:	11 92       	st	Z+, r1
     38c:	8a 95       	dec	r24
     38e:	e9 f7       	brne	.-6      	; 0x38a <__lshrdi3+0x28>
     390:	29 83       	std	Y+1, r18	; 0x01
     392:	3a 83       	std	Y+2, r19	; 0x02
     394:	4b 83       	std	Y+3, r20	; 0x03
     396:	5c 83       	std	Y+4, r21	; 0x04
     398:	6d 83       	std	Y+5, r22	; 0x05
     39a:	7e 83       	std	Y+6, r23	; 0x06
     39c:	8f 82       	std	Y+7, r8	; 0x07
     39e:	98 87       	std	Y+8, r25	; 0x08
     3a0:	e0 e2       	ldi	r30, 0x20	; 32
     3a2:	e0 1b       	sub	r30, r16
     3a4:	1e 16       	cp	r1, r30
     3a6:	cc f5       	brge	.+114    	; 0x41a <__lshrdi3+0xb8>
     3a8:	2d 81       	ldd	r18, Y+5	; 0x05
     3aa:	3e 81       	ldd	r19, Y+6	; 0x06
     3ac:	4f 81       	ldd	r20, Y+7	; 0x07
     3ae:	58 85       	ldd	r21, Y+8	; 0x08
     3b0:	60 2f       	mov	r22, r16
     3b2:	77 27       	eor	r23, r23
     3b4:	67 fd       	sbrc	r22, 7
     3b6:	70 95       	com	r23
     3b8:	da 01       	movw	r26, r20
     3ba:	c9 01       	movw	r24, r18
     3bc:	06 2e       	mov	r0, r22
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <__lshrdi3+0x66>
     3c0:	b6 95       	lsr	r27
     3c2:	a7 95       	ror	r26
     3c4:	97 95       	ror	r25
     3c6:	87 95       	ror	r24
     3c8:	0a 94       	dec	r0
     3ca:	d2 f7       	brpl	.-12     	; 0x3c0 <__lshrdi3+0x5e>
     3cc:	8d 87       	std	Y+13, r24	; 0x0d
     3ce:	9e 87       	std	Y+14, r25	; 0x0e
     3d0:	af 87       	std	Y+15, r26	; 0x0f
     3d2:	b8 8b       	std	Y+16, r27	; 0x10
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <__lshrdi3+0x7c>
     3d6:	22 0f       	add	r18, r18
     3d8:	33 1f       	adc	r19, r19
     3da:	44 1f       	adc	r20, r20
     3dc:	55 1f       	adc	r21, r21
     3de:	ea 95       	dec	r30
     3e0:	d2 f7       	brpl	.-12     	; 0x3d6 <__lshrdi3+0x74>
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	ab 81       	ldd	r26, Y+3	; 0x03
     3e8:	bc 81       	ldd	r27, Y+4	; 0x04
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <__lshrdi3+0x92>
     3ec:	b6 95       	lsr	r27
     3ee:	a7 95       	ror	r26
     3f0:	97 95       	ror	r25
     3f2:	87 95       	ror	r24
     3f4:	6a 95       	dec	r22
     3f6:	d2 f7       	brpl	.-12     	; 0x3ec <__lshrdi3+0x8a>
     3f8:	28 2b       	or	r18, r24
     3fa:	39 2b       	or	r19, r25
     3fc:	4a 2b       	or	r20, r26
     3fe:	5b 2b       	or	r21, r27
     400:	29 87       	std	Y+9, r18	; 0x09
     402:	3a 87       	std	Y+10, r19	; 0x0a
     404:	4b 87       	std	Y+11, r20	; 0x0b
     406:	5c 87       	std	Y+12, r21	; 0x0c
     408:	29 84       	ldd	r2, Y+9	; 0x09
     40a:	3a 84       	ldd	r3, Y+10	; 0x0a
     40c:	4b 84       	ldd	r4, Y+11	; 0x0b
     40e:	5c 84       	ldd	r5, Y+12	; 0x0c
     410:	6d 84       	ldd	r6, Y+13	; 0x0d
     412:	7e 84       	ldd	r7, Y+14	; 0x0e
     414:	8f 84       	ldd	r8, Y+15	; 0x0f
     416:	98 88       	ldd	r9, Y+16	; 0x10
     418:	1b c0       	rjmp	.+54     	; 0x450 <__lshrdi3+0xee>
     41a:	1d 86       	std	Y+13, r1	; 0x0d
     41c:	1e 86       	std	Y+14, r1	; 0x0e
     41e:	1f 86       	std	Y+15, r1	; 0x0f
     420:	18 8a       	std	Y+16, r1	; 0x10
     422:	2e 2f       	mov	r18, r30
     424:	33 27       	eor	r19, r19
     426:	27 fd       	sbrc	r18, 7
     428:	30 95       	com	r19
     42a:	30 95       	com	r19
     42c:	21 95       	neg	r18
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
     430:	8d 81       	ldd	r24, Y+5	; 0x05
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	af 81       	ldd	r26, Y+7	; 0x07
     436:	b8 85       	ldd	r27, Y+8	; 0x08
     438:	04 c0       	rjmp	.+8      	; 0x442 <__lshrdi3+0xe0>
     43a:	b6 95       	lsr	r27
     43c:	a7 95       	ror	r26
     43e:	97 95       	ror	r25
     440:	87 95       	ror	r24
     442:	2a 95       	dec	r18
     444:	d2 f7       	brpl	.-12     	; 0x43a <__lshrdi3+0xd8>
     446:	89 87       	std	Y+9, r24	; 0x09
     448:	9a 87       	std	Y+10, r25	; 0x0a
     44a:	ab 87       	std	Y+11, r26	; 0x0b
     44c:	bc 87       	std	Y+12, r27	; 0x0c
     44e:	dc cf       	rjmp	.-72     	; 0x408 <__lshrdi3+0xa6>
     450:	22 2d       	mov	r18, r2
     452:	33 2d       	mov	r19, r3
     454:	44 2d       	mov	r20, r4
     456:	55 2d       	mov	r21, r5
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	88 2d       	mov	r24, r8
     45e:	99 2d       	mov	r25, r9
     460:	e2 e1       	ldi	r30, 0x12	; 18
     462:	60 96       	adiw	r28, 0x10	; 16
     464:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__>

00000468 <MetadataFlagsLayerC__0__PacketFlag__clear>:
		getMeta(msg)->flags |= (1<<bit);
	}

	async command void PacketFlag.clear[uint8_t bit](message_t* msg)
	{
     468:	fb 01       	movw	r30, r22
		RADIO_ASSERT( bit  < 8 );

		getMeta(msg)->flags &= ~(1<<bit);
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <MetadataFlagsLayerC__0__PacketFlag__clear+0xc>
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	8a 95       	dec	r24
     476:	e2 f7       	brpl	.-8      	; 0x470 <MetadataFlagsLayerC__0__PacketFlag__clear+0x8>
     478:	20 95       	com	r18
     47a:	87 a5       	ldd	r24, Z+47	; 0x2f
     47c:	82 23       	and	r24, r18
     47e:	87 a7       	std	Z+47, r24	; 0x2f
     480:	08 95       	ret

00000482 <__nesc_hton_uint32>:
         (uint32_t)base[1] << 16 |
         (uint32_t)base[2] << 8 | base[3];
}

inline uint32_t __nesc_hton_uint32(void * COUNT(4) target, uint32_t value) @safe() {
     482:	fc 01       	movw	r30, r24
  uint8_t *base = target;
  base[3] = value;
     484:	43 83       	std	Z+3, r20	; 0x03
  base[2] = value >> 8;
     486:	bb 27       	eor	r27, r27
     488:	a7 2f       	mov	r26, r23
     48a:	96 2f       	mov	r25, r22
     48c:	85 2f       	mov	r24, r21
     48e:	82 83       	std	Z+2, r24	; 0x02
  base[1] = value >> 16;
     490:	cb 01       	movw	r24, r22
     492:	aa 27       	eor	r26, r26
     494:	bb 27       	eor	r27, r27
     496:	81 83       	std	Z+1, r24	; 0x01
  base[0] = value >> 24;
     498:	87 2f       	mov	r24, r23
     49a:	99 27       	eor	r25, r25
     49c:	aa 27       	eor	r26, r26
     49e:	bb 27       	eor	r27, r27
     4a0:	80 83       	st	Z, r24
  return value;
}
     4a2:	cb 01       	movw	r24, r22
     4a4:	ba 01       	movw	r22, r20
     4a6:	08 95       	ret

000004a8 <MessageBufferLayerP__0__Tasklet__suspend>:
	 * can be nested. It is very important that the same number of
	 * resume commands must be called in all control paths, e.g. be very
	 * careful with the return and break commands.
	 */
	command void suspend();
     4a8:	2f b7       	in	r18, 0x3f	; 63
    sei();
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
     4aa:	f8 94       	cli
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     4ac:	33 27       	eor	r19, r19
     4ae:	80 91 92 04 	lds	r24, 0x0492
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	80 93 92 04 	sts	0x0492, r24
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     4b8:	2f bf       	out	0x3f, r18	; 63
     4ba:	08 95       	ret

000004bc <PacketLinkLayerP__0__getMeta>:

// ------- PacketLink

	link_metadata_t* getMeta(message_t* msg)
	{
     4bc:	87 96       	adiw	r24, 0x27	; 39
     4be:	08 95       	ret

000004c0 <Atm128AdcP__isPrecise>:
  /* Return TRUE if switching to 'channel' with reference voltage 'refVoltage'
     will give a precise result (the first sample after changing reference
     voltage or switching to/between a differential channel is imprecise)
  */
  inline bool isPrecise(Atm128Admux_t admux, uint8_t channel, uint8_t refVoltage) {
     4c0:	78 2f       	mov	r23, r24
     4c2:	7f 71       	andi	r23, 0x1F	; 31
    return refVoltage == admux.refs &&
     4c4:	55 27       	eor	r21, r21
     4c6:	82 95       	swap	r24
     4c8:	86 95       	lsr	r24
     4ca:	86 95       	lsr	r24
     4cc:	83 70       	andi	r24, 0x03	; 3
     4ce:	99 27       	eor	r25, r25
     4d0:	48 17       	cp	r20, r24
     4d2:	59 07       	cpc	r21, r25
     4d4:	19 f0       	breq	.+6      	; 0x4dc <Atm128AdcP__isPrecise+0x1c>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	13 c0       	rjmp	.+38     	; 0x502 <Atm128AdcP__isPrecise+0x42>
     4dc:	86 2f       	mov	r24, r22
     4de:	88 50       	subi	r24, 0x08	; 8
     4e0:	86 31       	cpi	r24, 0x16	; 22
     4e2:	18 f0       	brcs	.+6      	; 0x4ea <Atm128AdcP__isPrecise+0x2a>
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0c c0       	rjmp	.+24     	; 0x502 <Atm128AdcP__isPrecise+0x42>
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	26 2f       	mov	r18, r22
     4f0:	33 27       	eor	r19, r19
     4f2:	87 2f       	mov	r24, r23
     4f4:	99 27       	eor	r25, r25
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	11 f4       	brne	.+4      	; 0x500 <Atm128AdcP__isPrecise+0x40>
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	ca 01       	movw	r24, r20
      (channel <= ATM128_ADC_SNGL_ADC7 || channel >= ATM128_ADC_SNGL_1_23 || channel == admux.mux);
  }
     502:	99 27       	eor	r25, r25
     504:	08 95       	ret

00000506 <Atm128AdcP__HplAtm128Adc__getAdmux>:
  /**
   * Read the ADMUX (ADC selection) register
   * @return Current ADMUX value
   */
  async command Atm128Admux_t getAdmux();
     506:	80 91 7c 00 	lds	r24, 0x007C
     50a:	08 95       	ret

0000050c <SchedulerBasicP__popTask>:
  // move the head forward
  // if the head is at the end, mark the tail at the end, too
  // mark the task as not in the queue
  inline uint8_t popTask()
  {
     50c:	80 91 2f 06 	lds	r24, 0x062F
     510:	8f 3f       	cpi	r24, 0xFF	; 255
     512:	19 f4       	brne	.+6      	; 0x51a <SchedulerBasicP__popTask+0xe>
    if( m_head != NO_TASK )
     514:	2f ef       	ldi	r18, 0xFF	; 255
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	0e c0       	rjmp	.+28     	; 0x536 <SchedulerBasicP__popTask+0x2a>
    {
      uint8_t id = m_head;
      m_head = m_next[m_head];
     51a:	28 2f       	mov	r18, r24
     51c:	33 27       	eor	r19, r19
     51e:	f9 01       	movw	r30, r18
     520:	e6 58       	subi	r30, 0x86	; 134
     522:	fb 4f       	sbci	r31, 0xFB	; 251
     524:	80 81       	ld	r24, Z
     526:	80 93 2f 06 	sts	0x062F, r24
      if( m_head == NO_TASK )
     52a:	8f 3f       	cpi	r24, 0xFF	; 255
     52c:	11 f4       	brne	.+4      	; 0x532 <SchedulerBasicP__popTask+0x26>
      {
	m_tail = NO_TASK;
     52e:	80 93 d4 06 	sts	0x06D4, r24
      }
      m_next[id] = NO_TASK;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	80 83       	st	Z, r24
      return id;
    }
    else
    {
      return NO_TASK;
    }
  }
     536:	c9 01       	movw	r24, r18
     538:	08 95       	ret

0000053a <SchedulerBasicP__TaskBasic__postTask>:
  
  bool isWaiting( uint8_t id )
  {
    return (m_next[id] != NO_TASK) || (m_tail == id);
  }

  bool pushTask( uint8_t id )
  {
    if( !isWaiting(id) )
    {
      if( m_head == NO_TASK )
      {
	m_head = id;
	m_tail = id;
      }
      else
      {
	m_next[m_tail] = id;
	m_tail = id;
      }
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  
  command void Scheduler.init()
  {
    atomic
    {
      memset( (void *)m_next, NO_TASK, sizeof(m_next) );
      m_head = NO_TASK;
      m_tail = NO_TASK;
    }
  }
  
  command bool Scheduler.runNextTask()
  {
    uint8_t nextTask;
    atomic
    {
      nextTask = popTask();
      if( nextTask == NO_TASK )
      {
	return FALSE;
      }
    }
    signal TaskBasic.runTask[nextTask]();
    return TRUE;
  }

  command void Scheduler.taskLoop()
  {
    for (;;)
    {
      uint8_t nextTask;

      atomic
      {
	while ((nextTask = popTask()) == NO_TASK)
	{
	  call McuSleep.sleep();
	}
      }
      signal TaskBasic.runTask[nextTask]();
    }
  }

  /**
   * Return SUCCESS if the post succeeded, EBUSY if it was already posted.
   */
  
  async command error_t TaskBasic.postTask[uint8_t id]()
  {
     53a:	28 2f       	mov	r18, r24
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     53c:	9f b7       	in	r25, 0x3f	; 63
     53e:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     540:	e8 2f       	mov	r30, r24
     542:	ff 27       	eor	r31, r31
     544:	e6 58       	subi	r30, 0x86	; 134
     546:	fb 4f       	sbci	r31, 0xFB	; 251
     548:	80 81       	ld	r24, Z
     54a:	8f 3f       	cpi	r24, 0xFF	; 255
     54c:	81 f4       	brne	.+32     	; 0x56e <SchedulerBasicP__TaskBasic__postTask+0x34>
     54e:	e0 91 d4 06 	lds	r30, 0x06D4
     552:	e2 17       	cp	r30, r18
     554:	71 f4       	brne	.+28     	; 0x572 <SchedulerBasicP__TaskBasic__postTask+0x38>
     556:	0b c0       	rjmp	.+22     	; 0x56e <SchedulerBasicP__TaskBasic__postTask+0x34>
     558:	20 93 2f 06 	sts	0x062F, r18
     55c:	04 c0       	rjmp	.+8      	; 0x566 <SchedulerBasicP__TaskBasic__postTask+0x2c>
     55e:	ff 27       	eor	r31, r31
     560:	e6 58       	subi	r30, 0x86	; 134
     562:	fb 4f       	sbci	r31, 0xFB	; 251
     564:	20 83       	st	Z, r18
     566:	20 93 d4 06 	sts	0x06D4, r18
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	07 c0       	rjmp	.+14     	; 0x57c <SchedulerBasicP__TaskBasic__postTask+0x42>
     56e:	25 e0       	ldi	r18, 0x05	; 5
     570:	05 c0       	rjmp	.+10     	; 0x57c <SchedulerBasicP__TaskBasic__postTask+0x42>
     572:	80 91 2f 06 	lds	r24, 0x062F
     576:	8f 3f       	cpi	r24, 0xFF	; 255
     578:	91 f7       	brne	.-28     	; 0x55e <SchedulerBasicP__TaskBasic__postTask+0x24>
     57a:	ee cf       	rjmp	.-36     	; 0x558 <SchedulerBasicP__TaskBasic__postTask+0x1e>
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     57c:	89 2f       	mov	r24, r25
     57e:	99 27       	eor	r25, r25
  SREG = original_SREG;
     580:	8f bf       	out	0x3f, r24	; 63
    atomic { return pushTask(id) ? SUCCESS : EBUSY; }
  }

  default event void TaskBasic.runTask[uint8_t id]()
  {
     582:	82 2f       	mov	r24, r18
     584:	99 27       	eor	r25, r25
     586:	08 95       	ret

00000588 <ArbiterP__0__grantedTask__postTask>:
   * posted; the semantics of a non-SUCCESS return value depend on the
   * implementation of this interface (the class of task).
   */
  
  async command error_t postTask();
     588:	8b e0       	ldi	r24, 0x0B	; 11
     58a:	d7 df       	rcall	.-82     	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     58c:	99 27       	eor	r25, r25
     58e:	08 95       	ret

00000590 <VirtualizeTimerC__0__updateFromTimer__postTask>:
     590:	8a e0       	ldi	r24, 0x0A	; 10
     592:	d3 df       	rcall	.-90     	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     594:	99 27       	eor	r25, r25
     596:	08 95       	ret

00000598 <MessageBufferLayerP__0__sendTask__postTask>:
     598:	80 e1       	ldi	r24, 0x10	; 16
     59a:	cf df       	rcall	.-98     	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     59c:	99 27       	eor	r25, r25
     59e:	08 95       	ret

000005a0 <PacketLinkLayerP__0__send__postTask>:
     5a0:	8e e0       	ldi	r24, 0x0E	; 14
     5a2:	cb df       	rcall	.-106    	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     5a4:	99 27       	eor	r25, r25
     5a6:	08 95       	ret

000005a8 <__vector_36>:
	default async event void Uart1Interrupts.txInterruptHandler() { }

	  
	AVR_ATOMIC_HANDLER(USART1_RX_vect/*__vector_36*/) 
	{
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	ef 93       	push	r30
     5c8:	ff 93       	push	r31
		if (READ_BIT(UCSR1A, RXC1)) 
     5ca:	80 91 c8 00 	lds	r24, 0x00C8
     5ce:	87 ff       	sbrs	r24, 7
     5d0:	33 c0       	rjmp	.+102    	; 0x638 <__vector_36+0x90>
		{
			privReceivedByte = UDR1;
     5d2:	40 91 ce 00 	lds	r20, 0x00CE
     5d6:	40 93 66 04 	sts	0x0466, r20
	}
	
	async event void Uart1Interrupts.rxInterruptHandler(uint8_t byte)
	{
		if(rxBuf) //if we're receiving something large
     5da:	e0 91 32 06 	lds	r30, 0x0632
     5de:	f0 91 33 06 	lds	r31, 0x0633
     5e2:	30 97       	sbiw	r30, 0x00	; 0
     5e4:	01 f1       	breq	.+64     	; 0x626 <__vector_36+0x7e>
		{
			if(rxPos < rxLen) //there are still some bytes to capture
     5e6:	20 91 a5 05 	lds	r18, 0x05A5
     5ea:	30 91 a6 05 	lds	r19, 0x05A6
     5ee:	80 91 1d 06 	lds	r24, 0x061D
     5f2:	90 91 1e 06 	lds	r25, 0x061E
     5f6:	28 17       	cp	r18, r24
     5f8:	39 07       	cpc	r19, r25
     5fa:	c8 f4       	brcc	.+50     	; 0x62e <__vector_36+0x86>
			{
				rxBuf[ rxPos ] = byte;
     5fc:	e2 0f       	add	r30, r18
     5fe:	f3 1f       	adc	r31, r19
     600:	40 83       	st	Z, r20
				rxPos++;
     602:	80 91 a5 05 	lds	r24, 0x05A5
     606:	90 91 a6 05 	lds	r25, 0x05A6
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	90 93 a6 05 	sts	0x05A6, r25
     610:	80 93 a5 05 	sts	0x05A5, r24
				if(rxPos == rxLen) //finished
     614:	20 91 1d 06 	lds	r18, 0x061D
     618:	30 91 1e 06 	lds	r19, 0x061E
     61c:	82 17       	cp	r24, r18
     61e:	93 07       	cpc	r25, r19
     620:	31 f4       	brne	.+12     	; 0x62e <__vector_36+0x86>
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	03 c0       	rjmp	.+6      	; 0x62c <__vector_36+0x84>
				{
					post receiveDoneTask();
				}
			}
		}
		else
		{
			rxUnexpectedByte = byte;
     626:	40 93 dd 05 	sts	0x05DD, r20
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	86 df       	rcall	.-244    	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     62e:	80 91 c8 00 	lds	r24, 0x00C8
     632:	8f 77       	andi	r24, 0x7F	; 127
     634:	80 93 c8 00 	sts	0x00C8, r24
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <__vector_38>:
			//debug
//			UDR1 = privReceivedByte;
			signal Uart1Interrupts.rxInterruptHandler(privReceivedByte);
    	}
  	}
	  
  
  	AVR_ATOMIC_HANDLER(USART1_TX_vect/*__vector_38*/) 
  	{
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
			post unexpectedByteReceivedTask();	
		}
		call Uart1Interrupts.clearRxInterrupt(); //for convenience
	}
	
	async event void Uart1Interrupts.txInterruptHandler()
	{
		if(txBuf != NULL) //means that we're sending something large
     67c:	e0 91 6c 04 	lds	r30, 0x046C
     680:	f0 91 6d 04 	lds	r31, 0x046D
     684:	30 97       	sbiw	r30, 0x00	; 0
     686:	71 f1       	breq	.+92     	; 0x6e4 <__vector_38+0x8a>
		{
			if( txPos < txLen ) //there are still some bytes to be sent
     688:	20 91 2d 06 	lds	r18, 0x062D
     68c:	30 91 2e 06 	lds	r19, 0x062E
     690:	80 91 8d 04 	lds	r24, 0x048D
     694:	90 91 8e 04 	lds	r25, 0x048E
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	80 f4       	brcc	.+32     	; 0x6be <__vector_38+0x64>
			{
				while(!READ_BIT(UCSR1A, UDRE1)); //for convenience, expected overhead is low
     69e:	80 91 c8 00 	lds	r24, 0x00C8
     6a2:	85 ff       	sbrs	r24, 5
     6a4:	fc cf       	rjmp	.-8      	; 0x69e <__vector_38+0x44>
				UDR1 = txBuf[ txPos ];
     6a6:	e2 0f       	add	r30, r18
     6a8:	f3 1f       	adc	r31, r19
     6aa:	80 81       	ld	r24, Z
     6ac:	80 93 ce 00 	sts	0x00CE, r24
				txPos++;
     6b0:	2f 5f       	subi	r18, 0xFF	; 255
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	30 93 2e 06 	sts	0x062E, r19
     6b8:	20 93 2d 06 	sts	0x062D, r18
     6bc:	13 c0       	rjmp	.+38     	; 0x6e4 <__vector_38+0x8a>
			}	
			else if( txPos == txLen )
     6be:	28 17       	cp	r18, r24
     6c0:	39 07       	cpc	r19, r25
     6c2:	81 f4       	brne	.+32     	; 0x6e4 <__vector_38+0x8a>
			{
				txLen = 0;
     6c4:	10 92 8e 04 	sts	0x048E, r1
     6c8:	10 92 8d 04 	sts	0x048D, r1
				txPos = 0;
     6cc:	10 92 2e 06 	sts	0x062E, r1
     6d0:	10 92 2d 06 	sts	0x062D, r1
				txBuf = NULL;
     6d4:	10 92 6d 04 	sts	0x046D, r1
     6d8:	10 92 6c 04 	sts	0x046C, r1
				atomic
				{
					txBusy = FALSE;	
     6dc:	10 92 a4 05 	sts	0x05A4, r1
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	2b df       	rcall	.-426    	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     6e4:	80 91 c8 00 	lds	r24, 0x00C8
     6e8:	8f 7b       	andi	r24, 0xBF	; 191
     6ea:	80 93 c8 00 	sts	0x00C8, r24
     6ee:	ff 91       	pop	r31
     6f0:	ef 91       	pop	r30
     6f2:	bf 91       	pop	r27
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	7f 91       	pop	r23
     6fc:	6f 91       	pop	r22
     6fe:	5f 91       	pop	r21
     700:	4f 91       	pop	r20
     702:	3f 91       	pop	r19
     704:	2f 91       	pop	r18
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63
     70a:	0f 90       	pop	r0
     70c:	1f 90       	pop	r1
     70e:	18 95       	reti

00000710 <__vector_68>:
// ----- COUNTER: symbol counter interrupt status register (SCIRQS), overflow flag (IRQSOF)

	default async event void Counter.overflow() { }

	AVR_ATOMIC_HANDLER(SCNT_OVFL_vect) { signal Counter.overflow(); }
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	8f 93       	push	r24
  async event void CounterFrom.overflow()
  {
    atomic
    {
      m_upper++;
     71c:	80 91 e0 05 	lds	r24, 0x05E0
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	80 93 e0 05 	sts	0x05E0, r24
     726:	8f 91       	pop	r24
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <HplAtmRfa1TimerMacP__Counter__get>:
     732:	4f b7       	in	r20, 0x3f	; 63
    sei();
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
     734:	f8 94       	cli
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     736:	55 27       	eor	r21, r21
     738:	20 91 e1 00 	lds	r18, 0x00E1
     73c:	62 2f       	mov	r22, r18
     73e:	20 91 e2 00 	lds	r18, 0x00E2
     742:	72 2f       	mov	r23, r18
     744:	20 91 e3 00 	lds	r18, 0x00E3
     748:	82 2f       	mov	r24, r18
     74a:	20 91 e4 00 	lds	r18, 0x00E4
     74e:	92 2f       	mov	r25, r18
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     750:	4f bf       	out	0x3f, r20	; 63
     752:	08 95       	ret

00000754 <AtmegaCompareP__1__AtmegaCounter__get>:
{
// ----- timer counter register (TCNT) 

	/* Returns the current counter value */
	async command size_type get();
     754:	ee cf       	rjmp	.-36     	; 0x732 <HplAtmRfa1TimerMacP__Counter__get>
     756:	08 95       	ret

00000758 <RandomCollisionLayerP__0__RadioAlarm__getNow>:

	/**
	 * Returns the current time as measured by the radio stack.
	 */
	async command tradio_size getNow();
     758:	fd cf       	rjmp	.-6      	; 0x754 <AtmegaCompareP__1__AtmegaCounter__get>
     75a:	08 95       	ret

0000075c <AtmegaCounterP__0__Counter__get>:
		return SUCCESS;
	}

	async command size_type Counter.get()
	{
     75c:	ea cf       	rjmp	.-44     	; 0x732 <HplAtmRfa1TimerMacP__Counter__get>
	}

	async command size_type Alarm.getNow()
	{
		return call AtmegaCounter.get();
     75e:	08 95       	ret

00000760 <CounterToLocalTimeC__1__LocalTime__get>:
}
implementation
{
  async command uint32_t LocalTime.get()
  {
     760:	fd cf       	rjmp	.-6      	; 0x75c <AtmegaCounterP__0__Counter__get>
     762:	08 95       	ret

00000764 <TransformCounterC__0__CounterFrom__get>:
   * Return counter value. Counters start at boot - some time sources may
   * stop counting while the processor is in low-power mode.
   * @return Current counter value.
   */
  async command size_type get();
     764:	fb cf       	rjmp	.-10     	; 0x75c <AtmegaCounterP__0__Counter__get>
     766:	08 95       	ret

00000768 <TransformAlarmC__0__Counter__get>:
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     76c:	0f b7       	in	r16, 0x3f	; 63
     76e:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     770:	10 91 e0 05 	lds	r17, 0x05E0
     774:	f7 df       	rcall	.-18     	; 0x764 <TransformCounterC__0__CounterFrom__get>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	80 91 e0 00 	lds	r24, 0x00E0

	async command bool Counter.test() { return SCIRQS & (1 << IRQSOF); }
     77e:	83 ff       	sbrs	r24, 3
     780:	04 c0       	rjmp	.+8      	; 0x78a <TransformAlarmC__0__Counter__get+0x22>
     782:	1f 5f       	subi	r17, 0xFF	; 255
     784:	ef df       	rcall	.-34     	; 0x764 <TransformCounterC__0__CounterFrom__get>
     786:	9b 01       	movw	r18, r22
     788:	ac 01       	movw	r20, r24
     78a:	80 2f       	mov	r24, r16
     78c:	99 27       	eor	r25, r25
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     78e:	8f bf       	out	0x3f, r24	; 63
     790:	61 2f       	mov	r22, r17
  SREG = original_SREG;
     792:	77 27       	eor	r23, r23
     794:	88 27       	eor	r24, r24
     796:	99 27       	eor	r25, r25
     798:	fa e1       	ldi	r31, 0x1A	; 26
     79a:	66 0f       	add	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	88 1f       	adc	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	fa 95       	dec	r31
     7a4:	d1 f7       	brne	.-12     	; 0x79a <TransformAlarmC__0__Counter__get+0x32>
     7a6:	e6 e0       	ldi	r30, 0x06	; 6
     7a8:	56 95       	lsr	r21
     7aa:	47 95       	ror	r20
     7ac:	37 95       	ror	r19
     7ae:	27 95       	ror	r18
     7b0:	ea 95       	dec	r30
     7b2:	d1 f7       	brne	.-12     	; 0x7a8 <TransformAlarmC__0__Counter__get+0x40>
     7b4:	62 2b       	or	r22, r18
     7b6:	73 2b       	or	r23, r19
     7b8:	84 2b       	or	r24, r20
     7ba:	95 2b       	or	r25, r21
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <TransformAlarmC__0__set_alarm>:
    call AlarmFrom.stop();
  }

  void set_alarm()
  {
     7c2:	af 92       	push	r10
     7c4:	bf 92       	push	r11
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
  SREG = original_SREG;
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
    to_size_type now = call Counter.get(), expires, remaining;
     7d2:	ca df       	rcall	.-108    	; 0x768 <TransformAlarmC__0__Counter__get>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	20 91 a0 05 	lds	r18, 0x05A0

    /* m_t0 is assumed to be in the past. If it's > now, we assume
       that time has wrapped around */

    expires = m_t0 + m_dt;
     7dc:	30 91 a1 05 	lds	r19, 0x05A1
     7e0:	40 91 a2 05 	lds	r20, 0x05A2
     7e4:	50 91 a3 05 	lds	r21, 0x05A3
     7e8:	80 91 9c 05 	lds	r24, 0x059C
     7ec:	90 91 9d 05 	lds	r25, 0x059D
     7f0:	a0 91 9e 05 	lds	r26, 0x059E
     7f4:	b0 91 9f 05 	lds	r27, 0x059F
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	a4 1f       	adc	r26, r20
     7fe:	b5 1f       	adc	r27, r21
     800:	e2 16       	cp	r14, r18

    /* The cast is necessary to get correct wrap-around arithmetic */
    remaining = (to_size_type)(expires - now);

    /* if (expires <= now) remaining = 0; in wrap-around arithmetic */
    if (m_t0 <= now)
     802:	f3 06       	cpc	r15, r19
     804:	04 07       	cpc	r16, r20
     806:	15 07       	cpc	r17, r21
     808:	30 f0       	brcs	.+12     	; 0x816 <TransformAlarmC__0__set_alarm+0x54>
     80a:	82 17       	cp	r24, r18
      {
	if (expires >= m_t0 && // if it wraps, it's > now
     80c:	93 07       	cpc	r25, r19
     80e:	a4 07       	cpc	r26, r20
     810:	b5 07       	cpc	r27, r21
     812:	58 f0       	brcs	.+22     	; 0x82a <TransformAlarmC__0__set_alarm+0x68>
     814:	05 c0       	rjmp	.+10     	; 0x820 <TransformAlarmC__0__set_alarm+0x5e>
     816:	82 17       	cp	r24, r18
	    expires <= now)
	  remaining = 0;
      }
    else
      {
	if (expires >= m_t0 || // didn't wrap so < now
     818:	93 07       	cpc	r25, r19
     81a:	a4 07       	cpc	r26, r20
     81c:	b5 07       	cpc	r27, r21
     81e:	e0 f5       	brcc	.+120    	; 0x898 <TransformAlarmC__0__set_alarm+0xd6>
     820:	e8 16       	cp	r14, r24
     822:	f9 06       	cpc	r15, r25
     824:	0a 07       	cpc	r16, r26
     826:	1b 07       	cpc	r17, r27
     828:	b8 f5       	brcc	.+110    	; 0x898 <TransformAlarmC__0__set_alarm+0xd6>
     82a:	9c 01       	movw	r18, r24
     82c:	ad 01       	movw	r20, r26
     82e:	2e 19       	sub	r18, r14
     830:	3f 09       	sbc	r19, r15
     832:	40 0b       	sbc	r20, r16
     834:	51 0b       	sbc	r21, r17
     836:	21 30       	cpi	r18, 0x01	; 1
	    expires <= now)
	  remaining = 0;
      }
    if (remaining > MAX_DELAY)
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	36 07       	cpc	r19, r22
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	46 07       	cpc	r20, r22
     840:	62 e0       	ldi	r22, 0x02	; 2
     842:	56 07       	cpc	r21, r22
     844:	68 f1       	brcs	.+90     	; 0x8a0 <TransformAlarmC__0__set_alarm+0xde>
     846:	80 e0       	ldi	r24, 0x00	; 0
      {
	m_t0 = now + MAX_DELAY;
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b2 e0       	ldi	r27, 0x02	; 2
     84e:	e8 0e       	add	r14, r24
     850:	f9 1e       	adc	r15, r25
     852:	0a 1f       	adc	r16, r26
     854:	1b 1f       	adc	r17, r27
     856:	e0 92 a0 05 	sts	0x05A0, r14
     85a:	f0 92 a1 05 	sts	0x05A1, r15
     85e:	00 93 a2 05 	sts	0x05A2, r16
     862:	10 93 a3 05 	sts	0x05A3, r17
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e0       	ldi	r26, 0x00	; 0
     86c:	be ef       	ldi	r27, 0xFE	; 254
     86e:	e8 0e       	add	r14, r24
     870:	f9 1e       	adc	r15, r25
     872:	0a 1f       	adc	r16, r26
     874:	1b 1f       	adc	r17, r27
     876:	20 50       	subi	r18, 0x00	; 0
	m_dt = remaining - MAX_DELAY;
     878:	30 40       	sbci	r19, 0x00	; 0
     87a:	40 40       	sbci	r20, 0x00	; 0
     87c:	52 40       	sbci	r21, 0x02	; 2
     87e:	20 93 9c 05 	sts	0x059C, r18
     882:	30 93 9d 05 	sts	0x059D, r19
     886:	40 93 9e 05 	sts	0x059E, r20
     88a:	50 93 9f 05 	sts	0x059F, r21
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	52 e0       	ldi	r21, 0x02	; 2
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <TransformAlarmC__0__set_alarm+0xfe>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	80 93 a0 05 	sts	0x05A0, r24
	remaining = MAX_DELAY;
      }
    else
      {
	m_t0 += m_dt;
     8a4:	90 93 a1 05 	sts	0x05A1, r25
     8a8:	a0 93 a2 05 	sts	0x05A2, r26
     8ac:	b0 93 a3 05 	sts	0x05A3, r27
     8b0:	10 92 9c 05 	sts	0x059C, r1
	m_dt = 0;
     8b4:	10 92 9d 05 	sts	0x059D, r1
     8b8:	10 92 9e 05 	sts	0x059E, r1
     8bc:	10 92 9f 05 	sts	0x059F, r1
     8c0:	59 01       	movw	r10, r18
      }
    call AlarmFrom.startAt((from_size_type)now << bit_shift_right,
     8c2:	6a 01       	movw	r12, r20
     8c4:	b6 e0       	ldi	r27, 0x06	; 6
     8c6:	aa 0c       	add	r10, r10
     8c8:	bb 1c       	adc	r11, r11
     8ca:	cc 1c       	adc	r12, r12
     8cc:	dd 1c       	adc	r13, r13
     8ce:	ba 95       	dec	r27
     8d0:	d1 f7       	brne	.-12     	; 0x8c6 <TransformAlarmC__0__set_alarm+0x104>
     8d2:	a6 e0       	ldi	r26, 0x06	; 6
     8d4:	ee 0c       	add	r14, r14
     8d6:	ff 1c       	adc	r15, r15
     8d8:	00 1f       	adc	r16, r16
     8da:	11 1f       	adc	r17, r17
     8dc:	aa 95       	dec	r26
     8de:	d1 f7       	brne	.-12     	; 0x8d4 <TransformAlarmC__0__set_alarm+0x112>
     8e0:	28 df       	rcall	.-432    	; 0x732 <HplAtmRfa1TimerMacP__Counter__get>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
     8e6:	2e 5f       	subi	r18, 0xFE	; 254
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	4f 4f       	sbci	r20, 0xFF	; 255
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
     8ee:	da 01       	movw	r26, r20
     8f0:	c9 01       	movw	r24, r18
     8f2:	8e 19       	sub	r24, r14
     8f4:	9f 09       	sbc	r25, r15
     8f6:	a0 0b       	sbc	r26, r16
     8f8:	b1 0b       	sbc	r27, r17
     8fa:	8a 15       	cp	r24, r10
     8fc:	9b 05       	cpc	r25, r11
     8fe:	ac 05       	cpc	r26, r12
     900:	bd 05       	cpc	r27, r13
     902:	30 f4       	brcc	.+12     	; 0x910 <TransformAlarmC__0__set_alarm+0x14e>
     904:	a8 01       	movw	r20, r16
     906:	97 01       	movw	r18, r14
     908:	2a 0d       	add	r18, r10
     90a:	3b 1d       	adc	r19, r11
     90c:	4c 1d       	adc	r20, r12
     90e:	5d 1d       	adc	r21, r13
     910:	50 93 f8 00 	sts	0x00F8, r21

	async command void Counter.reset() { SCIRQS = 1 << IRQSOF; }

// ----- COUNTER: symbol counter interrupt mask register (SCIRQM), overflow interrupt enable (IRQMOF)

	async command void Counter.start()
	{
		SET_BIT(SCIRQM, IRQMOF);
	}

	async command void Counter.stop()
	{
		CLR_BIT(SCIRQM, IRQMOF);
	}

	async command bool Counter.isOn() { return SCIRQM & (1 << IRQMOF); }

// ----- COUNTER: symbol counter control register (SCCR), counter enable (SCEN) and clock select (SCCKSEL)

	async command void Counter.setMode(uint8_t mode)
	{
		mode &= (1 << SCEN) | (1 << SCCKSEL);

		// RTC needs to be enabled, otherwise it does not work
		if( (mode & (1 << SCCKSEL)) != 0 )
			ASSR = 1 << AS2;

		atomic SCCR0 = (SCCR0 & ~((1 << SCEN) | (1 << SCCKSEL))) | mode;

		call McuPowerState.update();
	}

	async command uint8_t Counter.getMode()
	{
		return SCCR0 & ((1 << SCEN) | (1 << SCCKSEL));
	}


// ----- COMPARE A: symbol counter output compare register (SCOCR)

	async command uint32_t CompareA.get()
	{
		reg32_t time;

		atomic
		{
			time.ll = SCOCR1LL;
			time.lh = SCOCR1LH;
			time.hl = SCOCR1HL;
			time.hh	= SCOCR1HH;
		}

		return time.full;
	}

	async command void CompareA.set(uint32_t value)
	{
		reg32_t time;
		
		time.full = value;

		atomic
		{
			SCOCR1HH = time.hh;
     914:	40 93 f7 00 	sts	0x00F7, r20
			SCOCR1HL = time.hl;
     918:	30 93 f6 00 	sts	0x00F6, r19
			SCOCR1LH = time.lh;
     91c:	20 93 f5 00 	sts	0x00F5, r18
			SCOCR1LL = time.ll;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 e0 00 	sts	0x00E0, r24
		}
	}

// ----- COMPARE A: symbol counter interrupt status register (SCIRQS), comare match flag (IRQSCP)

	default async event void CompareA.fired() { }

	AVR_ATOMIC_HANDLER(SCNT_CMP1_vect) { signal CompareA.fired(); }

	async command bool CompareA.test() { return SCIRQS & (1 << IRQSCP1); }

	async command void CompareA.reset() { SCIRQS = 1 << IRQSCP1; }
     926:	80 91 df 00 	lds	r24, 0x00DF

// ----- COMPARE A: symbol counter interrupt mask register (SCIRQM), compare interrupt enable (IRQMCP)

	async command void CompareA.start()
	{
		SET_BIT(SCIRQM, IRQMCP1);
     92a:	81 60       	ori	r24, 0x01	; 1
     92c:	80 93 df 00 	sts	0x00DF, r24
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	80 93 61 04 	sts	0x0461, r24
  }

  async command void McuPowerState.update()
  {
   	powerState = -1;
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	bf 90       	pop	r11
     944:	af 90       	pop	r10
     946:	08 95       	ret

00000948 <__vector_65>:
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31

		call McuPowerState.update();
	}

	async command void CompareA.stop()
	{
		CLR_BIT(SCIRQM, IRQMCP1);
     96a:	80 91 df 00 	lds	r24, 0x00DF
     96e:	8e 7f       	andi	r24, 0xFE	; 254
     970:	80 93 df 00 	sts	0x00DF, r24
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	80 93 61 04 	sts	0x0461, r24
			   (from_size_type)remaining << bit_shift_right);
  }

  async command void Alarm.startAt(to_size_type t0, to_size_type dt)
  {
    atomic
    {
      m_t0 = t0;
      m_dt = dt;
      set_alarm();
    }
  }

  async command void Alarm.start(to_size_type dt)
  {
    call Alarm.startAt(call Alarm.getNow(), dt);
  }

  async event void AlarmFrom.fired()
  {
    atomic
    {
      if(m_dt == 0)
     97a:	80 91 9c 05 	lds	r24, 0x059C
     97e:	90 91 9d 05 	lds	r25, 0x059D
     982:	a0 91 9e 05 	lds	r26, 0x059E
     986:	b0 91 9f 05 	lds	r27, 0x059F
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	a1 05       	cpc	r26, r1
     98e:	b1 05       	cpc	r27, r1
     990:	19 f4       	brne	.+6      	; 0x998 <__vector_65+0x50>
     992:	89 e0       	ldi	r24, 0x09	; 9
     994:	d2 dd       	rcall	.-1116   	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     996:	01 c0       	rjmp	.+2      	; 0x99a <__vector_65+0x52>
     998:	14 df       	rcall	.-472    	; 0x7c2 <TransformAlarmC__0__set_alarm>
      {
	signal Alarm.fired();
      }
      else
      {
	set_alarm();
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <VirtualizeTimerC__0__TimerFrom__getNow>:
  /**
   * Return the current time.
   * @return Current time.
   */
  command uint32_t getNow();
     9bc:	d5 ce       	rjmp	.-598    	; 0x768 <TransformAlarmC__0__Counter__get>
     9be:	08 95       	ret

000009c0 <MetadataFlagsLayerC__0__PacketFlag__set>:
     9c0:	fb 01       	movw	r30, r22
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <MetadataFlagsLayerC__0__PacketFlag__set+0xc>
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	8a 95       	dec	r24
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <MetadataFlagsLayerC__0__PacketFlag__set+0x8>
     9d0:	87 a5       	ldd	r24, Z+47	; 0x2f
     9d2:	82 2b       	or	r24, r18
     9d4:	87 a7       	std	Z+47, r24	; 0x2f
     9d6:	08 95       	ret

000009d8 <RFA1DriverLayerP__PacketTimeStamp__set>:
	 *
	 * Sets the isValid flag to TRUE and the time stamp value to the
	 * specified value.
	 */
	async command void set(message_t* msg, size_type value);
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	6c 01       	movw	r12, r24
     9e6:	7a 01       	movw	r14, r20
     9e8:	8b 01       	movw	r16, r22

	/**
	 * Sets the flag in this message to TRUE
	 */
	async command void set(message_t* msg);
     9ea:	bc 01       	movw	r22, r24
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	e8 df       	rcall	.-48     	; 0x9c0 <MetadataFlagsLayerC__0__PacketFlag__set>
     9f0:	f6 01       	movw	r30, r12

	async command void PacketTimeStampRadio.set(message_t* msg, uint32_t value)
	{
		call TimeStampFlag.set(msg);
		getMeta(msg)->timestamp = value;
     9f2:	e3 a6       	std	Z+43, r14	; 0x2b
     9f4:	f4 a6       	std	Z+44, r15	; 0x2c
     9f6:	05 a7       	std	Z+45, r16	; 0x2d
     9f8:	16 a7       	std	Z+46, r17	; 0x2e
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	08 95       	ret

00000a08 <Ieee154PacketLayerP__0__Ieee154PacketLayer__getAckRequired>:
			&& (header->fcf & IEEE154_ACK_FRAME_MASK) == IEEE154_ACK_FRAME_VALUE;
	}

	async command bool Ieee154PacketLayer.getAckRequired(message_t* msg)
	{
     a08:	fc 01       	movw	r30, r24
  return value;
}

inline uint16_t __nesc_ntoh_leuint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
     a0a:	82 81       	ldd	r24, Z+2	; 0x02
     a0c:	99 27       	eor	r25, r25
     a0e:	98 2f       	mov	r25, r24
     a10:	88 27       	eor	r24, r24
     a12:	21 81       	ldd	r18, Z+1	; 0x01
     a14:	33 27       	eor	r19, r19
     a16:	82 2b       	or	r24, r18
     a18:	93 2b       	or	r25, r19
     a1a:	25 e0       	ldi	r18, 0x05	; 5
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
     a20:	2a 95       	dec	r18
     a22:	e1 f7       	brne	.-8      	; 0xa1c <Ieee154PacketLayerP__0__Ieee154PacketLayer__getAckRequired+0x14>
		return getHeader(msg)->fcf & (1 << IEEE154_FCF_ACK_REQ) ? TRUE : FALSE;
	}
     a24:	81 70       	andi	r24, 0x01	; 1
     a26:	90 70       	andi	r25, 0x00	; 0
     a28:	08 95       	ret

00000a2a <Ieee154PacketLayerP__0__Ieee154PacketLayer__isDataFrame>:
     a2a:	fc 01       	movw	r30, r24
  return value;
}

inline uint16_t __nesc_ntoh_leuint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	82 81       	ldd	r24, Z+2	; 0x02
     a32:	99 27       	eor	r25, r25
     a34:	98 2f       	mov	r25, r24
     a36:	88 27       	eor	r24, r24
     a38:	21 81       	ldd	r18, Z+1	; 0x01
     a3a:	33 27       	eor	r19, r19
     a3c:	82 2b       	or	r24, r18
     a3e:	93 2b       	or	r25, r19
     a40:	87 74       	andi	r24, 0x47	; 71
     a42:	9c 7c       	andi	r25, 0xCC	; 204
     a44:	81 54       	subi	r24, 0x41	; 65
     a46:	98 48       	sbci	r25, 0x88	; 136
     a48:	11 f4       	brne	.+4      	; 0xa4e <Ieee154PacketLayerP__0__Ieee154PacketLayer__isDataFrame+0x24>
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	ca 01       	movw	r24, r20
     a50:	08 95       	ret

00000a52 <Ieee154PacketLayerP__0__Ieee154PacketLayer__getDestAddr>:

	async command void Ieee154PacketLayer.setAckRequired(message_t* msg, bool ack)
	{
		if( ack )
			getHeader(msg)->fcf |= (1 << IEEE154_FCF_ACK_REQ);
		else
			getHeader(msg)->fcf &= ~(uint16_t)(1 << IEEE154_FCF_ACK_REQ);
	}

	async command bool Ieee154PacketLayer.getFramePending(message_t* msg)
	{
		return getHeader(msg)->fcf & (1 << IEEE154_FCF_FRAME_PENDING) ? TRUE : FALSE;
	}

	async command void Ieee154PacketLayer.setFramePending(message_t* msg, bool pending)
	{
		if( pending )
			getHeader(msg)->fcf |= (1 << IEEE154_FCF_FRAME_PENDING);
		else
			getHeader(msg)->fcf &= ~(uint16_t)(1 << IEEE154_FCF_FRAME_PENDING);
	}

	async command uint8_t Ieee154PacketLayer.getDSN(message_t* msg)
	{
		return getHeader(msg)->dsn;
	}

	async command void Ieee154PacketLayer.setDSN(message_t* msg, uint8_t dsn)
	{
		getHeader(msg)->dsn = dsn;
	}

	async command uint16_t Ieee154PacketLayer.getDestPan(message_t* msg)
	{
		return getHeader(msg)->destpan;
	}

	async command void Ieee154PacketLayer.setDestPan(message_t* msg, uint16_t pan)
	{
		getHeader(msg)->destpan = pan;
	}

	async command uint16_t Ieee154PacketLayer.getDestAddr(message_t* msg)
	{
     a52:	fc 01       	movw	r30, r24
  return value;
}

inline uint16_t __nesc_ntoh_leuint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
     a54:	87 81       	ldd	r24, Z+7	; 0x07
     a56:	99 27       	eor	r25, r25
     a58:	98 2f       	mov	r25, r24
     a5a:	88 27       	eor	r24, r24
     a5c:	26 81       	ldd	r18, Z+6	; 0x06
     a5e:	33 27       	eor	r19, r19
		return getHeader(msg)->dest;
	}
     a60:	82 2b       	or	r24, r18
     a62:	93 2b       	or	r25, r19
     a64:	08 95       	ret

00000a66 <RadioAlarmP__0__RadioAlarm__wait>:
		return state == STATE_READY;
	}

	tasklet_async command void RadioAlarm.wait[uint8_t id](tradio_size timeout)
	{
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	7a 01       	movw	r14, r20
     a74:	8b 01       	movw	r16, r22
		RADIO_ASSERT( state == STATE_READY );

		alarm = id;
     a76:	80 93 a7 05 	sts	0x05A7, r24
		state = STATE_WAIT;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 08 06 	sts	0x0608, r24
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     a80:	8f b7       	in	r24, 0x3f	; 63
     a82:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     a84:	c8 2f       	mov	r28, r24
     a86:	dd 27       	eor	r29, r29
     a88:	65 de       	rcall	.-822    	; 0x754 <AtmegaCompareP__1__AtmegaCounter__get>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	c8 01       	movw	r24, r16

		call McuPowerState.update();
	}

	async command bool CompareA.isOn() { return SCIRQM & (1 << IRQMCP1); }

// ----- COMPARE A: symbol counter control register (SCCR), compare mode (SCCMP)

	async command void CompareA.setMode(uint8_t mode)
	{
		atomic
		{
			SCCR0 = (SCCR0 & ~(1 << SCCMP1)) 
				| (mode & 0x1) << SCCMP1;
		}
	}

	async command uint8_t CompareA.getMode()
	{
		return (SCCR0 >> SCCMP1) & 0x1;
	}

// ----- COMPARE A: ignore force for the symbol counter

	async command void CompareA.force() { }

// ----- COMPARE B: symbol counter output compare register (SCOCR)

	async command uint32_t CompareB.get()
	{
		reg32_t time;

		atomic
		{
			time.ll = SCOCR2LL;
			time.lh = SCOCR2LH;
			time.hl = SCOCR2HL;
			time.hh	= SCOCR2HH;
		}

		return time.full;
	}

	async command void CompareB.set(uint32_t value)
	{
		reg32_t time;
		
		time.full = value;
     a90:	b7 01       	movw	r22, r14
     a92:	62 30       	cpi	r22, 0x02	; 2
     a94:	71 05       	cpc	r23, r1
     a96:	81 05       	cpc	r24, r1
     a98:	91 05       	cpc	r25, r1
     a9a:	20 f4       	brcc	.+8      	; 0xaa4 <RadioAlarmP__0__RadioAlarm__wait+0x3e>
     a9c:	62 e0       	ldi	r22, 0x02	; 2
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	26 0f       	add	r18, r22
     aa6:	37 1f       	adc	r19, r23
     aa8:	48 1f       	adc	r20, r24
     aaa:	59 1f       	adc	r21, r25
     aac:	da 01       	movw	r26, r20
     aae:	c9 01       	movw	r24, r18
     ab0:	b0 93 f4 00 	sts	0x00F4, r27

		atomic
		{
			SCOCR2HH = time.hh;
     ab4:	a0 93 f3 00 	sts	0x00F3, r26
			SCOCR2HL = time.hl;
     ab8:	90 93 f2 00 	sts	0x00F2, r25
			SCOCR2LH = time.lh;
     abc:	20 93 f1 00 	sts	0x00F1, r18
			SCOCR2LL = time.ll;
     ac0:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

// ----- COMPARE B: symbol counter interrupt status register (SCIRQS), comare match flag (IRQSCP)

	default async event void CompareB.fired() { }

	AVR_ATOMIC_HANDLER(SCNT_CMP2_vect) { signal CompareB.fired(); }

	async command bool CompareB.test() { return SCIRQS & (1 << IRQSCP2); }

	async command void CompareB.reset() { SCIRQS = 1 << IRQSCP2; }
     ac2:	80 93 e0 00 	sts	0x00E0, r24
     ac6:	80 91 df 00 	lds	r24, 0x00DF

// ----- COMPARE B: symbol counter interrupt mask register (SCIRQM), compare interrupt enable (IRQMCP)

	async command void CompareB.start()
	{
		SET_BIT(SCIRQM, IRQMCP2);
     aca:	82 60       	ori	r24, 0x02	; 2
     acc:	80 93 df 00 	sts	0x00DF, r24
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	80 93 61 04 	sts	0x0461, r24
     ad6:	cf bf       	out	0x3f, r28	; 63
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	08 95       	ret

00000ae6 <RandomCollisionLayerP__0__RadioSend__sendDone>:
	 * successfull send command. If the returned error code is SUCCESS, then 
	 * the message was sent (may not have been acknowledged), otherwise 
	 * the message was not transmitted over the air.
	 */
	tasklet_async event void sendDone(error_t error);
     ae6:	80 93 37 06 	sts	0x0637, r24
	{
		RADIO_ASSERT( state == STATE_TX_SEND );

		txError = error;
		if( error == SUCCESS )
     aea:	88 23       	and	r24, r24
     aec:	11 f4       	brne	.+4      	; 0xaf2 <RandomCollisionLayerP__0__RadioSend__sendDone+0xc>
			state = STATE_TX_DONE;
     aee:	84 e0       	ldi	r24, 0x04	; 4
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <RandomCollisionLayerP__0__RadioSend__sendDone+0xe>
		else
			state = STATE_TX_PENDING;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 96 05 	sts	0x0596, r24

		post sendTask();
     af8:	4f cd       	rjmp	.-1378   	; 0x598 <MessageBufferLayerP__0__sendTask__postTask>

00000afa <SoftwareAckLayerC__0__RadioSend__sendDone>:
     afa:	10 92 97 05 	sts	0x0597, r1
	{
		RADIO_ASSERT( state == STATE_TX_SENDING );

		state = STATE_READY;
		signal RadioSend.sendDone(error);
     afe:	f3 cf       	rjmp	.-26     	; 0xae6 <RandomCollisionLayerP__0__RadioSend__sendDone>

00000b00 <SoftwareAckLayerC__0__Config__isAckPacket>:
	 * Returns TRUE if the received packet is an acknowledgement packet.
	 * The AckedSend layer will filter out all received acknowledgement
	 * packets and uses  only the matching one for the acknowledgement.
	 */
	async command bool isAckPacket(message_t* msg);
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	fc 01       	movw	r30, r24
     b04:	81 81       	ldd	r24, Z+1	; 0x01
     b06:	87 70       	andi	r24, 0x07	; 7
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	09 f4       	brne	.+2      	; 0xb0e <SoftwareAckLayerC__0__Config__isAckPacket+0xe>
  return value;
}

inline uint16_t __nesc_ntoh_leuint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	82 2f       	mov	r24, r18
     b10:	99 27       	eor	r25, r25
     b12:	08 95       	ret

00000b14 <RFA1RadioP__Ieee154PacketLayer__requiresAckReply>:
	/**
	 * Returns TRUE if the packet is a data packet, the ACK_REQ field
	 * is set and the destionation address is this node.
	 */
	async command bool requiresAckReply(message_t* msg);
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24

	async command void Ieee154PacketLayer.setDestAddr(message_t* msg, uint16_t addr)
	{
		getHeader(msg)->dest = addr;
	}

	async command uint16_t Ieee154PacketLayer.getSrcAddr(message_t* msg)
	{
		return getHeader(msg)->src;
	}

	async command void Ieee154PacketLayer.setSrcAddr(message_t* msg, uint16_t addr)
	{	
		getHeader(msg)->src = addr;
	}

	async command bool Ieee154PacketLayer.requiresAckWait(message_t* msg)
	{
		return call Ieee154PacketLayer.getAckRequired(msg)
			&& call Ieee154PacketLayer.isDataFrame(msg)
			&& call Ieee154PacketLayer.getDestAddr(msg) != 0xFFFF;
	}

	async command bool Ieee154PacketLayer.requiresAckReply(message_t* msg)
	{
		return call Ieee154PacketLayer.getAckRequired(msg)
     b1a:	76 df       	rcall	.-276    	; 0xa08 <Ieee154PacketLayerP__0__Ieee154PacketLayer__getAckRequired>
     b1c:	88 23       	and	r24, r24
     b1e:	c1 f0       	breq	.+48     	; 0xb50 <RFA1RadioP__Ieee154PacketLayer__requiresAckReply+0x3c>
     b20:	ce 01       	movw	r24, r28
     b22:	83 df       	rcall	.-250    	; 0xa2a <Ieee154PacketLayerP__0__Ieee154PacketLayer__isDataFrame>
     b24:	88 23       	and	r24, r24
     b26:	a1 f0       	breq	.+40     	; 0xb50 <RFA1RadioP__Ieee154PacketLayer__requiresAckReply+0x3c>
     b28:	ce 01       	movw	r24, r28
     b2a:	93 df       	rcall	.-218    	; 0xa52 <Ieee154PacketLayerP__0__Ieee154PacketLayer__getDestAddr>
     b2c:	2f b7       	in	r18, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	33 27       	eor	r19, r19
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     b32:	40 91 64 04 	lds	r20, 0x0464
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     b36:	50 91 65 04 	lds	r21, 0x0465
     b3a:	2f bf       	out	0x3f, r18	; 63
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	84 17       	cp	r24, r20
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     b40:	95 07       	cpc	r25, r21
     b42:	09 f0       	breq	.+2      	; 0xb46 <RFA1RadioP__Ieee154PacketLayer__requiresAckReply+0x32>
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	28 27       	eor	r18, r24
     b4a:	82 2f       	mov	r24, r18
     b4c:	99 27       	eor	r25, r25
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <RFA1RadioP__Ieee154PacketLayer__requiresAckReply+0x40>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <MetadataFlagsLayerC__0__PacketFlag__get>:
     b5a:	fb 01       	movw	r30, r22
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	30 e0       	ldi	r19, 0x00	; 0
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
  SREG = original_SREG;
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <MetadataFlagsLayerC__0__PacketFlag__get+0xc>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	8a 95       	dec	r24
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <MetadataFlagsLayerC__0__PacketFlag__get+0x8>
     b6a:	87 a5       	ldd	r24, Z+47	; 0x2f
     b6c:	82 23       	and	r24, r18
     b6e:	99 27       	eor	r25, r25
     b70:	08 95       	ret

00000b72 <RandomCollisionLayerP__0__RadioAlarm__wait>:
     b72:	ab 01       	movw	r20, r22
     b74:	bc 01       	movw	r22, r24
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	76 cf       	rjmp	.-276    	; 0xa66 <RadioAlarmP__0__RadioAlarm__wait>

00000b7a <RandomCollisionLayerP__0__RadioSend__ready>:

	/**
	 * This event is fired when the component is most likely able to accept 
	 * a send request. If the send command has returned with a failure, then
	 * this event will be called at least once in the near future.
	 */
	tasklet_async event void ready();
     b7a:	80 91 96 05 	lds	r24, 0x0596
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	21 f4       	brne	.+8      	; 0xb8a <RandomCollisionLayerP__0__RadioSend__ready+0x10>
	}

	command error_t Send.send(message_t* msg)
	{
		error_t result;

		call Tasklet.suspend();

		if( state != STATE_READY )
			result = EBUSY;
		else
		{
			txMsg = msg;
			state = STATE_TX_PENDING;
			retries = 0;
			post sendTask();
			result = SUCCESS;
		}

		call Tasklet.resume();

		return result;
	}

	tasklet_async event void RadioSend.ready()
	{
		if( state == STATE_TX_RETRY )
		{
			state = STATE_TX_PENDING;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 96 05 	sts	0x0596, r24
			post sendTask();
     b88:	07 cd       	rjmp	.-1522   	; 0x598 <MessageBufferLayerP__0__sendTask__postTask>
     b8a:	08 95       	ret

00000b8c <RandomCollisionLayerP__0__getBackoff>:
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	7c 01       	movw	r14, r24
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     b96:	8f b7       	in	r24, 0x3f	; 63
     b98:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     b9a:	99 27       	eor	r25, r25
     b9c:	00 91 11 06 	lds	r16, 0x0611
     ba0:	10 91 12 06 	lds	r17, 0x0612
     ba4:	0f 5e       	subi	r16, 0xEF	; 239
     ba6:	1e 4f       	sbci	r17, 0xFE	; 254
     ba8:	10 93 12 06 	sts	0x0612, r17
     bac:	00 93 11 06 	sts	0x0611, r16
     bb0:	01 51       	subi	r16, 0x11	; 17
     bb2:	11 40       	sbci	r17, 0x01	; 1
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     bb4:	8f bf       	out	0x3f, r24	; 63
     bb6:	82 e1       	ldi	r24, 0x12	; 18
     bb8:	c0 dc       	rcall	.-1664   	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     bba:	c8 01       	movw	r24, r16
     bbc:	b7 01       	movw	r22, r14
     bbe:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__udivmodhi4>
     bc2:	44 96       	adiw	r24, 0x14	; 20
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	08 95       	ret

00000bce <__vector_67>:

		call McuPowerState.update();
	}

	async command void CompareB.stop()
	{
		CLR_BIT(SCIRQM, IRQMCP2);

		call McuPowerState.update();
	}

	async command bool CompareB.isOn() { return SCIRQM & (1 << IRQMCP2); }

// ----- COMPARE B: symbol counter control register (SCCR), compare mode (SCCMP)

	async command void CompareB.setMode(uint8_t mode)
	{
		atomic
		{
			SCCR0 = (SCCR0 & ~(1 << SCCMP2)) 
				| (mode & 0x1) << SCCMP2;
		}
	}

	async command uint8_t CompareB.getMode()
	{
		return (SCCR0 >> SCCMP2) & 0x1;
	}

// ----- COMPARE B: ignore force for the symbol counter

	async command void CompareB.force() { }

// ----- COMPARE C: symbol counter output compare register (SCOCR)

	async command uint32_t CompareC.get()
	{
		reg32_t time;

		atomic
		{
			time.ll = SCOCR3LL;
			time.lh = SCOCR3LH;
			time.hl = SCOCR3HL;
			time.hh	= SCOCR3HH;
		}

		return time.full;
	}

	async command void CompareC.set(uint32_t value)
	{
		reg32_t time;
		
		time.full = value;

		atomic
		{
			SCOCR3HH = time.hh;
			SCOCR3HL = time.hl;
			SCOCR3LH = time.lh;
			SCOCR3LL = time.ll;
		}
	}

// ----- COMPARE C: symbol counter interrupt status register (SCIRQS), comare match flag (IRQSCP)

	default async event void CompareC.fired() { }

	AVR_ATOMIC_HANDLER(SCNT_CMP3_vect) { signal CompareC.fired(); }
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <VirtualizeTimerC__0__startTimer>:
    fireTimers(call TimerFrom.getNow());
  }

  void startTimer(uint8_t num, uint32_t t0, uint32_t dt, bool isoneshot)
  {
     be2:	ef 92       	push	r14
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	ae 2d       	mov	r26, r14
    Timer_t* timer = &m_timers[num];
     bea:	99 e0       	ldi	r25, 0x09	; 9
     bec:	89 9f       	mul	r24, r25
     bee:	f0 01       	movw	r30, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	ec 51       	subi	r30, 0x1C	; 28
     bf4:	fa 4f       	sbci	r31, 0xFA	; 250
    timer->t0 = t0;
     bf6:	40 83       	st	Z, r20
     bf8:	51 83       	std	Z+1, r21	; 0x01
     bfa:	62 83       	std	Z+2, r22	; 0x02
     bfc:	73 83       	std	Z+3, r23	; 0x03
    timer->dt = dt;
     bfe:	04 83       	std	Z+4, r16	; 0x04
     c00:	15 83       	std	Z+5, r17	; 0x05
     c02:	26 83       	std	Z+6, r18	; 0x06
     c04:	37 83       	std	Z+7, r19	; 0x07
    timer->isoneshot = isoneshot;
     c06:	a1 70       	andi	r26, 0x01	; 1
     c08:	80 85       	ldd	r24, Z+8	; 0x08
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	8a 2b       	or	r24, r26
    timer->isrunning = TRUE;
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	80 87       	std	Z+8, r24	; 0x08
    post updateFromTimer();
     c12:	be dc       	rcall	.-1668   	; 0x590 <VirtualizeTimerC__0__updateFromTimer__postTask>
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ef 90       	pop	r14
     c1a:	08 95       	ret

00000c1c <RoundRobinResourceQueueC__0__RoundRobinQueue__isEnqueued>:
      return TRUE;
    }
  }
  	
  async command bool RoundRobinQueue.isEnqueued(resource_client_id_t id) {
     c1c:	98 2f       	mov	r25, r24
     c1e:	96 95       	lsr	r25
     c20:	96 95       	lsr	r25
     c22:	96 95       	lsr	r25
     c24:	e3 ee       	ldi	r30, 0xE3	; 227
     c26:	f5 e0       	ldi	r31, 0x05	; 5
     c28:	e9 0f       	add	r30, r25
     c2a:	f1 1d       	adc	r31, r1
     c2c:	87 70       	andi	r24, 0x07	; 7
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <RoundRobinResourceQueueC__0__RoundRobinQueue__isEnqueued+0x1c>
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	8a 95       	dec	r24
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <RoundRobinResourceQueueC__0__RoundRobinQueue__isEnqueued+0x18>
     c3c:	80 81       	ld	r24, Z
     c3e:	82 23       	and	r24, r18
  	return resQ[id / 8] & (1 << (id % 8));
  }
     c40:	99 27       	eor	r25, r25
     c42:	08 95       	ret

00000c44 <ArbiterP__0__Resource__release>:
    atomic state = RES_CONTROLLED;
    return FAIL;
  }
  
  async command error_t Resource.release[uint8_t id]() {
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	98 2f       	mov	r25, r24
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     c52:	8f b7       	in	r24, 0x3f	; 63
     c54:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     c56:	e8 2e       	mov	r14, r24
    atomic {
      if(state == RES_BUSY && resId == id) {
     c58:	80 91 68 04 	lds	r24, 0x0468
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	09 f0       	breq	.+2      	; 0xc62 <ArbiterP__0__Resource__release+0x1e>
     c60:	42 c0       	rjmp	.+132    	; 0xce6 <ArbiterP__0__Resource__release+0xa2>
     c62:	80 91 62 04 	lds	r24, 0x0462
     c66:	89 17       	cp	r24, r25
     c68:	09 f0       	breq	.+2      	; 0xc6c <ArbiterP__0__Resource__release+0x28>
     c6a:	3d c0       	rjmp	.+122    	; 0xce6 <ArbiterP__0__Resource__release+0xa2>
     c6c:	80 91 e3 05 	lds	r24, 0x05E3
     c70:	88 23       	and	r24, r24
     c72:	09 f0       	breq	.+2      	; 0xc76 <ArbiterP__0__Resource__release+0x32>
     c74:	4a c0       	rjmp	.+148    	; 0xd0a <ArbiterP__0__Resource__release+0xc6>
     c76:	3b c0       	rjmp	.+118    	; 0xcee <ArbiterP__0__Resource__release+0xaa>
     c78:	ef 2d       	mov	r30, r15
     c7a:	e6 95       	lsr	r30
     c7c:	e6 95       	lsr	r30
     c7e:	e6 95       	lsr	r30
     c80:	ff 27       	eor	r31, r31
     c82:	4f 2d       	mov	r20, r15
     c84:	55 27       	eor	r21, r21
     c86:	ed 51       	subi	r30, 0x1D	; 29
     c88:	fa 4f       	sbci	r31, 0xFA	; 250
     c8a:	9a 01       	movw	r18, r20
     c8c:	27 70       	andi	r18, 0x07	; 7
     c8e:	30 70       	andi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <ArbiterP__0__Resource__release+0x56>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	2a 95       	dec	r18
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <ArbiterP__0__Resource__release+0x52>
     c9e:	80 95       	com	r24
     ca0:	20 81       	ld	r18, Z
     ca2:	28 23       	and	r18, r24
     ca4:	20 83       	st	Z, r18

  async command resource_client_id_t RoundRobinQueue.dequeue() {
    int i;
    atomic {
      for (i = last+1; ; i++) {
        if(i == size)
          i = 0;
        if (call RoundRobinQueue.isEnqueued(i)) {
          clearEntry(i);
          last = i;
     ca6:	c0 93 67 04 	sts	0x0467, r28
     caa:	10 c0       	rjmp	.+32     	; 0xccc <ArbiterP__0__Resource__release+0x88>
     cac:	21 96       	adiw	r28, 0x01	; 1
     cae:	c3 30       	cpi	r28, 0x03	; 3
     cb0:	d1 05       	cpc	r29, r1
     cb2:	11 f4       	brne	.+4      	; 0xcb8 <ArbiterP__0__Resource__release+0x74>
     cb4:	c0 e0       	ldi	r28, 0x00	; 0
     cb6:	d0 e0       	ldi	r29, 0x00	; 0
     cb8:	fc 2e       	mov	r15, r28
     cba:	8c 2f       	mov	r24, r28
     cbc:	af df       	rcall	.-162    	; 0xc1c <RoundRobinResourceQueueC__0__RoundRobinQueue__isEnqueued>
     cbe:	88 23       	and	r24, r24
     cc0:	d9 f6       	brne	.-74     	; 0xc78 <ArbiterP__0__Resource__release+0x34>
     cc2:	c0 17       	cp	r28, r16
          return i;
        }
        if (i == last)
     cc4:	d1 07       	cpc	r29, r17
     cc6:	91 f7       	brne	.-28     	; 0xcac <ArbiterP__0__Resource__release+0x68>
     cc8:	4f ef       	ldi	r20, 0xFF	; 255
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	40 93 15 06 	sts	0x0615, r20
        if(call Queue.isEmpty() == FALSE) {
          reqResId = call Queue.dequeue();
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
          resId = NO_RES;
     cd2:	80 93 62 04 	sts	0x0462, r24
     cd6:	81 e0       	ldi	r24, 0x01	; 1
          state = RES_GRANTING;
     cd8:	80 93 68 04 	sts	0x0468, r24
     cdc:	55 dc       	rcall	.-1878   	; 0x588 <ArbiterP__0__grantedTask__postTask>
          post grantedTask();
     cde:	ef be       	out	0x3f, r14	; 63
     ce0:	80 e0       	ldi	r24, 0x00	; 0
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	18 c0       	rjmp	.+48     	; 0xd16 <ArbiterP__0__Resource__release+0xd2>
     ce6:	ef be       	out	0x3f, r14	; 63
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <ArbiterP__0__Resource__release+0xd2>
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	80 93 62 04 	sts	0x0462, r24
          call ResourceConfigure.unconfigure[id]();
        }
        else {
          resId = default_owner_id;
     cf4:	10 92 68 04 	sts	0x0468, r1
          state = RES_CONTROLLED;
     cf8:	80 91 7a 00 	lds	r24, 0x007A
    SET_BIT(ADCSRA, ADEN);
    call McuPowerState.update();
  }
  async command void HplAtm128Adc.disableAdc() {
    CLR_BIT(ADCSRA, ADEN);
     cfc:	8f 77       	andi	r24, 0x7F	; 127
     cfe:	80 93 7a 00 	sts	0x007A, r24
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	80 93 61 04 	sts	0x0461, r24
     d08:	ea cf       	rjmp	.-44     	; 0xcde <ArbiterP__0__Resource__release+0x9a>
     d0a:	80 91 67 04 	lds	r24, 0x0467
     d0e:	08 2f       	mov	r16, r24
     d10:	11 27       	eor	r17, r17
     d12:	e8 01       	movw	r28, r16
     d14:	cb cf       	rjmp	.-106    	; 0xcac <ArbiterP__0__Resource__release+0x68>
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	08 95       	ret

00000d24 <BlinkC__SerialStream__send>:
   * @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.
   * @param len Number of bytes to send.
   * @return SUCCESS if request was accepted, FAIL otherwise.
   */
  async command error_t send( uint8_t* buf, uint16_t len );
     d24:	ac 01       	movw	r20, r24
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     d26:	8f b7       	in	r24, 0x3f	; 63
     d28:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     d2a:	28 2f       	mov	r18, r24
     d2c:	33 27       	eor	r19, r19
     d2e:	80 91 a4 05 	lds	r24, 0x05A4
     d32:	88 23       	and	r24, r24
     d34:	21 f0       	breq	.+8      	; 0xd3e <BlinkC__SerialStream__send+0x1a>
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     d36:	2f bf       	out	0x3f, r18	; 63
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	08 95       	ret
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 a4 05 	sts	0x05A4, r24
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     d44:	2f bf       	out	0x3f, r18	; 63
     d46:	50 93 6d 04 	sts	0x046D, r21
     d4a:	40 93 6c 04 	sts	0x046C, r20
     d4e:	70 93 8e 04 	sts	0x048E, r23
     d52:	60 93 8d 04 	sts	0x048D, r22
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	fa 01       	movw	r30, r20
     d5c:	1d c0       	rjmp	.+58     	; 0xd98 <BlinkC__SerialStream__send+0x74>
     d5e:	80 91 c9 00 	lds	r24, 0x00C9
     d62:	8f 7b       	andi	r24, 0xBF	; 191
     d64:	80 93 c9 00 	sts	0x00C9, r24
     d68:	80 91 c8 00 	lds	r24, 0x00C8
     d6c:	85 ff       	sbrs	r24, 5
     d6e:	fc cf       	rjmp	.-8      	; 0xd68 <BlinkC__SerialStream__send+0x44>
     d70:	80 81       	ld	r24, Z
     d72:	80 93 ce 00 	sts	0x00CE, r24
     d76:	80 91 c8 00 	lds	r24, 0x00C8
     d7a:	86 ff       	sbrs	r24, 6
     d7c:	fc cf       	rjmp	.-8      	; 0xd76 <BlinkC__SerialStream__send+0x52>
     d7e:	80 91 c8 00 	lds	r24, 0x00C8
     d82:	80 64       	ori	r24, 0x40	; 64
     d84:	80 93 c8 00 	sts	0x00C8, r24
     d88:	80 91 c9 00 	lds	r24, 0x00C9
     d8c:	80 64       	ori	r24, 0x40	; 64
     d8e:	80 93 c9 00 	sts	0x00C9, r24
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	31 96       	adiw	r30, 0x01	; 1
     d98:	26 17       	cp	r18, r22
     d9a:	37 07       	cpc	r19, r23
     d9c:	01 f7       	brne	.-64     	; 0xd5e <BlinkC__SerialStream__send+0x3a>
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     d9e:	8f b7       	in	r24, 0x3f	; 63
     da0:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     da2:	99 27       	eor	r25, r25
     da4:	10 92 a4 05 	sts	0x05A4, r1
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     da8:	8f bf       	out	0x3f, r24	; 63
     daa:	10 92 a9 05 	sts	0x05A9, r1
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	c4 db       	rcall	.-2168   	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	08 95       	ret

00000db8 <BlinkC__Leds__led2Toggle>:
     db8:	8f b7       	in	r24, 0x3f	; 63
    sei();
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
     dba:	f8 94       	cli
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     dbc:	99 27       	eor	r25, r25
     dbe:	2e b1       	in	r18, 0x0e	; 14
     dc0:	30 e1       	ldi	r19, 0x10	; 16
     dc2:	23 27       	eor	r18, r19
     dc4:	2e b9       	out	0x0e, r18	; 14
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     dc6:	8f bf       	out	0x3f, r24	; 63
     dc8:	08 95       	ret

00000dca <BlinkC__Leds__led1Toggle>:
   /**
   * Toggle LED 1; if it was off, turn it on, if was on, turn it off.
   * The color of this LED depends on the platform.
   */
  async command void led1Toggle();
     dca:	8f b7       	in	r24, 0x3f	; 63
    sei();
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
     dcc:	f8 94       	cli
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     dce:	99 27       	eor	r25, r25
     dd0:	2e b1       	in	r18, 0x0e	; 14
     dd2:	38 e0       	ldi	r19, 0x08	; 8
     dd4:	23 27       	eor	r18, r19
     dd6:	2e b9       	out	0x0e, r18	; 14
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     dd8:	8f bf       	out	0x3f, r24	; 63
     dda:	08 95       	ret

00000ddc <AdcP__sample>:
  uint8_t prescaler() {
    return call Atm128AdcConfig.getPrescaler[client]();
  }

  void sample() {
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	80 91 35 06 	lds	r24, 0x0635
   * Obtain prescaler value.
   * @return The prescaler value to use. Must be one of the 
   *   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.
   */
  async command uint8_t getPrescaler();
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <AdcP__sample+0x18>
     df2:	46 c0       	rjmp	.+140    	; 0xe80 <AdcP__sample+0xa4>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	08 f4       	brcc	.+2      	; 0xdfa <AdcP__sample+0x1e>
     df8:	48 c0       	rjmp	.+144    	; 0xe8a <AdcP__sample+0xae>
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	09 f4       	brne	.+2      	; 0xe00 <AdcP__sample+0x24>
     dfe:	45 c0       	rjmp	.+138    	; 0xe8a <AdcP__sample+0xae>
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	29 f0       	breq	.+10     	; 0xe0e <AdcP__sample+0x32>
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	28 f0       	brcs	.+10     	; 0xe12 <AdcP__sample+0x36>
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	29 f4       	brne	.+10     	; 0xe16 <AdcP__sample+0x3a>
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <AdcP__sample+0x36>
     e0e:	bb 24       	eor	r11, r11
     e10:	39 c0       	rjmp	.+114    	; 0xe84 <AdcP__sample+0xa8>
     e12:	bb 24       	eor	r11, r11
     e14:	3c c0       	rjmp	.+120    	; 0xe8e <AdcP__sample+0xb2>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	41 f0       	breq	.+16     	; 0xe2a <AdcP__sample+0x4e>
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	50 f0       	brcs	.+20     	; 0xe32 <AdcP__sample+0x56>
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	41 f0       	breq	.+16     	; 0xe32 <AdcP__sample+0x56>
     e22:	8e e1       	ldi	r24, 0x1E	; 30
     e24:	bb 24       	eor	r11, r11
     e26:	cc 24       	eor	r12, r12
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <AdcP__sample+0x5c>
     e2a:	bb 24       	eor	r11, r11
     e2c:	cc 24       	eor	r12, r12
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <AdcP__sample+0x5c>
     e32:	bb 24       	eor	r11, r11
     e34:	cc 24       	eor	r12, r12
     e36:	89 e2       	ldi	r24, 0x29	; 41
    call Atm128AdcSingle.getData(channel(), refVoltage(), FALSE, prescaler());
     e38:	e8 2e       	mov	r14, r24
     e3a:	ff 24       	eor	r15, r15
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     e3c:	df b6       	in	r13, 0x3f	; 63
     e3e:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     e40:	10 91 91 04 	lds	r17, 0x0491
     e44:	81 2f       	mov	r24, r17
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	80 93 91 04 	sts	0x0491, r24

  async event void HplAtm128Adc.dataReady(uint16_t data) {
    bool precise, multiple;
    uint8_t channel;

    atomic 
      {
	channel = f.channel;
	precise = f.precise;
	multiple = f.multiple;
      }

    if (!multiple)
      {
	/* A single sample. Disable the ADC interrupt to avoid starting
	   a new sample at the next "sleep" instruction. */
	call HplAtm128Adc.disableInterruption();
	signal Atm128AdcSingle.dataReady(data, precise);
      }
    else
      {
	/* Multiple sampling. The user can:
	   - tell us to stop sampling
	   - or, to continue sampling on a new channel, possibly with a
	     new reference voltage; however this change applies not to
	     the next sample (the hardware has already started working on
	     that), but on the one after.
	*/
	bool cont;
	uint8_t nextChannel, nextVoltage;
	Atm128Admux_t admux;

	atomic 
	  {
	    admux = call HplAtm128Adc.getAdmux();
	    nextVoltage = admux.refs;
	    nextChannel = admux.mux;
	  }

	cont = signal Atm128AdcMultiple.dataReady(data, precise, channel,
						  &nextChannel, &nextVoltage);
	atomic
	  if (cont)
	    {
	      /* Switch channels and update our internal channel+precision
		 tracking state (f and nextF). Note that this tracking will
		 be incorrect if we take too long to get to this point. */
	      admux.refs = nextVoltage;
	      admux.mux = nextChannel;
	      call HplAtm128Adc.setAdmux(admux);

	      f = nextF;
	      nextF.channel = nextChannel;
	      nextF.precise = isPrecise(admux, nextChannel, nextVoltage);
	    }
	  else
	    call HplAtm128Adc.cancel();
      }
  }

  /* Start sampling based on request parameters */
  void getData(uint8_t channel, uint8_t refVoltage, bool leftJustify, uint8_t prescaler) {
    Atm128Admux_t admux;
    Atm128Adcsra_t adcsra;

    admux = call HplAtm128Adc.getAdmux();
    f.precise = isPrecise(admux, channel, refVoltage);
    f.channel = channel;

    admux.refs = refVoltage;
    admux.adlar = leftJustify;
     e4c:	5c db       	rcall	.-2376   	; 0x506 <Atm128AdcP__HplAtm128Adc__getAdmux>
     e4e:	4c 2d       	mov	r20, r12
    //----------------------------------------	//added by zn : 20111114
     e50:	6e 2d       	mov	r22, r14
     e52:	36 db       	rcall	.-2452   	; 0x4c0 <Atm128AdcP__isPrecise>
     e54:	81 70       	andi	r24, 0x01	; 1
     e56:	88 0f       	add	r24, r24
     e58:	10 78       	andi	r17, 0x80	; 128
     e5a:	2e 2d       	mov	r18, r14
     e5c:	2f 71       	andi	r18, 0x1F	; 31
    if(channel & 0x20)
     e5e:	92 2f       	mov	r25, r18
     e60:	99 0f       	add	r25, r25
     e62:	99 0f       	add	r25, r25
     e64:	18 2b       	or	r17, r24
     e66:	19 2b       	or	r17, r25
     e68:	10 93 91 04 	sts	0x0491, r17
     e6c:	e5 fe       	sbrs	r14, 5
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <AdcP__sample+0x9c>
    {
	SET_BIT(ADCSRB, MUX5);
    }
    else
    {
     e70:	80 91 7b 00 	lds	r24, 0x007B
	CLR_BIT(ADCSRB, MUX5);
    }
     e74:	88 60       	ori	r24, 0x08	; 8
     e76:	0e c0       	rjmp	.+28     	; 0xe94 <AdcP__sample+0xb8>
     e78:	80 91 7b 00 	lds	r24, 0x007B
    //----------------------------------------
    admux.mux = channel & 0xDF;			//modified by zn : 20111114
    call HplAtm128Adc.setAdmux(admux);

     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	0a c0       	rjmp	.+20     	; 0xe94 <AdcP__sample+0xb8>
     e80:	b7 e0       	ldi	r27, 0x07	; 7
     e82:	bb 2e       	mov	r11, r27
  }
     e84:	a3 e0       	ldi	r26, 0x03	; 3
     e86:	ca 2e       	mov	r12, r26
     e88:	d2 cf       	rjmp	.-92     	; 0xe2e <AdcP__sample+0x52>
     e8a:	f7 e0       	ldi	r31, 0x07	; 7
     e8c:	bf 2e       	mov	r11, r31
     e8e:	e3 e0       	ldi	r30, 0x03	; 3
     e90:	ce 2e       	mov	r12, r30
     e92:	d1 cf       	rjmp	.-94     	; 0xe36 <AdcP__sample+0x5a>
     e94:	80 93 7b 00 	sts	0x007B, r24
     e98:	cc 0c       	add	r12, r12
     e9a:	cc 0c       	add	r12, r12
     e9c:	cc 0c       	add	r12, r12
     e9e:	cc 0c       	add	r12, r12
     ea0:	cc 0c       	add	r12, r12
     ea2:	cc 0c       	add	r12, r12
     ea4:	2c 29       	or	r18, r12
     ea6:	82 2f       	mov	r24, r18
     ea8:	99 27       	eor	r25, r25
     eaa:	80 93 7c 00 	sts	0x007C, r24
     eae:	18 79       	andi	r17, 0x98	; 152
     eb0:	1b 29       	or	r17, r11
     eb2:	18 69       	ori	r17, 0x98	; 152
     eb4:	81 2f       	mov	r24, r17
     eb6:	99 27       	eor	r25, r25
     eb8:	80 93 7a 00 	sts	0x007A, r24
     ebc:	8d 2d       	mov	r24, r13
     ebe:	99 27       	eor	r25, r25
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     ec0:	8f bf       	out	0x3f, r24	; 63
     ec2:	1f 91       	pop	r17
  SREG = original_SREG;
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	08 95       	ret

00000ed2 <ArbitratedReadC__0__Resource__granted>:
  command error_t Read.read[uint8_t client]() {
    return call Resource.request[client]();
  }

  event void Resource.granted[uint8_t client]() {
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	90 93 a8 05 	sts	0x05A8, r25

  error_t startGet(uint8_t newState, uint8_t newClient) {
    /* Note: we retry imprecise results in dataReady */
    state = newState;
    client = newClient;
     ed8:	80 93 35 06 	sts	0x0635, r24
    sample();
     edc:	7f cf       	rjmp	.-258    	; 0xddc <AdcP__sample>

00000ede <VirtualizeTimerC__0__fireTimers>:
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	5b 01       	movw	r10, r22
     ef4:	6c 01       	movw	r12, r24
     ef6:	c0 e0       	ldi	r28, 0x00	; 0
     ef8:	d0 e0       	ldi	r29, 0x00	; 0
     efa:	e4 ee       	ldi	r30, 0xE4	; 228
     efc:	f5 e0       	ldi	r31, 0x05	; 5
     efe:	60 85       	ldd	r22, Z+8	; 0x08
     f00:	61 ff       	sbrs	r22, 1
     f02:	3a c0       	rjmp	.+116    	; 0xf78 <VirtualizeTimerC__0__fireTimers+0x9a>
     f04:	20 81       	ld	r18, Z
     f06:	31 81       	ldd	r19, Z+1	; 0x01
     f08:	42 81       	ldd	r20, Z+2	; 0x02
     f0a:	53 81       	ldd	r21, Z+3	; 0x03
     f0c:	e4 80       	ldd	r14, Z+4	; 0x04
     f0e:	f5 80       	ldd	r15, Z+5	; 0x05
     f10:	06 81       	ldd	r16, Z+6	; 0x06
     f12:	17 81       	ldd	r17, Z+7	; 0x07
     f14:	d6 01       	movw	r26, r12
     f16:	c5 01       	movw	r24, r10
     f18:	82 1b       	sub	r24, r18
     f1a:	93 0b       	sbc	r25, r19
     f1c:	a4 0b       	sbc	r26, r20
     f1e:	b5 0b       	sbc	r27, r21
     f20:	8e 15       	cp	r24, r14
     f22:	9f 05       	cpc	r25, r15
     f24:	a0 07       	cpc	r26, r16
     f26:	b1 07       	cpc	r27, r17
     f28:	38 f1       	brcs	.+78     	; 0xf78 <VirtualizeTimerC__0__fireTimers+0x9a>
     f2a:	60 ff       	sbrs	r22, 0
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <VirtualizeTimerC__0__fireTimers+0x56>
     f2e:	6d 7f       	andi	r22, 0xFD	; 253
     f30:	60 87       	std	Z+8, r22	; 0x08
     f32:	08 c0       	rjmp	.+16     	; 0xf44 <VirtualizeTimerC__0__fireTimers+0x66>
     f34:	2e 0d       	add	r18, r14
     f36:	3f 1d       	adc	r19, r15
     f38:	40 1f       	adc	r20, r16
     f3a:	51 1f       	adc	r21, r17
     f3c:	20 83       	st	Z, r18
     f3e:	31 83       	std	Z+1, r19	; 0x01
     f40:	42 83       	std	Z+2, r20	; 0x02
     f42:	53 83       	std	Z+3, r21	; 0x03
     f44:	c1 30       	cpi	r28, 0x01	; 1
     f46:	91 f0       	breq	.+36     	; 0xf6c <VirtualizeTimerC__0__fireTimers+0x8e>
     f48:	c1 30       	cpi	r28, 0x01	; 1
     f4a:	28 f0       	brcs	.+10     	; 0xf56 <VirtualizeTimerC__0__fireTimers+0x78>
     f4c:	c2 30       	cpi	r28, 0x02	; 2
     f4e:	81 f0       	breq	.+32     	; 0xf70 <VirtualizeTimerC__0__fireTimers+0x92>
     f50:	c3 30       	cpi	r28, 0x03	; 3
     f52:	c1 f4       	brne	.+48     	; 0xf84 <VirtualizeTimerC__0__fireTimers+0xa6>
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <VirtualizeTimerC__0__fireTimers+0x96>
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     f56:	8f b7       	in	r24, 0x3f	; 63
     f58:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     f5a:	99 27       	eor	r25, r25
     f5c:	2e b1       	in	r18, 0x0e	; 14
     f5e:	34 e0       	ldi	r19, 0x04	; 4
     f60:	23 27       	eor	r18, r19
     f62:	2e b9       	out	0x0e, r18	; 14
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     f64:	8f bf       	out	0x3f, r24	; 63
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	e8 da       	rcall	.-2608   	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
     f6a:	0c c0       	rjmp	.+24     	; 0xf84 <VirtualizeTimerC__0__fireTimers+0xa6>
     f6c:	2e df       	rcall	.-420    	; 0xdca <BlinkC__Leds__led1Toggle>
     f6e:	0a c0       	rjmp	.+20     	; 0xf84 <VirtualizeTimerC__0__fireTimers+0xa6>
     f70:	23 df       	rcall	.-442    	; 0xdb8 <BlinkC__Leds__led2Toggle>
     f72:	08 c0       	rjmp	.+16     	; 0xf84 <VirtualizeTimerC__0__fireTimers+0xa6>
     f74:	15 db       	rcall	.-2518   	; 0x5a0 <PacketLinkLayerP__0__send__postTask>
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <VirtualizeTimerC__0__fireTimers+0xa6>
     f78:	21 96       	adiw	r28, 0x01	; 1
     f7a:	39 96       	adiw	r30, 0x09	; 9
     f7c:	c4 30       	cpi	r28, 0x04	; 4
     f7e:	d1 05       	cpc	r29, r1
     f80:	09 f0       	breq	.+2      	; 0xf84 <VirtualizeTimerC__0__fireTimers+0xa6>
     f82:	bd cf       	rjmp	.-134    	; 0xefe <VirtualizeTimerC__0__fireTimers+0x20>
     f84:	05 db       	rcall	.-2550   	; 0x590 <VirtualizeTimerC__0__updateFromTimer__postTask>
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	cf 90       	pop	r12
     f96:	bf 90       	pop	r11
     f98:	af 90       	pop	r10
     f9a:	08 95       	ret

00000f9c <AlarmToTimerC__0__start>:
  uint32_t m_dt;
  bool m_oneshot;

  void start(uint32_t t0, uint32_t dt, bool oneshot)
  {
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
    m_dt = dt;
     fa0:	20 93 29 06 	sts	0x0629, r18
     fa4:	30 93 2a 06 	sts	0x062A, r19
     fa8:	40 93 2b 06 	sts	0x062B, r20
     fac:	50 93 2c 06 	sts	0x062C, r21
    m_oneshot = oneshot;
     fb0:	00 93 90 04 	sts	0x0490, r16
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
     fb4:	0f b7       	in	r16, 0x3f	; 63
     fb6:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     fb8:	11 27       	eor	r17, r17
     fba:	60 93 a0 05 	sts	0x05A0, r22
     fbe:	70 93 a1 05 	sts	0x05A1, r23
     fc2:	80 93 a2 05 	sts	0x05A2, r24
     fc6:	90 93 a3 05 	sts	0x05A3, r25
     fca:	20 93 9c 05 	sts	0x059C, r18
     fce:	30 93 9d 05 	sts	0x059D, r19
     fd2:	40 93 9e 05 	sts	0x059E, r20
     fd6:	50 93 9f 05 	sts	0x059F, r21
     fda:	f3 db       	rcall	.-2074   	; 0x7c2 <TransformAlarmC__0__set_alarm>
     fdc:	0f bf       	out	0x3f, r16	; 63
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <ArbiterP__0__Resource__request>:
     fe4:	0f 93       	push	r16
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
  SREG = original_SREG;
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	18 2f       	mov	r17, r24
     fee:	8f b7       	in	r24, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	28 2f       	mov	r18, r24
     ff4:	33 27       	eor	r19, r19
     ff6:	02 2f       	mov	r16, r18
     ff8:	80 91 68 04 	lds	r24, 0x0468
     ffc:	88 23       	and	r24, r24
     ffe:	69 f5       	brne	.+90     	; 0x105a <ArbiterP__0__Resource__request+0x76>
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 68 04 	sts	0x0468, r24
    1006:	10 93 15 06 	sts	0x0615, r17
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    100a:	2f bf       	out	0x3f, r18	; 63
    100c:	2f b7       	in	r18, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	33 27       	eor	r19, r19
    1012:	80 91 7a 00 	lds	r24, 0x007A
    1016:	80 68       	ori	r24, 0x80	; 128
    1018:	80 93 7a 00 	sts	0x007A, r24
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	80 93 61 04 	sts	0x0461, r24
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1022:	2f bf       	out	0x3f, r18	; 63
    1024:	8f b7       	in	r24, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	c8 2f       	mov	r28, r24
    102a:	dd 27       	eor	r29, r29
    102c:	2c 2f       	mov	r18, r28
          call ResourceConfigure.unconfigure[id]();
          signal ResourceDefaultOwner.granted();
        }
        return SUCCESS;
      }
    }
    return FAIL;
  }

  async command error_t ResourceDefaultOwner.release() {
    atomic {
      if(resId == default_owner_id) {
    102e:	90 91 62 04 	lds	r25, 0x0462
    1032:	93 30       	cpi	r25, 0x03	; 3
    1034:	b1 f4       	brne	.+44     	; 0x1062 <ArbiterP__0__Resource__request+0x7e>
        if(state == RES_GRANTING) {
    1036:	80 91 68 04 	lds	r24, 0x0468
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	11 f4       	brne	.+4      	; 0x1042 <ArbiterP__0__Resource__request+0x5e>
          post grantedTask();
    103e:	a4 da       	rcall	.-2744   	; 0x588 <ArbiterP__0__grantedTask__postTask>
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <ArbiterP__0__Resource__request+0x6e>
    1042:	82 30       	cpi	r24, 0x02	; 2
          return SUCCESS;
        }
        else if(state == RES_IMM_GRANTING) {
    1044:	71 f4       	brne	.+28     	; 0x1062 <ArbiterP__0__Resource__request+0x7e>
    1046:	80 91 15 06 	lds	r24, 0x0615
          resId = reqResId;
    104a:	80 93 62 04 	sts	0x0462, r24
    104e:	90 93 68 04 	sts	0x0468, r25
          state = RES_BUSY;
    1052:	cf bf       	out	0x3f, r28	; 63
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	22 c0       	rjmp	.+68     	; 0x109e <ArbiterP__0__Resource__request+0xba>
    105a:	80 91 15 06 	lds	r24, 0x0615
    105e:	81 17       	cp	r24, r17
    1060:	11 f4       	brne	.+4      	; 0x1066 <ArbiterP__0__Resource__request+0x82>
    1062:	2f bf       	out	0x3f, r18	; 63
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1064:	f7 cf       	rjmp	.-18     	; 0x1054 <ArbiterP__0__Resource__request+0x70>
    1066:	81 2f       	mov	r24, r17
          break;
      }
      return NO_ENTRY;
    }
  }
  
  async command error_t RoundRobinQueue.enqueue(resource_client_id_t id) {
    atomic {
      if (!(call RoundRobinQueue.isEnqueued(id))) {
    1068:	d9 dd       	rcall	.-1102   	; 0xc1c <RoundRobinResourceQueueC__0__RoundRobinQueue__isEnqueued>
    106a:	88 23       	and	r24, r24
    106c:	19 f0       	breq	.+6      	; 0x1074 <ArbiterP__0__Resource__request+0x90>
    106e:	85 e0       	ldi	r24, 0x05	; 5
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	14 c0       	rjmp	.+40     	; 0x109c <ArbiterP__0__Resource__request+0xb8>
    1074:	e1 2f       	mov	r30, r17
    1076:	e6 95       	lsr	r30
        resQ[id / 8] |=  1 << (id % 8);
    1078:	e6 95       	lsr	r30
    107a:	e6 95       	lsr	r30
    107c:	ff 27       	eor	r31, r31
    107e:	ed 51       	subi	r30, 0x1D	; 29
    1080:	fa 4f       	sbci	r31, 0xFA	; 250
    1082:	17 70       	andi	r17, 0x07	; 7
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <ArbiterP__0__Resource__request+0xaa>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	1a 95       	dec	r17
    1090:	e2 f7       	brpl	.-8      	; 0x108a <ArbiterP__0__Resource__request+0xa6>
    1092:	20 81       	ld	r18, Z
    1094:	28 2b       	or	r18, r24
    1096:	20 83       	st	Z, r18
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0f bf       	out	0x3f, r16	; 63
    109e:	df 91       	pop	r29
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <ArbitratedReadC__0__Read__read>:
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	41 f0       	breq	.+16     	; 0x10bc <ArbitratedReadC__0__Read__read+0x14>
   *                 resource.<br>
   *         EBUSY You have already requested this resource and a
   *               granted event is pending
   */
  async command error_t request();
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <ArbitratedReadC__0__Read__read+0x10>
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	31 f0       	breq	.+12     	; 0x10c0 <ArbitratedReadC__0__Read__read+0x18>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	06 c0       	rjmp	.+12     	; 0x10c4 <ArbitratedReadC__0__Read__read+0x1c>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <ArbitratedReadC__0__Read__read+0x1a>
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <ArbitratedReadC__0__Read__read+0x1a>
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	90 df       	rcall	.-224    	; 0xfe4 <ArbiterP__0__Resource__request>
    10c4:	99 27       	eor	r25, r25
    10c6:	08 95       	ret

000010c8 <VirtualizeTimerC__0__Timer__startPeriodic>:
  }

  command void Timer.startPeriodic[uint8_t num](uint32_t dt)
  {
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	f8 2e       	mov	r15, r24
    10da:	5a 01       	movw	r10, r20
    10dc:	6b 01       	movw	r12, r22
    startTimer(num, call TimerFrom.getNow(), dt, FALSE);
    10de:	6e dc       	rcall	.-1828   	; 0x9bc <VirtualizeTimerC__0__TimerFrom__getNow>
    10e0:	ab 01       	movw	r20, r22
    10e2:	bc 01       	movw	r22, r24
    10e4:	ee 24       	eor	r14, r14
    10e6:	96 01       	movw	r18, r12
    10e8:	85 01       	movw	r16, r10
    10ea:	8f 2d       	mov	r24, r15
    10ec:	7a dd       	rcall	.-1292   	; 0xbe2 <VirtualizeTimerC__0__startTimer>
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	08 95       	ret

00001100 <__vector_29>:
    call McuPowerState.update();
  }
  async command void HplAtm128Adc.enableInterruption() { SET_BIT(ADCSRA, ADIE); }
  async command void HplAtm128Adc.disableInterruption() { CLR_BIT(ADCSRA, ADIE); }
  async command void HplAtm128Adc.setContinuous() {
    ((Atm128Adcsrb_t*)&ADCSRB)->adts = 0;
    SET_BIT(ADCSRA, ADATE);
  }
  async command void HplAtm128Adc.setSingle() { CLR_BIT(ADCSRA, ADATE); }
  async command void HplAtm128Adc.resetInterrupt() { SET_BIT(ADCSRA, ADIF); }
  async command void HplAtm128Adc.startConversion() { SET_BIT(ADCSRA, ADSC); }


  /* A/D status checks */
  async command bool HplAtm128Adc.isEnabled()     {
    return (call HplAtm128Adc.getAdcsra()).aden;
  }

  async command bool HplAtm128Adc.isStarted()     {
    return (call HplAtm128Adc.getAdcsra()).adsc;
  }

  async command bool HplAtm128Adc.isComplete()    {
    return (call HplAtm128Adc.getAdcsra()).adif;
  }

  /* A/D interrupt handlers. Signals dataReady event with interrupts enabled */
  AVR_ATOMIC_HANDLER(ADC_vect) {
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
    1122:	60 91 78 00 	lds	r22, 0x0078
    1126:	70 91 79 00 	lds	r23, 0x0079
#define READ_FLAG(port, flag) ((port) & (flag))

/* Enables interrupts. */
inline void __nesc_enable_interrupt() @safe() {
    sei();
    112a:	78 94       	sei
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    112c:	8f b7       	in	r24, 0x3f	; 63
    112e:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1130:	99 27       	eor	r25, r25
    1132:	20 91 91 04 	lds	r18, 0x0491
    1136:	42 2f       	mov	r20, r18
    1138:	46 95       	lsr	r20
    113a:	41 70       	andi	r20, 0x01	; 1
    113c:	21 70       	andi	r18, 0x01	; 1
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    113e:	8f bf       	out	0x3f, r24	; 63
    1140:	22 23       	and	r18, r18
    1142:	49 f5       	brne	.+82     	; 0x1196 <__vector_29+0x96>
    1144:	80 91 7a 00 	lds	r24, 0x007A
    1148:	87 7f       	andi	r24, 0xF7	; 247
    114a:	80 93 7a 00 	sts	0x007A, r24
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    114e:	2f b7       	in	r18, 0x3f	; 63
    1150:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1152:	33 27       	eor	r19, r19
    1154:	80 91 7a 00 	lds	r24, 0x007A
    1158:	8f 77       	andi	r24, 0x7F	; 127
    115a:	80 93 7a 00 	sts	0x007A, r24
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	80 93 61 04 	sts	0x0461, r24
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1164:	2f bf       	out	0x3f, r18	; 63

    return SUCCESS;
  }

  command error_t Read.read[uint8_t c]() {
    return startGet(ACQUIRE_DATA, c);
  }

  async command error_t ReadNow.read[uint8_t c]() {
    return startGet(ACQUIRE_DATA_NOW, c);
  }

  task void acquiredData() {
    state = IDLE;
    signal Read.readDone[client](SUCCESS, val);
  }

  async event void Atm128AdcSingle.dataReady(uint16_t data, bool precise) {
    switch (state)
    1166:	80 91 a8 05 	lds	r24, 0x05A8
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	21 f0       	breq	.+8      	; 0x1176 <__vector_29+0x76>
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	09 f0       	breq	.+2      	; 0x1174 <__vector_29+0x74>
    1172:	3b c0       	rjmp	.+118    	; 0x11ea <__vector_29+0xea>
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <__vector_29+0x88>
      {
      case ACQUIRE_DATA:
	if (!precise)
    1176:	44 23       	and	r20, r20
    1178:	49 f0       	breq	.+18     	; 0x118c <__vector_29+0x8c>
	  sample();
	else
	  {
	    val = data;
    117a:	70 93 0c 06 	sts	0x060C, r23
    117e:	60 93 0b 06 	sts	0x060B, r22
    1182:	8c e0       	ldi	r24, 0x0C	; 12
    1184:	da d9       	rcall	.-3148   	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
    1186:	31 c0       	rjmp	.+98     	; 0x11ea <__vector_29+0xea>
    1188:	44 23       	and	r20, r20
	    post acquiredData();
	  }
	break;

      case ACQUIRE_DATA_NOW:
	if (!precise)
    118a:	11 f4       	brne	.+4      	; 0x1190 <__vector_29+0x90>
    118c:	27 de       	rcall	.-946    	; 0xddc <AdcP__sample>
	  sample();
    118e:	2d c0       	rjmp	.+90     	; 0x11ea <__vector_29+0xea>
    1190:	10 92 a8 05 	sts	0x05A8, r1
	else
	  {
	    state = IDLE;
    1194:	2a c0       	rjmp	.+84     	; 0x11ea <__vector_29+0xea>
    1196:	8f b7       	in	r24, 0x3f	; 63
    1198:	f8 94       	cli
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    119a:	99 27       	eor	r25, r25
    119c:	8f bf       	out	0x3f, r24	; 63
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    119e:	2f b7       	in	r18, 0x3f	; 63
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    11a0:	f8 94       	cli
    11a2:	33 27       	eor	r19, r19
    11a4:	80 91 7a 00 	lds	r24, 0x007A
    11a8:	58 2f       	mov	r21, r24
    11aa:	57 70       	andi	r21, 0x07	; 7
    uint16_t data = call HplAtm128Adc.getValue();

    __nesc_enable_interrupt();
    signal HplAtm128Adc.dataReady(data);
  }

  default async event void HplAtm128Adc.dataReady(uint16_t done) { }

	async command mcu_power_t McuPowerOverride.lowestState() {
		if(bit_is_set(ADCSRA,ADEN)) {
			return ATM128_POWER_ADC_NR;
		}
		else
			return ATM128_POWER_DOWN;
	} 

  async command bool HplAtm128Adc.cancel() {
    /* This is tricky */
    atomic
      {
	Atm128Adcsra_t oldSr = call HplAtm128Adc.getAdcsra(), newSr;

	/* To cancel a conversion, first turn off ADEN, then turn off
	   ADSC. We also cancel any pending interrupt.
	   Finally we reenable the ADC.
	*/
	newSr = oldSr;
    11ac:	48 2f       	mov	r20, r24
    11ae:	40 72       	andi	r20, 0x20	; 32
    11b0:	98 7d       	andi	r25, 0xD8	; 216
    11b2:	94 2b       	or	r25, r20
    11b4:	95 2b       	or	r25, r21
    11b6:	80 74       	andi	r24, 0x40	; 64
    11b8:	97 7b       	andi	r25, 0xB7	; 183
    11ba:	98 2b       	or	r25, r24
    11bc:	90 61       	ori	r25, 0x10	; 16
    11be:	9f 77       	andi	r25, 0x7F	; 127
    11c0:	89 2f       	mov	r24, r25
    11c2:	99 27       	eor	r25, r25
    11c4:	80 93 7a 00 	sts	0x007A, r24
    11c8:	88 7d       	andi	r24, 0xD8	; 216
    11ca:	84 2b       	or	r24, r20
    11cc:	85 2b       	or	r24, r21
    11ce:	87 73       	andi	r24, 0x37	; 55
    11d0:	80 61       	ori	r24, 0x10	; 16
    11d2:	99 27       	eor	r25, r25
    11d4:	80 93 7a 00 	sts	0x007A, r24
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
  SREG = original_SREG;
    11d8:	88 7d       	andi	r24, 0xD8	; 216
    11da:	84 2b       	or	r24, r20
    11dc:	85 2b       	or	r24, r21
    11de:	87 7b       	andi	r24, 0xB7	; 183
    11e0:	80 69       	ori	r24, 0x90	; 144
    11e2:	99 27       	eor	r25, r25
    11e4:	80 93 7a 00 	sts	0x007A, r24
    11e8:	2f bf       	out	0x3f, r18	; 63
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	0f 90       	pop	r0
    1208:	1f 90       	pop	r1
    120a:	18 95       	reti

0000120c <__vector_58>:

  /**
  * Indicates PLL unlock
  */
  AVR_ATOMIC_HANDLER(TRX24_PLL_UNLOCK_vect) {}
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
  SREG = original_SREG;
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_62>:

    /**
     * Indicates radio transceiver reached TRX_OFF state from RESET or SLEEP states
     */
  AVR_ATOMIC_HANDLER(TRX24_AWAKE_vect) {
    RADIO_ASSERT( ! radioIrq );
    atomic {
      radioIrq |= IRQ_AWAKE;
    }
    call Tasklet.schedule();
  }

  /**
  * Indicates the end of a CCA or ED measurement 
  */
  AVR_ATOMIC_HANDLER(TRX24_CCA_ED_DONE_vect) {
    RADIO_ASSERT( ! radioIrq );
    atomic {
      radioIrq |= IRQ_CCA_ED_DONE;
    }
    call Tasklet.schedule();
  }

  /**
  * Indicates address matching
  */
  AVR_ATOMIC_HANDLER(TRX24_XAH_AMI_vect){}
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <SoftwareAckLayerC__0__SubSend__send>:
    1234:	2f 92       	push	r2
    1236:	3f 92       	push	r3
    1238:	4f 92       	push	r4
    123a:	5f 92       	push	r5
    123c:	6f 92       	push	r6
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	24 97       	sbiw	r28, 0x04	; 4
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	80 91 8f 04 	lds	r24, 0x048F
    1270:	88 23       	and	r24, r24
    1272:	09 f0       	breq	.+2      	; 0x1276 <SoftwareAckLayerC__0__SubSend__send+0x42>
    1274:	de c0       	rjmp	.+444    	; 0x1432 <SoftwareAckLayerC__0__SubSend__send+0x1fe>
    1276:	80 91 aa 05 	lds	r24, 0x05AA
    127a:	85 30       	cpi	r24, 0x05	; 5
    127c:	09 f0       	breq	.+2      	; 0x1280 <SoftwareAckLayerC__0__SubSend__send+0x4c>
    127e:	d9 c0       	rjmp	.+434    	; 0x1432 <SoftwareAckLayerC__0__SubSend__send+0x1fe>
    1280:	80 91 16 06 	lds	r24, 0x0616
    1284:	88 23       	and	r24, r24
    1286:	09 f0       	breq	.+2      	; 0x128a <SoftwareAckLayerC__0__SubSend__send+0x56>
    1288:	d4 c0       	rjmp	.+424    	; 0x1432 <SoftwareAckLayerC__0__SubSend__send+0x1fe>
    128a:	6b 81       	ldd	r22, Y+3	; 0x03
    128c:	7c 81       	ldd	r23, Y+4	; 0x04
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	64 dc       	rcall	.-1848   	; 0xb5a <MetadataFlagsLayerC__0__PacketFlag__get>
    1292:	88 23       	and	r24, r24
    1294:	11 f4       	brne	.+4      	; 0x129a <SoftwareAckLayerC__0__SubSend__send+0x66>
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <SoftwareAckLayerC__0__SubSend__send+0x6c>
    129a:	eb 81       	ldd	r30, Y+3	; 0x03
    129c:	fc 81       	ldd	r31, Y+4	; 0x04
    129e:	91 a9       	ldd	r25, Z+49	; 0x31
    12a0:	80 91 e2 05 	lds	r24, 0x05E2
    12a4:	98 17       	cp	r25, r24
    12a6:	31 f0       	breq	.+12     	; 0x12b4 <SoftwareAckLayerC__0__SubSend__send+0x80>
    12a8:	90 93 e2 05 	sts	0x05E2, r25
    12ac:	9f 70       	andi	r25, 0x0F	; 15
    12ae:	90 6c       	ori	r25, 0xC0	; 192
    12b0:	90 93 45 01 	sts	0x0145, r25
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	b8 db       	rcall	.-2192   	; 0xa2a <Ieee154PacketLayerP__0__Ieee154PacketLayer__isDataFrame>
    12ba:	88 23       	and	r24, r24
    12bc:	a9 f0       	breq	.+42     	; 0x12e8 <SoftwareAckLayerC__0__SubSend__send+0xb4>
    12be:	80 91 46 01 	lds	r24, 0x0146
    12c2:	99 27       	eor	r25, r25
    12c4:	8f 71       	andi	r24, 0x1F	; 31
    12c6:	90 70       	andi	r25, 0x00	; 0
    12c8:	20 91 36 06 	lds	r18, 0x0636
    12cc:	40 91 76 04 	lds	r20, 0x0476
    12d0:	24 0f       	add	r18, r20
    12d2:	31 2d       	mov	r19, r1
    12d4:	31 1d       	adc	r19, r1
    12d6:	b3 e0       	ldi	r27, 0x03	; 3
    12d8:	35 95       	asr	r19
    12da:	27 95       	ror	r18
    12dc:	ba 95       	dec	r27
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <SoftwareAckLayerC__0__SubSend__send+0xa4>
    12e0:	28 17       	cp	r18, r24
    12e2:	39 07       	cpc	r19, r25
    12e4:	0c f4       	brge	.+2      	; 0x12e8 <SoftwareAckLayerC__0__SubSend__send+0xb4>
    12e6:	a5 c0       	rjmp	.+330    	; 0x1432 <SoftwareAckLayerC__0__SubSend__send+0x1fe>
    12e8:	89 e0       	ldi	r24, 0x09	; 9
    12ea:	80 93 42 01 	sts	0x0142, r24
    12ee:	6b 81       	ldd	r22, Y+3	; 0x03
    12f0:	7c 81       	ldd	r23, Y+4	; 0x04
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	32 dc       	rcall	.-1948   	; 0xb5a <MetadataFlagsLayerC__0__PacketFlag__get>
    12f6:	88 23       	and	r24, r24
    12f8:	19 f4       	brne	.+6      	; 0x1300 <SoftwareAckLayerC__0__SubSend__send+0xcc>
    12fa:	66 24       	eor	r6, r6
    12fc:	77 24       	eor	r7, r7
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <SoftwareAckLayerC__0__SubSend__send+0xda>
    1300:	eb 81       	ldd	r30, Y+3	; 0x03
    1302:	fc 81       	ldd	r31, Y+4	; 0x04
    1304:	80 81       	ld	r24, Z
}

inline uint8_t __nesc_ntoh_leuint8(const void * ONE source) @safe() {
  const uint8_t *base = source;
  return base[0];
    1306:	85 50       	subi	r24, 0x05	; 5
    1308:	3f 01       	movw	r6, r30
    130a:	68 0e       	add	r6, r24
    130c:	71 1c       	adc	r7, r1
    130e:	80 91 41 01 	lds	r24, 0x0141
    1312:	8f 71       	andi	r24, 0x1F	; 31
    1314:	89 30       	cpi	r24, 0x09	; 9
    1316:	21 f0       	breq	.+8      	; 0x1320 <SoftwareAckLayerC__0__SubSend__send+0xec>
    1318:	87 e0       	ldi	r24, 0x07	; 7
    131a:	80 93 aa 05 	sts	0x05AA, r24
    131e:	89 c0       	rjmp	.+274    	; 0x1432 <SoftwareAckLayerC__0__SubSend__send+0x1fe>
    1320:	2b 80       	ldd	r2, Y+3	; 0x03
    1322:	3c 80       	ldd	r3, Y+4	; 0x04
    1324:	08 94       	sec
    1326:	21 1c       	adc	r2, r1
    1328:	31 1c       	adc	r3, r1
    132a:	eb 81       	ldd	r30, Y+3	; 0x03
    132c:	fc 81       	ldd	r31, Y+4	; 0x04
    132e:	80 81       	ld	r24, Z
}

inline uint8_t __nesc_ntoh_leuint8(const void * ONE source) @safe() {
  const uint8_t *base = source;
  return base[0];
    1330:	99 27       	eor	r25, r25
    1332:	80 93 80 01 	sts	0x0180, r24
    1336:	82 50       	subi	r24, 0x02	; 2
    1338:	87 30       	cpi	r24, 0x07	; 7
    133a:	10 f4       	brcc	.+4      	; 0x1340 <SoftwareAckLayerC__0__SubSend__send+0x10c>
    133c:	98 2f       	mov	r25, r24
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <SoftwareAckLayerC__0__SubSend__send+0x10e>
    1340:	97 e0       	ldi	r25, 0x07	; 7
    1342:	d8 2e       	mov	r13, r24
    1344:	d9 1a       	sub	r13, r25
    1346:	e9 2e       	mov	r14, r25
    1348:	ff 24       	eor	r15, r15
    134a:	a7 01       	movw	r20, r14
    134c:	b1 01       	movw	r22, r2
    134e:	81 e8       	ldi	r24, 0x81	; 129
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	0e 94 10 17 	call	0x2e20	; 0x2e20 <memcpy>
    1356:	0f b7       	in	r16, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	11 27       	eor	r17, r17
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	80 93 42 01 	sts	0x0142, r24
    1362:	fe d9       	rcall	.-3076   	; 0x760 <CounterToLocalTimeC__1__LocalTime__get>
    1364:	4b 01       	movw	r8, r22
    1366:	5c 01       	movw	r10, r24
   * may stop counting while the processor is in low-power mode.
   *
   * @return Current time.
   */
  async command uint32_t get();
    1368:	0f bf       	out	0x3f, r16	; 63
    136a:	c7 01       	movw	r24, r14
    136c:	8f 57       	subi	r24, 0x7F	; 127
    136e:	9e 4f       	sbci	r25, 0xFE	; 254
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	4d 2c       	mov	r4, r13
    1376:	55 24       	eor	r5, r5
    1378:	2e 0c       	add	r2, r14
    137a:	3f 1c       	adc	r3, r15
    137c:	61 14       	cp	r6, r1
    137e:	71 04       	cpc	r7, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <SoftwareAckLayerC__0__SubSend__send+0x150>
    1382:	41 c0       	rjmp	.+130    	; 0x1406 <SoftwareAckLayerC__0__SubSend__send+0x1d2>
    1384:	f3 01       	movw	r30, r6
    1386:	80 81       	ld	r24, Z
    1388:	01 81       	ldd	r16, Z+1	; 0x01
    138a:	42 81       	ldd	r20, Z+2	; 0x02
/* 32-bits */
/* ------- */
inline uint32_t __nesc_ntoh_uint32(const void * COUNT(4) source) @safe() {
  const uint8_t *base = source;
  return (uint32_t)base[0] << 24 |
    138c:	c3 80       	ldd	r12, Z+3	; 0x03
    138e:	55 27       	eor	r21, r21
    1390:	66 27       	eor	r22, r22
    1392:	77 27       	eor	r23, r23
    1394:	76 2f       	mov	r23, r22
         (uint32_t)base[1] << 16 |
         (uint32_t)base[2] << 8 | base[3];
}

inline uint32_t __nesc_hton_uint32(void * COUNT(4) target, uint32_t value) @safe() {
  uint8_t *base = target;
  base[3] = value;
  base[2] = value >> 8;
  base[1] = value >> 16;
  base[0] = value >> 24;
  return value;
}

inline uint32_t __nesc_ntoh_leuint32(const void * COUNT(4) source) @safe() {
  const uint8_t *base = source;
  return (uint32_t)base[3] << 24 |
         (uint32_t)base[2] << 16 |
         (uint32_t)base[1] << 8 | base[0];
}

inline uint32_t __nesc_hton_leuint32(void * COUNT(4) target, uint32_t value) @safe() {
  uint8_t *base = target;
  base[0] = value;
  base[1] = value >> 8;
  base[2] = value >> 16;
  base[3] = value >> 24;
  return value;
}

__NX_DECLARE_FUNCTIONS(32)
    1396:	65 2f       	mov	r22, r21
    1398:	54 2f       	mov	r21, r20
    139a:	44 27       	eor	r20, r20
    139c:	99 27       	eor	r25, r25
    139e:	aa 27       	eor	r26, r26
    13a0:	bb 27       	eor	r27, r27
    13a2:	b8 2f       	mov	r27, r24
    13a4:	aa 27       	eor	r26, r26
    13a6:	99 27       	eor	r25, r25
    13a8:	88 27       	eor	r24, r24
    13aa:	11 27       	eor	r17, r17
    13ac:	22 27       	eor	r18, r18
    13ae:	33 27       	eor	r19, r19
    13b0:	98 01       	movw	r18, r16
    13b2:	11 27       	eor	r17, r17
    13b4:	00 27       	eor	r16, r16
    13b6:	80 2b       	or	r24, r16
    13b8:	91 2b       	or	r25, r17
    13ba:	a2 2b       	or	r26, r18
    13bc:	b3 2b       	or	r27, r19
    13be:	dd 24       	eor	r13, r13
    13c0:	ee 24       	eor	r14, r14
    13c2:	ff 24       	eor	r15, r15
    13c4:	8c 29       	or	r24, r12
    13c6:	9d 29       	or	r25, r13
    13c8:	ae 29       	or	r26, r14
    13ca:	bf 29       	or	r27, r15
    13cc:	48 2b       	or	r20, r24
    13ce:	59 2b       	or	r21, r25
    13d0:	6a 2b       	or	r22, r26
    13d2:	7b 2b       	or	r23, r27
    13d4:	48 19       	sub	r20, r8
    13d6:	59 09       	sbc	r21, r9
    13d8:	6a 09       	sbc	r22, r10
    13da:	7b 09       	sbc	r23, r11
    13dc:	c3 01       	movw	r24, r6
    13de:	51 d8       	rcall	.-3934   	; 0x482 <__nesc_hton_uint32>
    13e0:	a2 01       	movw	r20, r4
    13e2:	b1 01       	movw	r22, r2
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <memcpy>
    13ec:	96 e0       	ldi	r25, 0x06	; 6
    13ee:	90 93 aa 05 	sts	0x05AA, r25
    13f2:	84 e0       	ldi	r24, 0x04	; 4
    13f4:	80 93 8f 04 	sts	0x048F, r24
    13f8:	90 93 42 01 	sts	0x0142, r25
    13fc:	b5 01       	movw	r22, r10
    13fe:	a4 01       	movw	r20, r8
    1400:	c3 01       	movw	r24, r6
    1402:	3f d8       	rcall	.-3970   	; 0x482 <__nesc_hton_uint32>
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <SoftwareAckLayerC__0__SubSend__send+0x1ee>
    1406:	a2 01       	movw	r20, r4
    1408:	b1 01       	movw	r22, r2
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <memcpy>
    1412:	96 e0       	ldi	r25, 0x06	; 6
    1414:	90 93 aa 05 	sts	0x05AA, r25
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	80 93 8f 04 	sts	0x048F, r24
    141e:	90 93 42 01 	sts	0x0142, r25
    1422:	b5 01       	movw	r22, r10
    1424:	a4 01       	movw	r20, r8
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	d6 da       	rcall	.-2644   	; 0x9d8 <RFA1DriverLayerP__PacketTimeStamp__set>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <SoftwareAckLayerC__0__SubSend__send+0x202>
    1432:	85 e0       	ldi	r24, 0x05	; 5
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	24 96       	adiw	r28, 0x04	; 4
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	df 90       	pop	r13
    1450:	cf 90       	pop	r12
    1452:	bf 90       	pop	r11
    1454:	af 90       	pop	r10
    1456:	9f 90       	pop	r9
    1458:	8f 90       	pop	r8
    145a:	7f 90       	pop	r7
    145c:	6f 90       	pop	r6
    145e:	5f 90       	pop	r5
    1460:	4f 90       	pop	r4
    1462:	3f 90       	pop	r3
    1464:	2f 90       	pop	r2
    1466:	08 95       	ret

00001468 <TaskletC__doit>:
	 */
	uint8_t state;

	void doit()
	{
    1468:	6f 92       	push	r6
    146a:	7f 92       	push	r7
    146c:	8f 92       	push	r8
    146e:	9f 92       	push	r9
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	90 91 16 06 	lds	r25, 0x0616
    1488:	99 23       	and	r25, r25
    148a:	09 f4       	brne	.+2      	; 0x148e <TaskletC__doit+0x26>
    148c:	d4 c0       	rjmp	.+424    	; 0x1636 <TaskletC__doit+0x1ce>
    148e:	10 92 16 06 	sts	0x0616, r1
    1492:	97 ff       	sbrs	r25, 7
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <TaskletC__doit+0x3c>
    1496:	80 91 aa 05 	lds	r24, 0x05AA
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	19 f4       	brne	.+6      	; 0x14a4 <TaskletC__doit+0x3c>
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	80 93 aa 05 	sts	0x05AA, r24
    14a4:	e9 2e       	mov	r14, r25
    14a6:	ff 24       	eor	r15, r15
    14a8:	e0 fe       	sbrs	r14, 0
    14aa:	11 c0       	rjmp	.+34     	; 0x14ce <TaskletC__doit+0x66>
    14ac:	80 91 8f 04 	lds	r24, 0x048F
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <TaskletC__doit+0x50>
    14b4:	87 30       	cpi	r24, 0x07	; 7
    14b6:	59 f4       	brne	.+22     	; 0x14ce <TaskletC__doit+0x66>
    14b8:	85 e0       	ldi	r24, 0x05	; 5
    14ba:	80 93 aa 05 	sts	0x05AA, r24
    14be:	80 91 4c 01 	lds	r24, 0x014C
    14c2:	80 68       	ori	r24, 0x80	; 128
    14c4:	80 93 4c 01 	sts	0x014C, r24
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	80 93 8f 04 	sts	0x048F, r24
    14ce:	e4 fe       	sbrs	r14, 4
    14d0:	0c c0       	rjmp	.+24     	; 0x14ea <TaskletC__doit+0x82>
    14d2:	80 91 8f 04 	lds	r24, 0x048F
    14d6:	86 30       	cpi	r24, 0x06	; 6
    14d8:	41 f4       	brne	.+16     	; 0x14ea <TaskletC__doit+0x82>
    14da:	80 91 41 01 	lds	r24, 0x0141
    14de:	87 ff       	sbrs	r24, 7
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <TaskletC__doit+0x82>
    14e2:	10 92 8f 04 	sts	0x048F, r1
    14e6:	80 91 41 01 	lds	r24, 0x0141
    14ea:	e2 fe       	sbrs	r14, 2
    14ec:	4b c0       	rjmp	.+150    	; 0x1584 <TaskletC__doit+0x11c>
    14ee:	80 91 8f 04 	lds	r24, 0x048F
    14f2:	86 30       	cpi	r24, 0x06	; 6
    14f4:	19 f4       	brne	.+6      	; 0x14fc <TaskletC__doit+0x94>
    14f6:	10 92 8f 04 	sts	0x048F, r1
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <TaskletC__doit+0x9a>
    14fc:	88 23       	and	r24, r24
    14fe:	09 f0       	breq	.+2      	; 0x1502 <TaskletC__doit+0x9a>
    1500:	41 c0       	rjmp	.+130    	; 0x1584 <TaskletC__doit+0x11c>
    1502:	c0 91 09 07 	lds	r28, 0x0709
    1506:	d0 91 0a 07 	lds	r29, 0x070A
    150a:	94 30       	cpi	r25, 0x04	; 4
    150c:	69 f5       	brne	.+90     	; 0x1568 <TaskletC__doit+0x100>
    150e:	10 91 46 01 	lds	r17, 0x0146
    1512:	1f 71       	andi	r17, 0x1F	; 31
    1514:	80 91 76 04 	lds	r24, 0x0476
    1518:	98 2f       	mov	r25, r24
    151a:	96 95       	lsr	r25
    151c:	96 95       	lsr	r25
    151e:	21 2f       	mov	r18, r17
    1520:	29 1b       	sub	r18, r25
    1522:	82 0f       	add	r24, r18
    1524:	80 93 76 04 	sts	0x0476, r24

	/**
	 * Sets the flag in this message to FALSE
	 */
	async command void clear(message_t* msg);
    1528:	be 01       	movw	r22, r28
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	0e 94 34 02 	call	0x468	; 0x468 <MetadataFlagsLayerC__0__PacketFlag__clear>
    1530:	be 01       	movw	r22, r28
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	45 da       	rcall	.-2934   	; 0x9c0 <MetadataFlagsLayerC__0__PacketFlag__set>
    1536:	19 ab       	std	Y+49, r17	; 0x31
  


  /*----------------- RadioPacket -----------------*/
	
  async command uint8_t RadioPacket.headerLength(message_t* msg)
  {
    return call Config.headerLength(msg) + sizeof(rfa1_header_t);
  }

  async command uint8_t RadioPacket.payloadLength(message_t* msg)
  {
    return getHeader(msg)->length - 2;
  }

  async command void RadioPacket.setPayloadLength(message_t* msg, uint8_t length)
  {
    RADIO_ASSERT( 1 <= length && length <= 125 );
    RADIO_ASSERT( call RadioPacket.headerLength(msg) + length + call RadioPacket.metadataLength(msg) <= sizeof(message_t) );
    // we add the length of the CRC, which is automatically generated
    getHeader(msg)->length = length + 2;
  }

  async command uint8_t RadioPacket.maxPayloadLength()
  {
    RADIO_ASSERT( call Config.maxPayloadLength() - sizeof(rfa1_header_t) <= 125 );

    return call Config.maxPayloadLength() - sizeof(rfa1_header_t);
  }

  async command uint8_t RadioPacket.metadataLength(message_t* msg)
  {
    return call Config.metadataLength(msg) + sizeof(rfa1_metadata_t);
  }

  async command void RadioPacket.clear(message_t* msg)
  {
    // all flags are automatically cleared
  }

  /*----------------- PacketTransmitPower -----------------*/

  async command bool PacketTransmitPower.isSet(message_t* msg)
  {
    return call TransmitPowerFlag.get(msg);
  }

  async command uint8_t PacketTransmitPower.get(message_t* msg)
  {
    return getMeta(msg)->power;
  }

  async command void PacketTransmitPower.clear(message_t* msg)
  {
    call TransmitPowerFlag.clear(msg);
  }

  async command void PacketTransmitPower.set(message_t* msg, uint8_t value)
  {
    call TransmitPowerFlag.set(msg);
    getMeta(msg)->power = value;
  }

  /*----------------- PacketRSSI -----------------*/

  async command bool PacketRSSI.isSet(message_t* msg)
  {
    return call RSSIFlag.get(msg);
  }

  async command uint8_t PacketRSSI.get(message_t* msg)
  {
    return getMeta(msg)->rssi;
  }

  async command void PacketRSSI.clear(message_t* msg)
  {
    call RSSIFlag.clear(msg);
  }

  async command void PacketRSSI.set(message_t* msg, uint8_t value)
  {
    // just to be safe if the user fails to clear the packet
    call TransmitPowerFlag.clear(msg);

    call RSSIFlag.set(msg);
    getMeta(msg)->rssi = value;
    1538:	2f b7       	in	r18, 0x3f	; 63
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    153a:	f8 94       	cli
    153c:	33 27       	eor	r19, r19
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    153e:	80 91 e9 00 	lds	r24, 0x00E9

	async command bool CompareC.test() { return SCIRQS & (1 << IRQSCP3); }

	async command void CompareC.reset() { SCIRQS = 1 << IRQSCP3; }

// ----- COMPARE C: symbol counter interrupt mask register (SCIRQM), compare interrupt enable (IRQMCP)

	async command void CompareC.start()
	{
		SET_BIT(SCIRQM, IRQMCP3);

		call McuPowerState.update();
	}

	async command void CompareC.stop()
	{
		CLR_BIT(SCIRQM, IRQMCP3);

		call McuPowerState.update();
	}

	async command bool CompareC.isOn() { return SCIRQM & (1 << IRQMCP3); }

// ----- COMPARE C: symbol counter control register (SCCR), compare mode (SCCMP)

	async command void CompareC.setMode(uint8_t mode)
	{
		atomic
		{
			SCCR0 = (SCCR0 & ~(1 << SCCMP3)) 
				| (mode & 0x1) << SCCMP3;
		}
	}

	async command uint8_t CompareC.getMode()
	{
		return (SCCR0 >> SCCMP3) & 0x1;
	}

// ----- COMPARE C: ignore force for the symbol counter

	async command void CompareC.force() { }

// ----- SFD CAPTURE: symbol counter time stamp register (SCTSR)

	async command uint32_t SfdCapture.get()
	{
		reg32_t time;

		atomic
		{
			time.ll = SCTSRLL;
    1542:	68 2e       	mov	r6, r24
    1544:	80 91 ea 00 	lds	r24, 0x00EA
			time.lh = SCTSRLH;
    1548:	78 2e       	mov	r7, r24
    154a:	80 91 eb 00 	lds	r24, 0x00EB
			time.hl = SCTSRHL;
    154e:	88 2e       	mov	r8, r24
    1550:	80 91 ec 00 	lds	r24, 0x00EC
			time.hh	= SCTSRHH;
    1554:	98 2e       	mov	r9, r24
    1556:	2f bf       	out	0x3f, r18	; 63
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1558:	b4 01       	movw	r22, r8
    155a:	a3 01       	movw	r20, r6
    155c:	80 91 09 07 	lds	r24, 0x0709
    1560:	90 91 0a 07 	lds	r25, 0x070A
    1564:	39 da       	rcall	.-2958   	; 0x9d8 <RFA1DriverLayerP__PacketTimeStamp__set>
    1566:	0b c0       	rjmp	.+22     	; 0x157e <TaskletC__doit+0x116>
    1568:	be 01       	movw	r22, r28
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	0e 94 34 02 	call	0x468	; 0x468 <MetadataFlagsLayerC__0__PacketFlag__clear>
    1570:	60 91 09 07 	lds	r22, 0x0709
    1574:	70 91 0a 07 	lds	r23, 0x070A
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	0e 94 34 02 	call	0x468	; 0x468 <MetadataFlagsLayerC__0__PacketFlag__clear>
    157e:	85 e0       	ldi	r24, 0x05	; 5
    1580:	80 93 8f 04 	sts	0x048F, r24
    1584:	e6 fe       	sbrs	r14, 6
    1586:	37 c0       	rjmp	.+110    	; 0x15f6 <TaskletC__doit+0x18e>
    1588:	80 91 8f 04 	lds	r24, 0x048F
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	99 f5       	brne	.+102    	; 0x15f6 <TaskletC__doit+0x18e>
    1590:	85 e0       	ldi	r24, 0x05	; 5
    1592:	80 93 aa 05 	sts	0x05AA, r24
    1596:	10 92 8f 04 	sts	0x048F, r1
    159a:	80 91 77 04 	lds	r24, 0x0477
	}

	tasklet_async event void SubSend.sendDone(error_t error)
	{
		if( state == STATE_ACK_SEND )
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <TaskletC__doit+0x140>
    15a2:	10 92 77 04 	sts	0x0477, r1
		{
			// TODO: what if error != SUCCESS
			RADIO_ASSERT( error == SUCCESS );

			state = STATE_READY;
    15a6:	27 c0       	rjmp	.+78     	; 0x15f6 <TaskletC__doit+0x18e>
    15a8:	00 91 d5 06 	lds	r16, 0x06D5
		}
		else
		{
			RADIO_ASSERT( state == STATE_DATA_SEND );
			RADIO_ASSERT( call RadioAlarm.isFree() );

			if( error == SUCCESS && call Config.requiresAckWait(txMsg) && call RadioAlarm.isFree() )
    15ac:	10 91 d6 06 	lds	r17, 0x06D6
    15b0:	c8 01       	movw	r24, r16
    15b2:	2a da       	rcall	.-2988   	; 0xa08 <Ieee154PacketLayerP__0__Ieee154PacketLayer__getAckRequired>
    15b4:	88 23       	and	r24, r24
    15b6:	d9 f0       	breq	.+54     	; 0x15ee <TaskletC__doit+0x186>
    15b8:	c8 01       	movw	r24, r16
    15ba:	37 da       	rcall	.-2962   	; 0xa2a <Ieee154PacketLayerP__0__Ieee154PacketLayer__isDataFrame>
    15bc:	88 23       	and	r24, r24
    15be:	b9 f0       	breq	.+46     	; 0x15ee <TaskletC__doit+0x186>
    15c0:	c8 01       	movw	r24, r16
    15c2:	47 da       	rcall	.-2930   	; 0xa52 <Ieee154PacketLayerP__0__Ieee154PacketLayer__getDestAddr>
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	91 f0       	breq	.+36     	; 0x15ee <TaskletC__doit+0x186>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	80 91 08 06 	lds	r24, 0x0608
    15d0:	88 23       	and	r24, r24
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <TaskletC__doit+0x16e>
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	99 23       	and	r25, r25
    15d8:	51 f0       	breq	.+20     	; 0x15ee <TaskletC__doit+0x186>
    15da:	48 e3       	ldi	r20, 0x38	; 56
    15dc:	51 e0       	ldi	r21, 0x01	; 1
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	40 da       	rcall	.-2944   	; 0xa66 <RadioAlarmP__0__RadioAlarm__wait>
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	80 93 77 04 	sts	0x0477, r24
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <TaskletC__doit+0x18e>
    15ee:	10 92 77 04 	sts	0x0477, r1
			{
				call RadioAlarm.wait(call Config.getAckTimeout());
				state = STATE_ACK_WAIT;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	82 da       	rcall	.-2812   	; 0xafa <SoftwareAckLayerC__0__RadioSend__sendDone>
    15f6:	e3 fe       	sbrs	r14, 3
    15f8:	1e c0       	rjmp	.+60     	; 0x1636 <TaskletC__doit+0x1ce>
			}
			else
			{
				state = STATE_READY;
    15fa:	90 91 8f 04 	lds	r25, 0x048F
				signal RadioSend.sendDone(error);
    15fe:	95 30       	cpi	r25, 0x05	; 5
    1600:	d1 f4       	brne	.+52     	; 0x1636 <TaskletC__doit+0x1ce>
    1602:	80 91 aa 05 	lds	r24, 0x05AA
    1606:	87 30       	cpi	r24, 0x07	; 7
    1608:	31 f4       	brne	.+12     	; 0x1616 <TaskletC__doit+0x1ae>
    160a:	86 e0       	ldi	r24, 0x06	; 6
    160c:	80 93 42 01 	sts	0x0142, r24
    1610:	90 93 aa 05 	sts	0x05AA, r25
    1614:	0c c0       	rjmp	.+24     	; 0x162e <TaskletC__doit+0x1c6>
    1616:	80 91 36 06 	lds	r24, 0x0636
    161a:	90 91 46 01 	lds	r25, 0x0146
    161e:	9f 71       	andi	r25, 0x1F	; 31
    1620:	28 2f       	mov	r18, r24
    1622:	26 95       	lsr	r18
    1624:	26 95       	lsr	r18
    1626:	92 1b       	sub	r25, r18
    1628:	89 0f       	add	r24, r25
    162a:	80 93 36 06 	sts	0x0636, r24
    162e:	89 e0       	ldi	r24, 0x09	; 9
    1630:	80 93 8f 04 	sts	0x048F, r24
    1634:	08 c0       	rjmp	.+16     	; 0x1646 <TaskletC__doit+0x1de>
    1636:	90 91 8f 04 	lds	r25, 0x048F
    163a:	99 23       	and	r25, r25
    163c:	09 f4       	brne	.+2      	; 0x1640 <TaskletC__doit+0x1d8>
    163e:	32 c2       	rjmp	.+1124   	; 0x1aa4 <TaskletC__doit+0x63c>
    1640:	99 30       	cpi	r25, 0x09	; 9
    1642:	09 f0       	breq	.+2      	; 0x1646 <TaskletC__doit+0x1de>
    1644:	bf c1       	rjmp	.+894    	; 0x19c4 <TaskletC__doit+0x55c>
    1646:	40 91 7b 01 	lds	r20, 0x017B
    164a:	43 30       	cpi	r20, 0x03	; 3
    164c:	08 f4       	brcc	.+2      	; 0x1650 <TaskletC__doit+0x1e8>
    164e:	67 c0       	rjmp	.+206    	; 0x171e <TaskletC__doit+0x2b6>
    1650:	84 2f       	mov	r24, r20
    1652:	99 27       	eor	r25, r25
    1654:	89 97       	sbiw	r24, 0x29	; 41
    1656:	0c f0       	brlt	.+2      	; 0x165a <TaskletC__doit+0x1f2>
    1658:	62 c0       	rjmp	.+196    	; 0x171e <TaskletC__doit+0x2b6>
    165a:	e0 91 09 07 	lds	r30, 0x0709
    165e:	f0 91 0a 07 	lds	r31, 0x070A
    1662:	6f 01       	movw	r12, r30
    1664:	08 94       	sec
    1666:	c1 1c       	adc	r12, r1
    1668:	d1 1c       	adc	r13, r1
    166a:	40 83       	st	Z, r20
    166c:	fe ef       	ldi	r31, 0xFE	; 254
    166e:	ff 2e       	mov	r15, r31
    1670:	f4 0e       	add	r15, r20
    1672:	b6 e0       	ldi	r27, 0x06	; 6
    1674:	bf 15       	cp	r27, r15
    1676:	10 f0       	brcs	.+4      	; 0x167c <TaskletC__doit+0x214>
}

inline uint8_t __nesc_hton_leuint8(void * ONE target, uint8_t value) @safe() {
  uint8_t *base = target;
  base[0] = value;
    1678:	ef 2c       	mov	r14, r15
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <TaskletC__doit+0x218>
    167c:	e7 e0       	ldi	r30, 0x07	; 7
    167e:	ee 2e       	mov	r14, r30
    1680:	0e 2d       	mov	r16, r14
    1682:	11 27       	eor	r17, r17
    1684:	a8 01       	movw	r20, r16
    1686:	60 e8       	ldi	r22, 0x80	; 128
    1688:	71 e0       	ldi	r23, 0x01	; 1
    168a:	c6 01       	movw	r24, r12
    168c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <memcpy>
    1690:	c0 91 09 07 	lds	r28, 0x0709
    1694:	d0 91 0a 07 	lds	r29, 0x070A
    1698:	ce 01       	movw	r24, r28
    169a:	32 da       	rcall	.-2972   	; 0xb00 <SoftwareAckLayerC__0__Config__isAckPacket>
    169c:	88 23       	and	r24, r24
    169e:	c1 f0       	breq	.+48     	; 0x16d0 <TaskletC__doit+0x268>
    16a0:	80 91 77 04 	lds	r24, 0x0477
    16a4:	82 30       	cpi	r24, 0x02	; 2
			}
		}
	}

	tasklet_async event void RadioAlarm.fired()
	{
		RADIO_ASSERT( state == STATE_ACK_WAIT );

		call Config.reportChannelError();

		state = STATE_READY;
		signal RadioSend.sendDone(SUCCESS);	// we have sent it, but not acked
	}

	tasklet_async event bool SubReceive.header(message_t* msg)
	{
		if( call Config.isAckPacket(msg) )
    16a6:	89 f4       	brne	.+34     	; 0x16ca <TaskletC__doit+0x262>
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	e0 91 d5 06 	lds	r30, 0x06D5
    16ae:	f0 91 d6 06 	lds	r31, 0x06D6
			return state == STATE_ACK_WAIT && call Config.verifyAckPacket(txMsg, msg);
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	89 17       	cp	r24, r25
    16b6:	49 f4       	brne	.+18     	; 0x16ca <TaskletC__doit+0x262>
}

inline uint8_t __nesc_ntoh_leuint8(const void * ONE source) @safe() {
  const uint8_t *base = source;
  return base[0];
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	87 70       	andi	r24, 0x07	; 7
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <TaskletC__doit+0x25c>
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	98 27       	eor	r25, r24
}

inline uint16_t __nesc_ntoh_leuint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
  return (uint16_t)base[1] << 8 | base[0];
    16c8:	0e c0       	rjmp	.+28     	; 0x16e6 <TaskletC__doit+0x27e>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0d c0       	rjmp	.+26     	; 0x16ea <TaskletC__doit+0x282>
    16d0:	8f b7       	in	r24, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	28 2f       	mov	r18, r24
    16d6:	33 27       	eor	r19, r19
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	80 91 17 06 	lds	r24, 0x0617
    16de:	83 30       	cpi	r24, 0x03	; 3
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <TaskletC__doit+0x27c>
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    16e4:	2f bf       	out	0x3f, r18	; 63
    16e6:	89 2f       	mov	r24, r25
    16e8:	99 27       	eor	r25, r25
    16ea:	89 2b       	or	r24, r25
    16ec:	c1 f0       	breq	.+48     	; 0x171e <TaskletC__doit+0x2b6>
    16ee:	fe 18       	sub	r15, r14
    16f0:	4f 2d       	mov	r20, r15
    16f2:	55 27       	eor	r21, r21
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    16f4:	b8 01       	movw	r22, r16
		else
			return signal RadioReceive.header(msg);
    16f6:	60 58       	subi	r22, 0x80	; 128
    16f8:	7e 4f       	sbci	r23, 0xFE	; 254
    16fa:	c6 01       	movw	r24, r12
    16fc:	80 0f       	add	r24, r16
    16fe:	91 1f       	adc	r25, r17
    1700:	0e 94 10 17 	call	0x2e20	; 0x2e20 <memcpy>
    1704:	e0 91 7b 01 	lds	r30, 0x017B
    1708:	ff 27       	eor	r31, r31
    170a:	e0 58       	subi	r30, 0x80	; 128
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	80 81       	ld	r24, Z
    1710:	e0 91 09 07 	lds	r30, 0x0709
    1714:	f0 91 0a 07 	lds	r31, 0x070A
    1718:	80 ab       	std	Z+48, r24	; 0x30
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <TaskletC__doit+0x2b8>
    171e:	20 e0       	ldi	r18, 0x00	; 0
  }

  /*----------------- PacketTimeSyncOffset -----------------*/

  async command bool PacketTimeSyncOffset.isSet(message_t* msg)
  {
    return call TimeSyncFlag.get(msg);
  }

  async command uint8_t PacketTimeSyncOffset.get(message_t* msg)
  {
    return call RadioPacket.headerLength(msg) + call RadioPacket.payloadLength(msg) - sizeof(timesync_absolute_t);
  }

  async command void PacketTimeSyncOffset.clear(message_t* msg)
  {
    call TimeSyncFlag.clear(msg);
  }

  async command void PacketTimeSyncOffset.set(message_t* msg, uint8_t value)
  {
    // we do not store the value, the time sync field is always the last 4 bytes
    RADIO_ASSERT( call PacketTimeSyncOffset.get(msg) == value );

    call TimeSyncFlag.set(msg);
  }

  /*----------------- PacketLinkQuality -----------------*/

  async command bool PacketLinkQuality.isSet(message_t* msg)
  {
    return TRUE;
  }

  async command uint8_t PacketLinkQuality.get(message_t* msg)
  {
    return getMeta(msg)->lqi;
  }

  async command void PacketLinkQuality.clear(message_t* msg)
  {
  }

  async command void PacketLinkQuality.set(message_t* msg, uint8_t value)
  {
    getMeta(msg)->lqi = value;
    1720:	80 91 46 01 	lds	r24, 0x0146
    1724:	99 27       	eor	r25, r25
    1726:	87 70       	andi	r24, 0x07	; 7
    1728:	90 70       	andi	r25, 0x00	; 0
    172a:	89 2b       	or	r24, r25
    172c:	09 f0       	breq	.+2      	; 0x1730 <TaskletC__doit+0x2c8>
    172e:	57 c2       	rjmp	.+1198   	; 0x1bde <TaskletC__doit+0x776>
    1730:	80 91 4c 01 	lds	r24, 0x014C
    1734:	8f 77       	andi	r24, 0x7F	; 127
    1736:	80 93 4c 01 	sts	0x014C, r24
    173a:	80 91 4c 01 	lds	r24, 0x014C
    173e:	80 68       	ori	r24, 0x80	; 128
    1740:	80 93 4c 01 	sts	0x014C, r24
    1744:	85 e0       	ldi	r24, 0x05	; 5
    1746:	80 93 aa 05 	sts	0x05AA, r24
    174a:	10 92 8f 04 	sts	0x048F, r1
    174e:	22 23       	and	r18, r18
    1750:	09 f4       	brne	.+2      	; 0x1754 <TaskletC__doit+0x2ec>
    1752:	a4 c1       	rjmp	.+840    	; 0x1a9c <TaskletC__doit+0x634>
    1754:	a0 90 09 07 	lds	r10, 0x0709
    1758:	b0 90 0a 07 	lds	r11, 0x070A
    175c:	c5 01       	movw	r24, r10
    175e:	d0 d9       	rcall	.-3168   	; 0xb00 <SoftwareAckLayerC__0__Config__isAckPacket>
    1760:	18 2f       	mov	r17, r24
    1762:	80 91 77 04 	lds	r24, 0x0477
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	d1 f4       	brne	.+52     	; 0x179e <TaskletC__doit+0x336>
    176a:	80 91 df 00 	lds	r24, 0x00DF
	}

	tasklet_async event message_t* SubReceive.receive(message_t* msg)
	{
		bool ack = call Config.isAckPacket(msg);
    176e:	8d 7f       	andi	r24, 0xFD	; 253
    1770:	80 93 df 00 	sts	0x00DF, r24

		RADIO_ASSERT( state == STATE_ACK_WAIT || state == STATE_READY );

		if( state == STATE_ACK_WAIT )
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	80 93 61 04 	sts	0x0461, r24
    177a:	10 92 08 06 	sts	0x0608, r1
    177e:	60 91 d5 06 	lds	r22, 0x06D5
    1782:	70 91 d6 06 	lds	r23, 0x06D6
    1786:	11 23       	and	r17, r17
    1788:	19 f0       	breq	.+6      	; 0x1790 <TaskletC__doit+0x328>
    178a:	80 e0       	ldi	r24, 0x00	; 0
		call Alarm.start(timeout);
	}

	tasklet_async command void RadioAlarm.cancel[uint8_t id]()
	{
		RADIO_ASSERT( alarm == id );
		RADIO_ASSERT( state != STATE_READY );

		call Alarm.stop();
		state = STATE_READY;
    178c:	19 d9       	rcall	.-3534   	; 0x9c0 <MetadataFlagsLayerC__0__PacketFlag__set>
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <TaskletC__doit+0x32e>
		{
			RADIO_ASSERT( !ack || call Config.verifyAckPacket(txMsg, msg) );

			call RadioAlarm.cancel();
			call AckReceivedFlag.setValue(txMsg, ack);
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	0e 94 34 02 	call	0x468	; 0x468 <MetadataFlagsLayerC__0__PacketFlag__clear>
    1796:	10 92 77 04 	sts	0x0477, r1
	}

	async command void PacketFlag.setValue[uint8_t bit](message_t* msg, bool value)
	{
		if( value )
    179a:	80 e0       	ldi	r24, 0x00	; 0
			call PacketFlag.set[bit](msg);
    179c:	ae d9       	rcall	.-3236   	; 0xafa <SoftwareAckLayerC__0__RadioSend__sendDone>
    179e:	11 23       	and	r17, r17
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <TaskletC__doit+0x33c>
    17a2:	0b c1       	rjmp	.+534    	; 0x19ba <TaskletC__doit+0x552>
		else
			call PacketFlag.clear[bit](msg);
    17a4:	c5 01       	movw	r24, r10
    17a6:	b6 d9       	rcall	.-3220   	; 0xb14 <RFA1RadioP__Ieee154PacketLayer__requiresAckReply>
    17a8:	88 23       	and	r24, r24

			state = STATE_READY;
    17aa:	a1 f0       	breq	.+40     	; 0x17d4 <TaskletC__doit+0x36c>
    17ac:	85 e0       	ldi	r24, 0x05	; 5
			signal RadioSend.sendDone(SUCCESS);
    17ae:	80 93 ab 05 	sts	0x05AB, r24
    17b2:	82 e0       	ldi	r24, 0x02	; 2
		}

		if( ack )
    17b4:	80 93 ac 05 	sts	0x05AC, r24
    17b8:	10 92 ad 05 	sts	0x05AD, r1
	}

	async command bool SoftwareAckConfig.requiresAckReply(message_t* msg)
	{
		return call Ieee154PacketLayer.requiresAckReply(msg);
    17bc:	f5 01       	movw	r30, r10
    17be:	83 81       	ldd	r24, Z+3	; 0x03
			return msg;

		if( call Config.requiresAckReply(msg) )
    17c0:	80 93 ae 05 	sts	0x05AE, r24
}

inline uint8_t __nesc_hton_leuint8(void * ONE target, uint8_t value) @safe() {
  uint8_t *base = target;
  base[0] = value;
    17c4:	8b ea       	ldi	r24, 0xAB	; 171
    17c6:	95 e0       	ldi	r25, 0x05	; 5
    17c8:	35 dd       	rcall	.-1430   	; 0x1234 <SoftwareAckLayerC__0__SubSend__send>
  return value;
}

__NX_DECLARE_FUNCTIONS(8)
__NX_DECLARE_BF_FUNCTIONS(8)


/* 16-bits */
/* ------- */

inline uint16_t __nesc_ntoh_uint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
  return (uint16_t)base[0] << 8 | base[1];
}

inline uint16_t __nesc_hton_uint16(void * COUNT(2) target, uint16_t value) @safe() {
  uint8_t *base = target;
  base[1] = value;
  base[0] = value >> 8;
  return value;
}

inline uint16_t __nesc_ntoh_leuint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
  return (uint16_t)base[1] << 8 | base[0];
}

inline uint16_t __nesc_hton_leuint16(void * COUNT(2) target, uint16_t value) @safe() {
  uint8_t *base = target;
  base[0] = value;
    17ca:	88 23       	and	r24, r24
    17cc:	19 f4       	brne	.+6      	; 0x17d4 <TaskletC__doit+0x36c>
    17ce:	83 e0       	ldi	r24, 0x03	; 3
  base[1] = value >> 8;
    17d0:	80 93 77 04 	sts	0x0477, r24
    17d4:	0e 94 b0 03 	call	0x760	; 0x760 <CounterToLocalTimeC__1__LocalTime__get>
    17d8:	6b 01       	movw	r12, r22
    17da:	7c 01       	movw	r14, r24
		{
			call Config.createAckPacket(msg, &ackMsg);

			// TODO: what to do if we are busy and cannot send an ack
			if( call SubSend.send(&ackMsg) == SUCCESS )
    17dc:	c5 01       	movw	r24, r10
    17de:	9a d9       	rcall	.-3276   	; 0xb14 <RFA1RadioP__Ieee154PacketLayer__requiresAckReply>
    17e0:	88 23       	and	r24, r24
    17e2:	41 f0       	breq	.+16     	; 0x17f4 <TaskletC__doit+0x38c>
    17e4:	86 e3       	ldi	r24, 0x36	; 54
    17e6:	90 e0       	ldi	r25, 0x00	; 0
				state = STATE_ACK_SEND;
    17e8:	a0 e0       	ldi	r26, 0x00	; 0
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	c8 0e       	add	r12, r24
    17ee:	d9 1e       	adc	r13, r25
    17f0:	ea 1e       	adc	r14, r26
    17f2:	fb 1e       	adc	r15, r27
    17f4:	86 01       	movw	r16, r12
	}

	async command void SoftwareAckConfig.createAckPacket(message_t* data, message_t* ack)
	{
		call Ieee154PacketLayer.createAckReply(data, ack);
	}

#ifndef SOFTWAREACK_TIMEOUT
#define SOFTWAREACK_TIMEOUT	5000
#endif

	async command uint16_t SoftwareAckConfig.getAckTimeout()
	{
		return (uint16_t)(SOFTWAREACK_TIMEOUT * RADIO_ALARM_MICROSEC);
	}

	tasklet_async command void SoftwareAckConfig.reportChannelError()
	{
#ifdef TRAFFIC_MONITOR
//		signal TrafficMonitorConfig.channelError();
#endif
	}

/*----------------- UniqueConfig -----------------*/

	async command uint8_t UniqueConfig.getSequenceNumber(message_t* msg)
	{
		return call Ieee154PacketLayer.getDSN(msg);
	}

	async command void UniqueConfig.setSequenceNumber(message_t* msg, uint8_t dsn)
	{
		call Ieee154PacketLayer.setDSN(msg, dsn);
	}

	async command am_addr_t UniqueConfig.getSender(message_t* msg)
	{
		return call Ieee154PacketLayer.getSrcAddr(msg);
	}

	tasklet_async command void UniqueConfig.reportChannelError()
	{
#ifdef TRAFFIC_MONITOR
//		signal TrafficMonitorConfig.channelError();
#endif
	}

/*----------------- ActiveMessageConfig -----------------*/

	command am_addr_t ActiveMessageConfig.destination(message_t* msg)
	{
		return call Ieee154PacketLayer.getDestAddr(msg);
	}

	command void ActiveMessageConfig.setDestination(message_t* msg, am_addr_t addr)
	{
		call Ieee154PacketLayer.setDestAddr(msg, addr);
	}

	command am_addr_t ActiveMessageConfig.source(message_t* msg)
	{
		return call Ieee154PacketLayer.getSrcAddr(msg);
	}

	command void ActiveMessageConfig.setSource(message_t* msg, am_addr_t addr)
	{
		call Ieee154PacketLayer.setSrcAddr(msg, addr);
	}

	command am_group_t ActiveMessageConfig.group(message_t* msg)
	{
		return call Ieee154PacketLayer.getDestPan(msg);
	}

	command void ActiveMessageConfig.setGroup(message_t* msg, am_group_t grp)
	{
		call Ieee154PacketLayer.setDestPan(msg, grp);
	}

	command error_t ActiveMessageConfig.checkFrame(message_t* msg)
	{
		if( ! call Ieee154PacketLayer.isDataFrame(msg) )
			call Ieee154PacketLayer.createDataFrame(msg);

		return SUCCESS;
	}

/*----------------- CsmaConfig -----------------*/

	async command bool CsmaConfig.requiresSoftwareCCA(message_t* msg)
	{
		return call Ieee154PacketLayer.isDataFrame(msg);
	}

/*----------------- TrafficMonitorConfig -----------------*/

	async command uint16_t TrafficMonitorConfig.getBytes(message_t* msg)
	{
		// pure airtime: preable (4 bytes), SFD (1 byte), length (1 byte), payload + CRC (len bytes)

		return call RFA1Packet.payloadLength(msg) + 6;
	}

/*----------------- RandomCollisionConfig -----------------*/

	/*
	 * We try to use the same values as in CC2420
	 *
	 * CC2420_MIN_BACKOFF = 10 jiffies = 320 microsec
	 * CC2420_BACKOFF_PERIOD = 10 jiffies
	 * initial backoff = 0x1F * CC2420_BACKOFF_PERIOD = 310 jiffies = 9920 microsec
	 * congestion backoff = 0x7 * CC2420_BACKOFF_PERIOD = 70 jiffies = 2240 microsec
	 */

#ifndef LOW_POWER_LISTENING

#ifndef RFA1_BACKOFF_MIN
#define RFA1_BACKOFF_MIN 320
#endif

	async command uint16_t RandomCollisionConfig.getMinimumBackoff()
	{
		return (uint16_t)(RFA1_BACKOFF_MIN * RADIO_ALARM_MICROSEC);
	}

#ifndef RFA1_BACKOFF_INIT
#define RFA1_BACKOFF_INIT 4960		// instead of 9920
#endif

	async command uint16_t RandomCollisionConfig.getInitialBackoff(message_t* msg)
	{
		return (uint16_t)(RFA1_BACKOFF_INIT * RADIO_ALARM_MICROSEC);
	}

#ifndef RFA1_BACKOFF_CONG
#define RFA1_BACKOFF_CONG 2240
#endif

	async command uint16_t RandomCollisionConfig.getCongestionBackoff(message_t* msg)
	{
		return (uint16_t)(RFA1_BACKOFF_CONG * RADIO_ALARM_MICROSEC);
	}

#endif

	async command uint16_t RandomCollisionConfig.getTransmitBarrier(message_t* msg)
	{
		uint32_t time;

		// TODO: maybe we should use the embedded timestamp of the message
		time = call LocalTime.get();

		// estimated response time (download the message, etc) is 5-8 bytes
		if( call Ieee154PacketLayer.requiresAckReply(msg) )
    17f6:	d0 92 df 05 	sts	0x05DF, r13
    17fa:	c0 92 de 05 	sts	0x05DE, r12
    17fe:	0e 94 ac 03 	call	0x758	; 0x758 <RandomCollisionLayerP__0__RadioAlarm__getNow>
			time += 32 * (-5 + 16 + 11 + 5) * RADIO_ALARM_MICROSEC;
    1802:	06 1b       	sub	r16, r22
    1804:	17 0b       	sbc	r17, r23
    1806:	10 16       	cp	r1, r16
    1808:	11 06       	cpc	r1, r17
    180a:	bc f4       	brge	.+46     	; 0x183a <TaskletC__doit+0x3d2>
    180c:	80 91 97 05 	lds	r24, 0x0597
		else
			time += 32 * (-5 + 5) * RADIO_ALARM_MICROSEC;

		return time;
    1810:	88 23       	and	r24, r24
	}

	tasklet_async event bool SubReceive.header(message_t* msg)
	{
		return signal RadioReceive.header(msg);
	}

	tasklet_async event message_t* SubReceive.receive(message_t* msg)
	{
		int16_t delay;

		txBarrier = call Config.getTransmitBarrier(msg);
    1812:	81 f4       	brne	.+32     	; 0x1834 <TaskletC__doit+0x3cc>
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	80 91 08 06 	lds	r24, 0x0608
		delay = txBarrier - call RadioAlarm.getNow();
    181a:	88 23       	and	r24, r24
    181c:	09 f4       	brne	.+2      	; 0x1820 <TaskletC__doit+0x3b8>
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	99 23       	and	r25, r25

		if( delay > 0 )
    1822:	59 f0       	breq	.+22     	; 0x183a <TaskletC__doit+0x3d2>
    1824:	b8 01       	movw	r22, r16
    1826:	88 27       	eor	r24, r24
		{
			if( state == STATE_READY )
    1828:	77 fd       	sbrc	r23, 7
    182a:	80 95       	com	r24
    182c:	98 2f       	mov	r25, r24
    182e:	a1 d9       	rcall	.-3262   	; 0xb72 <RandomCollisionLayerP__0__RadioAlarm__wait>
			{
				// disregard the barrier for now, this needs a better solution
				if( call RadioAlarm.isFree() )
    1830:	80 e8       	ldi	r24, 0x80	; 128
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <TaskletC__doit+0x3ce>
    1834:	80 68       	ori	r24, 0x80	; 128
    1836:	80 93 97 05 	sts	0x0597, r24
    183a:	75 01       	movw	r14, r10
    183c:	08 94       	sec
    183e:	e1 1c       	adc	r14, r1
				{
					call RadioAlarm.wait(delay);
    1840:	f1 1c       	adc	r15, r1
    1842:	f5 01       	movw	r30, r10
    1844:	81 85       	ldd	r24, Z+9	; 0x09
    1846:	20 85       	ldd	r18, Z+8	; 0x08
    1848:	99 27       	eor	r25, r25
    184a:	58 2f       	mov	r21, r24
    184c:	44 27       	eor	r20, r20
					state = STATE_BARRIER;
    184e:	33 27       	eor	r19, r19
    1850:	42 2b       	or	r20, r18
				}
			}
			else
				state |= STATE_BARRIER;
    1852:	53 2b       	or	r21, r19
    1854:	80 91 78 04 	lds	r24, 0x0478
    1858:	28 2f       	mov	r18, r24
    185a:	33 27       	eor	r19, r19
    185c:	f9 01       	movw	r30, r18
    185e:	ee 0f       	add	r30, r30
}

inline uint16_t __nesc_ntoh_leuint16(const void * COUNT(2) source) @safe() {
  const uint8_t *base = source;
  return (uint16_t)base[1] << 8 | base[0];
    1860:	ff 1f       	adc	r31, r31
    1862:	e1 5e       	subi	r30, 0xE1	; 225
    1864:	f9 4f       	sbci	r31, 0xF9	; 249
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	70 91 09 06 	lds	r23, 0x0609
    186e:	84 17       	cp	r24, r20
    1870:	95 07       	cpc	r25, r21
	{
		uint8_t i;
		uint8_t maxAge;

		if( nodes[last] == node )
    1872:	69 f4       	brne	.+26     	; 0x188e <TaskletC__doit+0x426>
    1874:	f9 01       	movw	r30, r18
    1876:	e1 53       	subi	r30, 0x31	; 49
    1878:	f9 4f       	sbci	r31, 0xF9	; 249
    187a:	80 81       	ld	r24, Z
    187c:	87 17       	cp	r24, r23
    187e:	09 f4       	brne	.+2      	; 0x1882 <TaskletC__doit+0x41a>
    1880:	67 c0       	rjmp	.+206    	; 0x1950 <TaskletC__doit+0x4e8>
    1882:	87 2f       	mov	r24, r23
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	80 93 09 06 	sts	0x0609, r24
    188a:	80 83       	st	Z, r24
    188c:	1d c0       	rjmp	.+58     	; 0x18c8 <TaskletC__doit+0x460>
    188e:	00 e0       	ldi	r16, 0x00	; 0
    1890:	10 e0       	ldi	r17, 0x00	; 0
		{
			if( ages[last] == time )
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	cf e1       	ldi	r28, 0x1F	; 31
    1898:	d6 e0       	ldi	r29, 0x06	; 6
    189a:	ef ec       	ldi	r30, 0xCF	; 207
    189c:	f6 e0       	ldi	r31, 0x06	; 6
    189e:	df 01       	movw	r26, r30
				return last;

			ages[last] = ++time;
    18a0:	68 2f       	mov	r22, r24
    18a2:	9c 01       	movw	r18, r24
    18a4:	88 81       	ld	r24, Y
    18a6:	99 81       	ldd	r25, Y+1	; 0x01
    18a8:	84 17       	cp	r24, r20
    18aa:	95 07       	cpc	r25, r21
			maxAge = 0x80;
		}
		else
		{
			uint8_t oldest = 0;
			maxAge = 0;

			for(i = 0; i < NEIGHBORHOOD_SIZE; ++i)
			{
				uint8_t age;

				if( nodes[i] == node )
				{
					last = i;
					if( ages[i] == time )
						return i;

					ages[i] = ++time;
					maxAge = 0x80;
					break;
				}

				age = time - ages[i];
    18ac:	79 f4       	brne	.+30     	; 0x18cc <TaskletC__doit+0x464>
    18ae:	20 93 78 04 	sts	0x0478, r18
    18b2:	90 91 09 06 	lds	r25, 0x0609
    18b6:	8c 91       	ld	r24, X
    18b8:	89 17       	cp	r24, r25
    18ba:	09 f4       	brne	.+2      	; 0x18be <TaskletC__doit+0x456>
    18bc:	49 c0       	rjmp	.+146    	; 0x1950 <TaskletC__doit+0x4e8>
    18be:	89 2f       	mov	r24, r25
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 09 06 	sts	0x0609, r24
    18c6:	8c 93       	st	X, r24
    18c8:	00 e8       	ldi	r16, 0x80	; 128
    18ca:	29 c0       	rjmp	.+82     	; 0x191e <TaskletC__doit+0x4b6>
    18cc:	80 81       	ld	r24, Z
    18ce:	97 2f       	mov	r25, r23
    18d0:	98 1b       	sub	r25, r24
    18d2:	09 17       	cp	r16, r25
    18d4:	10 f4       	brcc	.+4      	; 0x18da <TaskletC__doit+0x472>
    18d6:	09 2f       	mov	r16, r25
    18d8:	12 2f       	mov	r17, r18
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	c9 01       	movw	r24, r18
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	22 96       	adiw	r28, 0x02	; 2
    18e4:	31 96       	adiw	r30, 0x01	; 1
    18e6:	85 30       	cpi	r24, 0x05	; 5
    18e8:	91 05       	cpc	r25, r1
    18ea:	d1 f6       	brne	.-76     	; 0x18a0 <TaskletC__doit+0x438>
    18ec:	65 30       	cpi	r22, 0x05	; 5
    18ee:	b9 f4       	brne	.+46     	; 0x191e <TaskletC__doit+0x4b6>
				if( age > maxAge )
    18f0:	10 93 78 04 	sts	0x0478, r17
    18f4:	a1 2f       	mov	r26, r17
    18f6:	bb 27       	eor	r27, r27
    18f8:	fd 01       	movw	r30, r26
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	e1 5e       	subi	r30, 0xE1	; 225
    1900:	f9 4f       	sbci	r31, 0xF9	; 249
    1902:	51 83       	std	Z+1, r21	; 0x01
    1904:	40 83       	st	Z, r20
    1906:	80 91 09 06 	lds	r24, 0x0609
				{
					maxAge = age;
					oldest = i;
				}
			}

			if( i == NEIGHBORHOOD_SIZE )
    190a:	8f 5f       	subi	r24, 0xFF	; 255
    190c:	80 93 09 06 	sts	0x0609, r24
			{
				signal Neighborhood.evicted(oldest);

				last = oldest;
    1910:	fd 01       	movw	r30, r26
				nodes[oldest] = node;
    1912:	e1 53       	subi	r30, 0x31	; 49
    1914:	f9 4f       	sbci	r31, 0xF9	; 249
    1916:	80 83       	st	Z, r24
    1918:	a5 5f       	subi	r26, 0xF5	; 245
    191a:	b8 4f       	sbci	r27, 0xF8	; 248
    191c:	1c 92       	st	X, r1
    191e:	90 91 09 06 	lds	r25, 0x0609
    1922:	89 2f       	mov	r24, r25
				ages[oldest] = ++time;
    1924:	8f 77       	andi	r24, 0x7F	; 127
    1926:	8f 37       	cpi	r24, 0x7F	; 127
    1928:	79 f4       	brne	.+30     	; 0x1948 <TaskletC__doit+0x4e0>
    192a:	0f 37       	cpi	r16, 0x7F	; 127
    192c:	68 f0       	brcs	.+26     	; 0x1948 <TaskletC__doit+0x4e0>
    192e:	ef ec       	ldi	r30, 0xCF	; 207
    1930:	f6 e0       	ldi	r31, 0x06	; 6
    1932:	29 2f       	mov	r18, r25
    1934:	20 78       	andi	r18, 0x80	; 128
				flags[oldest] = 0;
    1936:	80 81       	ld	r24, Z
    1938:	8f 67       	ori	r24, 0x7F	; 127
    193a:	89 13       	cpse	r24, r25
			}
		}

		if( (time & 0x7F) == 0x7F && maxAge >= 0x7F )
    193c:	20 83       	st	Z, r18
    193e:	31 96       	adiw	r30, 0x01	; 1
    1940:	a6 e0       	ldi	r26, 0x06	; 6
    1942:	e4 3d       	cpi	r30, 0xD4	; 212
    1944:	fa 07       	cpc	r31, r26
    1946:	b9 f7       	brne	.-18     	; 0x1936 <TaskletC__doit+0x4ce>
    1948:	80 91 78 04 	lds	r24, 0x0478
    194c:	28 2f       	mov	r18, r24
    194e:	33 27       	eor	r19, r19
    1950:	f7 01       	movw	r30, r14
    1952:	92 81       	ldd	r25, Z+2	; 0x02
		{
			for(i = 0; i < NEIGHBORHOOD_SIZE; ++i)
			{
				if( (ages[i] | 0x7F) != time )
    1954:	a2 2f       	mov	r26, r18
    1956:	bb 27       	eor	r27, r27
    1958:	fd 01       	movw	r30, r26
					ages[i] = time & 0x80;
    195a:	e5 5f       	subi	r30, 0xF5	; 245
    195c:	f8 4f       	sbci	r31, 0xF8	; 248
    195e:	80 81       	ld	r24, Z
    1960:	80 ff       	sbrs	r24, 0
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <TaskletC__doit+0x50a>
    1964:	fd 01       	movw	r30, r26
			}
		}

		return last;
    1966:	e8 5e       	subi	r30, 0xE8	; 232
    1968:	f9 4f       	sbci	r31, 0xF9	; 249
    196a:	80 81       	ld	r24, Z
    196c:	98 17       	cp	r25, r24

	tasklet_async event message_t* SubReceive.receive(message_t* msg)
	{
		uint8_t idx = call Neighborhood.insertNode(call UniqueConfig.getSender(msg));
		uint8_t dsn = call UniqueConfig.getSequenceNumber(msg);
    196e:	29 f1       	breq	.+74     	; 0x19ba <TaskletC__doit+0x552>
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <TaskletC__doit+0x50e>
	}

	inline tasklet_async command bool NeighborhoodFlag.get[uint8_t bit](uint8_t idx)
	{
		return flags[idx] & (1 << bit);
    1972:	81 60       	ori	r24, 0x01	; 1
    1974:	80 83       	st	Z, r24
    1976:	a8 5e       	subi	r26, 0xE8	; 232
    1978:	b9 4f       	sbci	r27, 0xF9	; 249
    197a:	9c 93       	st	X, r25
    197c:	ff b6       	in	r15, 0x3f	; 63

		if( call NeighborhoodFlag.get(idx) )
    197e:	f8 94       	cli
    1980:	80 91 17 06 	lds	r24, 0x0617
		{
			uint8_t diff = dsn - receivedNumbers[idx];

			if( diff == 0 )
    1984:	83 30       	cpi	r24, 0x03	; 3
    1986:	b0 f4       	brcc	.+44     	; 0x19b4 <TaskletC__doit+0x54c>
    1988:	e0 91 34 06 	lds	r30, 0x0634
    198c:	e8 0f       	add	r30, r24
    198e:	e3 30       	cpi	r30, 0x03	; 3
	}

	inline tasklet_async command void NeighborhoodFlag.set[uint8_t bit](uint8_t idx)
	{
		flags[idx] |= (1 << bit);
    1990:	08 f0       	brcs	.+2      	; 0x1994 <TaskletC__doit+0x52c>
    1992:	e3 50       	subi	r30, 0x03	; 3
			{
				call UniqueConfig.reportChannelError();
				return msg;
			}
		}
		else
			call NeighborhoodFlag.set(idx);

		receivedNumbers[idx] = dsn;
    1994:	ff 27       	eor	r31, r31
    1996:	ee 0f       	add	r30, r30
    1998:	ff 1f       	adc	r31, r31
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    199a:	e1 59       	subi	r30, 0x91	; 145
    199c:	fb 4f       	sbci	r31, 0xFB	; 251
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    199e:	00 81       	ld	r16, Z
    19a0:	11 81       	ldd	r17, Z+1	; 0x01
    19a2:	b1 82       	std	Z+1, r11	; 0x01
    19a4:	a0 82       	st	Z, r10
		}
	}

	tasklet_async event void Tasklet.run()
	{
	}

	command error_t Send.cancel(message_t* msg)
	{
		error_t result;

		call Tasklet.suspend();

		RADIO_ASSERT( msg == txMsg );

		if( state == STATE_TX_PENDING || state == STATE_TX_RETRY )
		{
			state = STATE_TX_DONE;
			txError = ECANCEL;
			result = SUCCESS;

			post sendTask();
		}
		else
			result = EBUSY;

		call Tasklet.resume();

		return result;
	}

/*----------------- Receive -----------------*/

	enum
	{
		RECEIVE_QUEUE_SIZE = 3,
	};

	message_t receiveQueueData[RECEIVE_QUEUE_SIZE];
	message_t* receiveQueue[RECEIVE_QUEUE_SIZE];

	uint8_t receiveQueueHead;
	uint8_t receiveQueueSize;

	command error_t SoftwareInit.init()
	{
		uint8_t i;

		for(i = 0; i < RECEIVE_QUEUE_SIZE; ++i)
			receiveQueue[i] = receiveQueueData + i;

		return SUCCESS;
	}

	tasklet_async event bool RadioReceive.header(message_t* msg)
	{
		bool notFull;

		// this prevents undeliverable messages to be acknowledged
		atomic notFull = receiveQueueSize < RECEIVE_QUEUE_SIZE;

		return notFull;
	}

	task void deliverTask()
	{
		// get rid of as many messages as possible without interveining tasks
		for(;;)
		{
			message_t* msg;

			atomic
			{
				if( receiveQueueSize == 0 )
					return;

				msg = receiveQueue[receiveQueueHead];
			}

			msg = signal Receive.receive(msg);

			atomic
			{
				receiveQueue[receiveQueueHead] = msg;

				if( ++receiveQueueHead >= RECEIVE_QUEUE_SIZE )
					receiveQueueHead = 0;

				--receiveQueueSize;
			}
		}
	}

	tasklet_async event message_t* RadioReceive.receive(message_t* msg)
	{
		message_t *m;

		atomic
		{
			if( receiveQueueSize >= RECEIVE_QUEUE_SIZE )
				m = msg;
			else
			{
				uint8_t idx = receiveQueueHead + receiveQueueSize;
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	80 93 17 06 	sts	0x0617, r24
				if( idx >= RECEIVE_QUEUE_SIZE )
    19ac:	81 e1       	ldi	r24, 0x11	; 17
    19ae:	0e 94 9d 02 	call	0x53a	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
					idx -= RECEIVE_QUEUE_SIZE;

				m = receiveQueue[idx];
    19b2:	58 01       	movw	r10, r16
    19b4:	8f 2d       	mov	r24, r15
    19b6:	99 27       	eor	r25, r25
    19b8:	8f bf       	out	0x3f, r24	; 63
    19ba:	b0 92 0a 07 	sts	0x070A, r11
    19be:	a0 92 09 07 	sts	0x0709, r10
				receiveQueue[idx] = msg;
    19c2:	63 c0       	rjmp	.+198    	; 0x1a8a <TaskletC__doit+0x622>

				++receiveQueueSize;
    19c4:	29 2f       	mov	r18, r25
    19c6:	21 50       	subi	r18, 0x01	; 1
    19c8:	23 30       	cpi	r18, 0x03	; 3
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <TaskletC__doit+0x566>
    19cc:	49 c0       	rjmp	.+146    	; 0x1a60 <TaskletC__doit+0x5f8>
    19ce:	89 2f       	mov	r24, r25
    19d0:	82 50       	subi	r24, 0x02	; 2
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	70 f4       	brcc	.+28     	; 0x19f2 <TaskletC__doit+0x58a>
  SREG = original_SREG;
    19d6:	80 91 aa 05 	lds	r24, 0x05AA
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	51 f4       	brne	.+20     	; 0x19f2 <TaskletC__doit+0x58a>
    19de:	8d ec       	ldi	r24, 0xCD	; 205
    19e0:	80 93 4e 01 	sts	0x014E, r24
    19e4:	80 91 39 01 	lds	r24, 0x0139
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	80 93 39 01 	sts	0x0139, r24
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	1c c0       	rjmp	.+56     	; 0x1a2a <TaskletC__doit+0x5c2>
    19f2:	93 30       	cpi	r25, 0x03	; 3
    19f4:	71 f4       	brne	.+28     	; 0x1a12 <TaskletC__doit+0x5aa>
    19f6:	80 91 aa 05 	lds	r24, 0x05AA
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	51 f4       	brne	.+20     	; 0x1a12 <TaskletC__doit+0x5aa>
    19fe:	80 91 ce 06 	lds	r24, 0x06CE
    1a02:	80 66       	ori	r24, 0x60	; 96
    1a04:	80 93 48 01 	sts	0x0148, r24
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	80 93 42 01 	sts	0x0142, r24
    1a0e:	84 e0       	ldi	r24, 0x04	; 4
    1a10:	0c c0       	rjmp	.+24     	; 0x1a2a <TaskletC__doit+0x5c2>
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	60 f4       	brcc	.+24     	; 0x1a2e <TaskletC__doit+0x5c6>
    1a16:	80 91 aa 05 	lds	r24, 0x05AA
    1a1a:	85 30       	cpi	r24, 0x05	; 5
    1a1c:	41 f4       	brne	.+16     	; 0x1a2e <TaskletC__doit+0x5c6>
    1a1e:	88 e0       	ldi	r24, 0x08	; 8
    1a20:	80 93 42 01 	sts	0x0142, r24
    1a24:	10 92 16 06 	sts	0x0616, r1
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	80 93 aa 05 	sts	0x05AA, r24
    1a2e:	90 91 8f 04 	lds	r25, 0x048F
    1a32:	91 30       	cpi	r25, 0x01	; 1
    1a34:	71 f4       	brne	.+28     	; 0x1a52 <TaskletC__doit+0x5ea>
    1a36:	80 91 aa 05 	lds	r24, 0x05AA
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	79 f5       	brne	.+94     	; 0x1a9c <TaskletC__doit+0x634>
    1a3e:	10 92 4e 01 	sts	0x014E, r1
    1a42:	80 91 39 01 	lds	r24, 0x0139
    1a46:	82 60       	ori	r24, 0x02	; 2
    1a48:	80 93 39 01 	sts	0x0139, r24
    1a4c:	90 93 aa 05 	sts	0x05AA, r25
    1a50:	18 c0       	rjmp	.+48     	; 0x1a82 <TaskletC__doit+0x61a>
    1a52:	92 30       	cpi	r25, 0x02	; 2
    1a54:	d1 f4       	brne	.+52     	; 0x1a8a <TaskletC__doit+0x622>
    1a56:	80 91 aa 05 	lds	r24, 0x05AA
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	f9 f4       	brne	.+62     	; 0x1a9c <TaskletC__doit+0x634>
    1a5e:	11 c0       	rjmp	.+34     	; 0x1a82 <TaskletC__doit+0x61a>
    1a60:	97 30       	cpi	r25, 0x07	; 7
    1a62:	99 f4       	brne	.+38     	; 0x1a8a <TaskletC__doit+0x622>
    1a64:	80 91 aa 05 	lds	r24, 0x05AA
    1a68:	85 30       	cpi	r24, 0x05	; 5
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <TaskletC__doit+0x608>
    1a6c:	88 23       	and	r24, r24
    1a6e:	49 f4       	brne	.+18     	; 0x1a82 <TaskletC__doit+0x61a>
    1a70:	80 91 ce 06 	lds	r24, 0x06CE
    1a74:	80 66       	ori	r24, 0x60	; 96
    1a76:	80 93 48 01 	sts	0x0148, r24
    1a7a:	84 e0       	ldi	r24, 0x04	; 4
    1a7c:	80 93 aa 05 	sts	0x05AA, r24
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <TaskletC__doit+0x622>
    1a82:	88 e0       	ldi	r24, 0x08	; 8
    1a84:	80 93 8f 04 	sts	0x048F, r24
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <TaskletC__doit+0x62a>
    1a8a:	80 91 8f 04 	lds	r24, 0x048F
    1a8e:	88 30       	cpi	r24, 0x08	; 8
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <TaskletC__doit+0x634>
    1a92:	10 92 8f 04 	sts	0x048F, r1
    1a96:	8f e0       	ldi	r24, 0x0F	; 15
    1a98:	0e 94 9d 02 	call	0x53a	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
    1a9c:	80 91 8f 04 	lds	r24, 0x048F
    1aa0:	88 23       	and	r24, r24
    1aa2:	c9 f4       	brne	.+50     	; 0x1ad6 <TaskletC__doit+0x66e>
    1aa4:	80 91 aa 05 	lds	r24, 0x05AA
    1aa8:	85 30       	cpi	r24, 0x05	; 5
    1aaa:	a9 f4       	brne	.+42     	; 0x1ad6 <TaskletC__doit+0x66e>
    1aac:	80 91 16 06 	lds	r24, 0x0616
    1ab0:	88 23       	and	r24, r24
    1ab2:	89 f4       	brne	.+34     	; 0x1ad6 <TaskletC__doit+0x66e>
    1ab4:	80 91 77 04 	lds	r24, 0x0477
    1ab8:	88 23       	and	r24, r24
    1aba:	69 f4       	brne	.+26     	; 0x1ad6 <TaskletC__doit+0x66e>
    1abc:	80 91 97 05 	lds	r24, 0x0597
    1ac0:	88 23       	and	r24, r24
    1ac2:	49 f4       	brne	.+18     	; 0x1ad6 <TaskletC__doit+0x66e>
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	80 91 08 06 	lds	r24, 0x0608
    1aca:	88 23       	and	r24, r24
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <TaskletC__doit+0x668>
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	99 23       	and	r25, r25
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <TaskletC__doit+0x66e>
    1ad4:	52 d8       	rcall	.-3932   	; 0xb7a <RandomCollisionLayerP__0__RadioSend__ready>
    1ad6:	80 91 08 06 	lds	r24, 0x0608
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <TaskletC__doit+0x678>
    1ade:	72 c0       	rjmp	.+228    	; 0x1bc4 <TaskletC__doit+0x75c>
    1ae0:	10 92 08 06 	sts	0x0608, r1
    1ae4:	80 91 a7 05 	lds	r24, 0x05A7
    1ae8:	88 23       	and	r24, r24
    1aea:	21 f0       	breq	.+8      	; 0x1af4 <TaskletC__doit+0x68c>
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <TaskletC__doit+0x68a>
    1af0:	69 c0       	rjmp	.+210    	; 0x1bc4 <TaskletC__doit+0x75c>
    1af2:	63 c0       	rjmp	.+198    	; 0x1bba <TaskletC__doit+0x752>
    1af4:	c0 91 de 05 	lds	r28, 0x05DE
    1af8:	d0 91 df 05 	lds	r29, 0x05DF
    1afc:	0e 94 ac 03 	call	0x758	; 0x758 <RandomCollisionLayerP__0__RadioAlarm__getNow>
    1b00:	20 91 97 05 	lds	r18, 0x0597
    1b04:	20 38       	cpi	r18, 0x80	; 128
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <TaskletC__doit+0x6a8>
    1b08:	10 92 97 05 	sts	0x0597, r1
    1b0c:	36 d8       	rcall	.-3988   	; 0xb7a <RandomCollisionLayerP__0__RadioSend__ready>
    1b0e:	5a c0       	rjmp	.+180    	; 0x1bc4 <TaskletC__doit+0x75c>
    1b10:	8e 01       	movw	r16, r28
    1b12:	06 1b       	sub	r16, r22
    1b14:	17 0b       	sbc	r17, r23
    1b16:	27 ff       	sbrs	r18, 7
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <TaskletC__doit+0x6b8>
    1b1a:	10 16       	cp	r1, r16
    1b1c:	11 06       	cpc	r1, r17
    1b1e:	e4 f0       	brlt	.+56     	; 0x1b58 <TaskletC__doit+0x6f0>
    1b20:	c0 91 93 05 	lds	r28, 0x0593
    1b24:	d0 91 94 05 	lds	r29, 0x0594
    1b28:	80 91 77 04 	lds	r24, 0x0477
    1b2c:	88 23       	and	r24, r24
    1b2e:	a1 f4       	brne	.+40     	; 0x1b58 <TaskletC__doit+0x6f0>
    1b30:	ce 01       	movw	r24, r28
    1b32:	80 db       	rcall	.-2304   	; 0x1234 <SoftwareAckLayerC__0__SubSend__send>
    1b34:	88 23       	and	r24, r24
    1b36:	59 f4       	brne	.+22     	; 0x1b4e <TaskletC__doit+0x6e6>
    1b38:	be 01       	movw	r22, r28
    1b3a:	0e 94 34 02 	call	0x468	; 0x468 <MetadataFlagsLayerC__0__PacketFlag__clear>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 77 04 	sts	0x0477, r24
    1b44:	d0 93 d6 06 	sts	0x06D6, r29
    1b48:	c0 93 d5 06 	sts	0x06D5, r28
    1b4c:	32 c0       	rjmp	.+100    	; 0x1bb2 <TaskletC__doit+0x74a>
    1b4e:	99 27       	eor	r25, r25
    1b50:	f8 2e       	mov	r15, r24
    1b52:	88 23       	and	r24, r24
    1b54:	71 f1       	breq	.+92     	; 0x1bb2 <TaskletC__doit+0x74a>
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <TaskletC__doit+0x6f4>
    1b58:	85 e0       	ldi	r24, 0x05	; 5
    1b5a:	f8 2e       	mov	r15, r24
    1b5c:	20 91 97 05 	lds	r18, 0x0597
    1b60:	82 2f       	mov	r24, r18
    1b62:	99 27       	eor	r25, r25
    1b64:	8f 77       	andi	r24, 0x7F	; 127
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	71 f4       	brne	.+28     	; 0x1b86 <TaskletC__doit+0x71e>
    1b6a:	20 78       	andi	r18, 0x80	; 128
    1b6c:	22 60       	ori	r18, 0x02	; 2
    1b6e:	20 93 97 05 	sts	0x0597, r18
    1b72:	8c e8       	ldi	r24, 0x8C	; 140
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0a d8       	rcall	.-4076   	; 0xb8c <RandomCollisionLayerP__0__getBackoff>
    1b78:	aa 27       	eor	r26, r26
    1b7a:	bb 27       	eor	r27, r27
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 b9 05 	call	0xb72	; 0xb72 <RandomCollisionLayerP__0__RadioAlarm__wait>
    1b84:	1f c0       	rjmp	.+62     	; 0x1bc4 <TaskletC__doit+0x75c>
    1b86:	27 ff       	sbrs	r18, 7
    1b88:	0e c0       	rjmp	.+28     	; 0x1ba6 <TaskletC__doit+0x73e>
    1b8a:	10 16       	cp	r1, r16
    1b8c:	11 06       	cpc	r1, r17
    1b8e:	5c f4       	brge	.+22     	; 0x1ba6 <TaskletC__doit+0x73e>
    1b90:	80 e8       	ldi	r24, 0x80	; 128
    1b92:	80 93 97 05 	sts	0x0597, r24
    1b96:	b8 01       	movw	r22, r16
    1b98:	88 27       	eor	r24, r24
    1b9a:	77 fd       	sbrc	r23, 7
    1b9c:	80 95       	com	r24
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	0e 94 b9 05 	call	0xb72	; 0xb72 <RandomCollisionLayerP__0__RadioAlarm__wait>
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <TaskletC__doit+0x742>
    1ba6:	10 92 97 05 	sts	0x0597, r1
    1baa:	8f 2d       	mov	r24, r15
    1bac:	0e 94 73 05 	call	0xae6	; 0xae6 <RandomCollisionLayerP__0__RadioSend__sendDone>
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <TaskletC__doit+0x75c>
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	80 93 97 05 	sts	0x0597, r24
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <TaskletC__doit+0x75c>
    1bba:	10 92 77 04 	sts	0x0477, r1
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	0e 94 7d 05 	call	0xafa	; 0xafa <SoftwareAckLayerC__0__RadioSend__sendDone>
    1bc4:	8f b7       	in	r24, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	28 2f       	mov	r18, r24
    1bca:	33 27       	eor	r19, r19
    1bcc:	80 91 92 04 	lds	r24, 0x0492
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	a9 f0       	breq	.+42     	; 0x1bfe <TaskletC__doit+0x796>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 92 04 	sts	0x0492, r24
    1bda:	2f bf       	out	0x3f, r18	; 63
    1bdc:	53 cc       	rjmp	.-1882   	; 0x1484 <TaskletC__doit+0x1c>
    1bde:	80 91 4c 01 	lds	r24, 0x014C
    1be2:	8f 77       	andi	r24, 0x7F	; 127
    1be4:	80 93 4c 01 	sts	0x014C, r24
    1be8:	80 91 4c 01 	lds	r24, 0x014C
    sei();
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
    1bec:	80 68       	ori	r24, 0x80	; 128
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1bee:	80 93 4c 01 	sts	0x014C, r24
		for(;;)
		{
			signal Tasklet.run();

			atomic
			{
				if( state == 1 )
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	80 93 aa 05 	sts	0x05AA, r24
    1bf8:	10 92 8f 04 	sts	0x048F, r1
				{
					state = 0;
					return;
				}

				RADIO_ASSERT( state == 0x81 );
				state = 1;
    1bfc:	4f cf       	rjmp	.-354    	; 0x1a9c <TaskletC__doit+0x634>
    1bfe:	10 92 92 04 	sts	0x0492, r1
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1c02:	2f bf       	out	0x3f, r18	; 63
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	bf 90       	pop	r11
    1c16:	af 90       	pop	r10
    1c18:	9f 90       	pop	r9
    1c1a:	8f 90       	pop	r8
    1c1c:	7f 90       	pop	r7
    1c1e:	6f 90       	pop	r6
    1c20:	08 95       	ret

00001c22 <MessageBufferLayerP__0__Tasklet__resume>:

	/**
	 * Leaves the critical section. This call is conly possible from 
	 * task context. If there were scheduled executions of the run
	 * event, then those will be called before this command returns.
	 */
	command void resume();
    1c22:	8f b7       	in	r24, 0x3f	; 63
    1c24:	f8 94       	cli
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1c26:	28 2f       	mov	r18, r24
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1c28:	33 27       	eor	r19, r19
			}
		}
	}

	inline command void Tasklet.suspend()
	{
		atomic ++state;
	}

	command void Tasklet.resume()
	{
		atomic
		{
			if( --state != 0x80 )
    1c2a:	80 91 92 04 	lds	r24, 0x0492
    1c2e:	81 50       	subi	r24, 0x01	; 1
    1c30:	80 93 92 04 	sts	0x0492, r24
    1c34:	80 38       	cpi	r24, 0x80	; 128
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <MessageBufferLayerP__0__Tasklet__resume+0x1a>
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1c38:	2f bf       	out	0x3f, r18	; 63
    1c3a:	08 95       	ret
				return;

			state = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	80 93 92 04 	sts	0x0492, r24
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1c42:	2f bf       	out	0x3f, r18	; 63
		}

		doit();
    1c44:	11 cc       	rjmp	.-2014   	; 0x1468 <TaskletC__doit>

00001c46 <TaskletC__Tasklet__schedule>:
	}

	async command void Tasklet.schedule()
	{
    1c46:	80 91 92 04 	lds	r24, 0x0492
    1c4a:	88 23       	and	r24, r24
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <TaskletC__Tasklet__schedule+0x10>
		atomic
		{
			if( state != 0 )
			{
				state |= 0x80;
    1c4e:	80 68       	ori	r24, 0x80	; 128
    1c50:	80 93 92 04 	sts	0x0492, r24
    1c54:	08 95       	ret
				return;
			}

			state = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 92 04 	sts	0x0492, r24
		}

		doit();
    1c5c:	05 cc       	rjmp	.-2038   	; 0x1468 <TaskletC__doit>

00001c5e <RFA1DriverLayerP__Tasklet__schedule>:
    1c5e:	f3 cf       	rjmp	.-26     	; 0x1c46 <TaskletC__Tasklet__schedule>
    1c60:	08 95       	ret

00001c62 <__vector_61>:
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
    1c84:	80 91 16 06 	lds	r24, 0x0616
    1c88:	80 61       	ori	r24, 0x10	; 16
    1c8a:	80 93 16 06 	sts	0x0616, r24
    1c8e:	e7 df       	rcall	.-50     	; 0x1c5e <RFA1DriverLayerP__Tasklet__schedule>
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	0f 90       	pop	r0
    1cae:	1f 90       	pop	r1
    1cb0:	18 95       	reti

00001cb2 <__vector_64>:
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	2f 93       	push	r18
    1cbe:	3f 93       	push	r19
    1cc0:	4f 93       	push	r20
    1cc2:	5f 93       	push	r21
    1cc4:	6f 93       	push	r22
    1cc6:	7f 93       	push	r23
    1cc8:	8f 93       	push	r24
    1cca:	9f 93       	push	r25
    1ccc:	af 93       	push	r26
    1cce:	bf 93       	push	r27
    1cd0:	ef 93       	push	r30
    1cd2:	ff 93       	push	r31
    1cd4:	80 91 16 06 	lds	r24, 0x0616
    1cd8:	80 68       	ori	r24, 0x80	; 128
    1cda:	80 93 16 06 	sts	0x0616, r24
    1cde:	bf df       	rcall	.-130    	; 0x1c5e <RFA1DriverLayerP__Tasklet__schedule>
    1ce0:	ff 91       	pop	r31
    1ce2:	ef 91       	pop	r30
    1ce4:	bf 91       	pop	r27
    1ce6:	af 91       	pop	r26
    1ce8:	9f 91       	pop	r25
    1cea:	8f 91       	pop	r24
    1cec:	7f 91       	pop	r23
    1cee:	6f 91       	pop	r22
    1cf0:	5f 91       	pop	r21
    1cf2:	4f 91       	pop	r20
    1cf4:	3f 91       	pop	r19
    1cf6:	2f 91       	pop	r18
    1cf8:	0f 90       	pop	r0
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	0f 90       	pop	r0
    1cfe:	1f 90       	pop	r1
    1d00:	18 95       	reti

00001d02 <__vector_57>:
    1d02:	1f 92       	push	r1
    1d04:	0f 92       	push	r0
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	0f 92       	push	r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	2f 93       	push	r18
    1d0e:	3f 93       	push	r19
    1d10:	4f 93       	push	r20
    1d12:	5f 93       	push	r21
    1d14:	6f 93       	push	r22
    1d16:	7f 93       	push	r23
    1d18:	8f 93       	push	r24
    1d1a:	9f 93       	push	r25
    1d1c:	af 93       	push	r26
    1d1e:	bf 93       	push	r27
    1d20:	ef 93       	push	r30
    1d22:	ff 93       	push	r31
    1d24:	80 91 16 06 	lds	r24, 0x0616
    1d28:	81 60       	ori	r24, 0x01	; 1
    1d2a:	80 93 16 06 	sts	0x0616, r24
    1d2e:	97 df       	rcall	.-210    	; 0x1c5e <RFA1DriverLayerP__Tasklet__schedule>
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	0f 90       	pop	r0
    1d4e:	1f 90       	pop	r1
    1d50:	18 95       	reti

00001d52 <__vector_63>:
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	0f 92       	push	r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	2f 93       	push	r18
    1d5e:	3f 93       	push	r19
    1d60:	4f 93       	push	r20
    1d62:	5f 93       	push	r21
    1d64:	6f 93       	push	r22
    1d66:	7f 93       	push	r23
    1d68:	8f 93       	push	r24
    1d6a:	9f 93       	push	r25
    1d6c:	af 93       	push	r26
    1d6e:	bf 93       	push	r27
    1d70:	ef 93       	push	r30
    1d72:	ff 93       	push	r31
    1d74:	80 91 16 06 	lds	r24, 0x0616
    1d78:	80 64       	ori	r24, 0x40	; 64
    1d7a:	80 93 16 06 	sts	0x0616, r24
    1d7e:	6f df       	rcall	.-290    	; 0x1c5e <RFA1DriverLayerP__Tasklet__schedule>
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	0f 90       	pop	r0
    1d9e:	1f 90       	pop	r1
    1da0:	18 95       	reti

00001da2 <__vector_60>:
    1da2:	1f 92       	push	r1
    1da4:	0f 92       	push	r0
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	0f 92       	push	r0
    1daa:	11 24       	eor	r1, r1
    1dac:	2f 93       	push	r18
    1dae:	3f 93       	push	r19
    1db0:	4f 93       	push	r20
    1db2:	5f 93       	push	r21
    1db4:	6f 93       	push	r22
    1db6:	7f 93       	push	r23
    1db8:	8f 93       	push	r24
    1dba:	9f 93       	push	r25
    1dbc:	af 93       	push	r26
    1dbe:	bf 93       	push	r27
    1dc0:	ef 93       	push	r30
    1dc2:	ff 93       	push	r31
    1dc4:	80 91 16 06 	lds	r24, 0x0616
    1dc8:	88 60       	ori	r24, 0x08	; 8
    1dca:	80 93 16 06 	sts	0x0616, r24
    1dce:	47 df       	rcall	.-370    	; 0x1c5e <RFA1DriverLayerP__Tasklet__schedule>
    1dd0:	ff 91       	pop	r31
    1dd2:	ef 91       	pop	r30
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	0f 90       	pop	r0
    1dee:	1f 90       	pop	r1
    1df0:	18 95       	reti

00001df2 <__vector_59>:
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	2f 93       	push	r18
    1dfe:	3f 93       	push	r19
    1e00:	4f 93       	push	r20
    1e02:	5f 93       	push	r21
    1e04:	6f 93       	push	r22
    1e06:	7f 93       	push	r23
    1e08:	8f 93       	push	r24
    1e0a:	9f 93       	push	r25
    1e0c:	af 93       	push	r26
    1e0e:	bf 93       	push	r27
    1e10:	ef 93       	push	r30
    1e12:	ff 93       	push	r31
    1e14:	80 91 16 06 	lds	r24, 0x0616
    1e18:	84 60       	ori	r24, 0x04	; 4
    1e1a:	80 93 16 06 	sts	0x0616, r24
    1e1e:	1f df       	rcall	.-450    	; 0x1c5e <RFA1DriverLayerP__Tasklet__schedule>
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	bf 91       	pop	r27
    1e26:	af 91       	pop	r26
    1e28:	9f 91       	pop	r25
    1e2a:	8f 91       	pop	r24
    1e2c:	7f 91       	pop	r23
    1e2e:	6f 91       	pop	r22
    1e30:	5f 91       	pop	r21
    1e32:	4f 91       	pop	r20
    1e34:	3f 91       	pop	r19
    1e36:	2f 91       	pop	r18
    1e38:	0f 90       	pop	r0
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	0f 90       	pop	r0
    1e3e:	1f 90       	pop	r1
    1e40:	18 95       	reti

00001e42 <__vector_66>:
    1e42:	1f 92       	push	r1
    1e44:	0f 92       	push	r0
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	0f 92       	push	r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	ef 93       	push	r30
    1e62:	ff 93       	push	r31
    1e64:	80 91 df 00 	lds	r24, 0x00DF
    1e68:	8d 7f       	andi	r24, 0xFD	; 253
    1e6a:	80 93 df 00 	sts	0x00DF, r24
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	80 93 61 04 	sts	0x0461, r24
    1e74:	80 91 08 06 	lds	r24, 0x0608
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <__vector_66+0x40>
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	80 93 08 06 	sts	0x0608, r24
    1e82:	e1 de       	rcall	.-574    	; 0x1c46 <TaskletC__Tasklet__schedule>
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	bf 91       	pop	r27
    1e8a:	af 91       	pop	r26
    1e8c:	9f 91       	pop	r25
    1e8e:	8f 91       	pop	r24
    1e90:	7f 91       	pop	r23
    1e92:	6f 91       	pop	r22
    1e94:	5f 91       	pop	r21
    1e96:	4f 91       	pop	r20
    1e98:	3f 91       	pop	r19
    1e9a:	2f 91       	pop	r18
    1e9c:	0f 90       	pop	r0
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	0f 90       	pop	r0
    1ea2:	1f 90       	pop	r1
    1ea4:	18 95       	reti

00001ea6 <SchedulerBasicP__TaskBasic__runTask>:

  /**
   * Event from the scheduler to run this task. Following the TinyOS
   * concurrency model, the codes invoked from <tt>run()</tt> signals
   * execute atomically with respect to one another, but can be
   * preempted by async commands/events.
   */
  event void runTask();
    1ea6:	2f 92       	push	r2
    1ea8:	3f 92       	push	r3
    1eaa:	4f 92       	push	r4
    1eac:	5f 92       	push	r5
    1eae:	6f 92       	push	r6
    1eb0:	7f 92       	push	r7
    1eb2:	8f 92       	push	r8
    1eb4:	9f 92       	push	r9
    1eb6:	af 92       	push	r10
    1eb8:	bf 92       	push	r11
    1eba:	cf 92       	push	r12
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	a9 97       	sbiw	r28, 0x29	; 41
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	8a 30       	cpi	r24, 0x0A	; 10
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <SchedulerBasicP__TaskBasic__runTask+0x3a>
    1ede:	64 c1       	rjmp	.+712    	; 0x21a8 <SchedulerBasicP__TaskBasic__runTask+0x302>
    1ee0:	8b 30       	cpi	r24, 0x0B	; 11
    1ee2:	a8 f4       	brcc	.+42     	; 0x1f0e <SchedulerBasicP__TaskBasic__runTask+0x68>
    1ee4:	86 30       	cpi	r24, 0x06	; 6
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <SchedulerBasicP__TaskBasic__runTask+0x44>
    1ee8:	e7 c0       	rjmp	.+462    	; 0x20b8 <SchedulerBasicP__TaskBasic__runTask+0x212>
    1eea:	87 30       	cpi	r24, 0x07	; 7
    1eec:	48 f4       	brcc	.+18     	; 0x1f00 <SchedulerBasicP__TaskBasic__runTask+0x5a>
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	c9 f1       	breq	.+114    	; 0x1f64 <SchedulerBasicP__TaskBasic__runTask+0xbe>
    1ef2:	85 30       	cpi	r24, 0x05	; 5
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <SchedulerBasicP__TaskBasic__runTask+0x52>
    1ef6:	96 c0       	rjmp	.+300    	; 0x2024 <SchedulerBasicP__TaskBasic__runTask+0x17e>
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	09 f0       	breq	.+2      	; 0x1efe <SchedulerBasicP__TaskBasic__runTask+0x58>
    1efc:	b9 c3       	rjmp	.+1906   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    1efe:	20 c0       	rjmp	.+64     	; 0x1f40 <SchedulerBasicP__TaskBasic__runTask+0x9a>
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <SchedulerBasicP__TaskBasic__runTask+0x60>
    1f04:	08 c1       	rjmp	.+528    	; 0x2116 <SchedulerBasicP__TaskBasic__runTask+0x270>
    1f06:	89 30       	cpi	r24, 0x09	; 9
    1f08:	08 f0       	brcs	.+2      	; 0x1f0c <SchedulerBasicP__TaskBasic__runTask+0x66>
    1f0a:	24 c1       	rjmp	.+584    	; 0x2154 <SchedulerBasicP__TaskBasic__runTask+0x2ae>
    1f0c:	ee c0       	rjmp	.+476    	; 0x20ea <SchedulerBasicP__TaskBasic__runTask+0x244>
    1f0e:	8e 30       	cpi	r24, 0x0E	; 14
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <SchedulerBasicP__TaskBasic__runTask+0x6e>
    1f12:	5a c2       	rjmp	.+1204   	; 0x23c8 <SchedulerBasicP__TaskBasic__runTask+0x522>
    1f14:	8f 30       	cpi	r24, 0x0F	; 15
    1f16:	38 f4       	brcc	.+14     	; 0x1f26 <SchedulerBasicP__TaskBasic__runTask+0x80>
    1f18:	8c 30       	cpi	r24, 0x0C	; 12
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <SchedulerBasicP__TaskBasic__runTask+0x78>
    1f1c:	ac c1       	rjmp	.+856    	; 0x2276 <SchedulerBasicP__TaskBasic__runTask+0x3d0>
    1f1e:	8d 30       	cpi	r24, 0x0D	; 13
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <SchedulerBasicP__TaskBasic__runTask+0x7e>
    1f22:	47 c2       	rjmp	.+1166   	; 0x23b2 <SchedulerBasicP__TaskBasic__runTask+0x50c>
    1f24:	8b c1       	rjmp	.+790    	; 0x223c <SchedulerBasicP__TaskBasic__runTask+0x396>
    1f26:	80 31       	cpi	r24, 0x10	; 16
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <SchedulerBasicP__TaskBasic__runTask+0x86>
    1f2a:	c7 c2       	rjmp	.+1422   	; 0x24ba <SchedulerBasicP__TaskBasic__runTask+0x614>
    1f2c:	80 31       	cpi	r24, 0x10	; 16
    1f2e:	08 f4       	brcc	.+2      	; 0x1f32 <SchedulerBasicP__TaskBasic__runTask+0x8c>
    1f30:	b4 c2       	rjmp	.+1384   	; 0x249a <SchedulerBasicP__TaskBasic__runTask+0x5f4>
    1f32:	81 31       	cpi	r24, 0x11	; 17
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <SchedulerBasicP__TaskBasic__runTask+0x92>
    1f36:	09 c3       	rjmp	.+1554   	; 0x254a <SchedulerBasicP__TaskBasic__runTask+0x6a4>
    1f38:	82 31       	cpi	r24, 0x12	; 18
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <SchedulerBasicP__TaskBasic__runTask+0x98>
    1f3c:	99 c3       	rjmp	.+1842   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    1f3e:	3b c3       	rjmp	.+1654   	; 0x25b6 <SchedulerBasicP__TaskBasic__runTask+0x710>
				}
				post sendDoneTask();
			}
		}
		call Uart1Interrupts.clearTxInterrupt(); //for convenience
	}

	async command error_t Uart1Stream.send(uint8_t *buf, uint16_t len)
	{
		return call Uart1StreamBlocking.send(buf, len);
		if(len==0)
			return FAIL;
		atomic
		{
			if(txBusy)
				return EBUSY;
			txBusy = TRUE;	
		}
		txBuf = buf;
		txLen = len;
		txPos = 0;
//		while(!READ_BIT(UCSR1A, UDRE1)); //for convenience, expected overhead is low
		UDR1 = txBuf[ txPos++ ];
		txResult = SUCCESS;
		return SUCCESS;
	}
	
	async command error_t Uart1Stream.receive(uint8_t *buf, uint16_t len)
	{
		if(len == 0)
			return FAIL;
		atomic
		{
			if(rxBusy)
				return EBUSY;
			rxBusy = TRUE;
		}
		rxBuf = buf;
		rxLen = len;
		rxPos = 0;
		call Uart1Stream.enableReceiveInterrupt(); //for convenience(e.g. some stupid may shut off the interrupts and call this function)
		return SUCCESS;
	}

	async command error_t Uart1Stream.disableReceiveInterrupt()
	{
		call Uart1Interrupts.disableRxInterrupt();
		return SUCCESS;
	}

	async command error_t Uart1Stream.enableReceiveInterrupt()
	{
		call Uart1Interrupts.enableRxInterrupt();
		return SUCCESS;
	}
	
	async command error_t Uart1StreamBlocking.enableReceiveInterrupt()
	{
		call Uart1Interrupts.enableRxInterrupt();
		return SUCCESS;
	}

	async command error_t Uart1StreamBlocking.disableReceiveInterrupt()
	{
		call Uart1Interrupts.disableRxInterrupt();
		return SUCCESS;
	}
		
	default async event void Uart1StreamBlocking.sendDone(uint8_t* buf, uint16_t len, error_t err) {}
  	default async event void Uart1StreamBlocking.receivedByte( uint8_t byte ) {}
  	default async event void Uart1StreamBlocking.receiveDone( uint8_t* buf, uint16_t len, error_t error ){}
  	
	default async event void Uart1Stream.sendDone(uint8_t* buf, uint16_t len, error_t err) {}
  	default async event void Uart1Stream.receivedByte( uint8_t byte ) {}
  	default async event void Uart1Stream.receiveDone( uint8_t* buf, uint16_t len, error_t error ){}

	task void sendBlockingDoneTask()
	{ 
		signal Uart1StreamBlocking.sendDone(txBuf, txLen, txResult);
	}
	
	task void receiveBlockingDoneTask() 
	{ 
		signal Uart1StreamBlocking.receiveDone(rxBuf,  rxLen, rxResult); 
	}
	
	task void sendDoneTask()
	{
		signal Uart1Stream.sendDone(txBuf, txLen, txResult);
	}
	
	task void receiveDoneTask()
	{
		signal Uart1Stream.receiveDone(rxBuf,  rxLen, rxResult); 
		rxBuf = NULL;
    1f40:	10 92 33 06 	sts	0x0633, r1
    1f44:	10 92 32 06 	sts	0x0632, r1
		rxLen = 0;
    1f48:	10 92 1e 06 	sts	0x061E, r1
    1f4c:	10 92 1d 06 	sts	0x061D, r1
		rxPos = 0;
    1f50:	10 92 a6 05 	sts	0x05A6, r1
    1f54:	10 92 a5 05 	sts	0x05A5, r1
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    1f58:	8f b7       	in	r24, 0x3f	; 63
    1f5a:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1f5c:	99 27       	eor	r25, r25
		atomic
		{
			rxBusy = FALSE;		
    1f5e:	10 92 75 04 	sts	0x0475, r1
    1f62:	84 c3       	rjmp	.+1800   	; 0x266c <SchedulerBasicP__TaskBasic__runTask+0x7c6>
		}
	}

	task void unexpectedByteReceivedTask()
	{
		signal Uart1Stream.receivedByte(rxUnexpectedByte);	
    1f64:	40 91 dd 05 	lds	r20, 0x05DD
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    1f68:	8f b7       	in	r24, 0x3f	; 63
    1f6a:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	33 27       	eor	r19, r19
    1f70:	80 91 a4 05 	lds	r24, 0x05A4
    1f74:	88 23       	and	r24, r24
    1f76:	11 f0       	breq	.+4      	; 0x1f7c <SchedulerBasicP__TaskBasic__runTask+0xd6>
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1f78:	2f bf       	out	0x3f, r18	; 63
    1f7a:	2e c0       	rjmp	.+92     	; 0x1fd8 <SchedulerBasicP__TaskBasic__runTask+0x132>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	80 93 a4 05 	sts	0x05A4, r24
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1f82:	2f bf       	out	0x3f, r18	; 63
    1f84:	80 91 c8 00 	lds	r24, 0x00C8
    1f88:	8f 7b       	andi	r24, 0xBF	; 191
    1f8a:	80 93 c8 00 	sts	0x00C8, r24
    1f8e:	80 91 c9 00 	lds	r24, 0x00C9
    1f92:	8f 7b       	andi	r24, 0xBF	; 191
    1f94:	80 93 c9 00 	sts	0x00C9, r24
    1f98:	40 93 ce 00 	sts	0x00CE, r20
    1f9c:	80 91 c8 00 	lds	r24, 0x00C8
    1fa0:	80 64       	ori	r24, 0x40	; 64
    1fa2:	80 93 c8 00 	sts	0x00C8, r24
    1fa6:	80 91 c8 00 	lds	r24, 0x00C8
    1faa:	86 ff       	sbrs	r24, 6
    1fac:	fc cf       	rjmp	.-8      	; 0x1fa6 <SchedulerBasicP__TaskBasic__runTask+0x100>
    1fae:	80 91 c8 00 	lds	r24, 0x00C8
    1fb2:	8f 7b       	andi	r24, 0xBF	; 191
    1fb4:	80 93 c8 00 	sts	0x00C8, r24
    1fb8:	80 91 c8 00 	lds	r24, 0x00C8
    1fbc:	80 64       	ori	r24, 0x40	; 64
    1fbe:	80 93 c8 00 	sts	0x00C8, r24
    1fc2:	80 91 c9 00 	lds	r24, 0x00C9
    1fc6:	80 64       	ori	r24, 0x40	; 64
    1fc8:	80 93 c9 00 	sts	0x00C9, r24
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    1fcc:	8f b7       	in	r24, 0x3f	; 63
    1fce:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1fd0:	99 27       	eor	r25, r25
    1fd2:	10 92 a4 05 	sts	0x05A4, r1
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    1fd6:	8f bf       	out	0x3f, r24	; 63
    1fd8:	1f b7       	in	r17, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	90 91 6e 04 	lds	r25, 0x046E
    1fe0:	4a 30       	cpi	r20, 0x0A	; 10
    1fe2:	a1 f4       	brne	.+40     	; 0x200c <SchedulerBasicP__TaskBasic__runTask+0x166>
    1fe4:	e9 2f       	mov	r30, r25
    1fe6:	ff 27       	eor	r31, r31
    1fe8:	df 01       	movw	r26, r30
    1fea:	ad 56       	subi	r26, 0x6D	; 109
    1fec:	bb 4f       	sbci	r27, 0xFB	; 251
    1fee:	8c 91       	ld	r24, X
    1ff0:	8d 30       	cpi	r24, 0x0D	; 13
    1ff2:	11 f4       	brne	.+4      	; 0x1ff8 <SchedulerBasicP__TaskBasic__runTask+0x152>
    1ff4:	1c 92       	st	X, r1
    1ff6:	06 c0       	rjmp	.+12     	; 0x2004 <SchedulerBasicP__TaskBasic__runTask+0x15e>
    1ff8:	ec 56       	subi	r30, 0x6C	; 108
    1ffa:	fb 4f       	sbci	r31, 0xFB	; 251
    1ffc:	10 82       	st	Z, r1
    1ffe:	9f 5f       	subi	r25, 0xFF	; 255
    2000:	90 93 6e 04 	sts	0x046E, r25
    2004:	88 e0       	ldi	r24, 0x08	; 8
    2006:	0e 94 9d 02 	call	0x53a	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
    200a:	08 c0       	rjmp	.+16     	; 0x201c <SchedulerBasicP__TaskBasic__runTask+0x176>
    200c:	e9 2f       	mov	r30, r25
    200e:	ff 27       	eor	r31, r31
    2010:	ec 56       	subi	r30, 0x6C	; 108
    2012:	fb 4f       	sbci	r31, 0xFB	; 251
    2014:	40 83       	st	Z, r20
    2016:	9f 5f       	subi	r25, 0xFF	; 255
    2018:	90 93 6e 04 	sts	0x046E, r25
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    201c:	81 2f       	mov	r24, r17
    201e:	99 27       	eor	r25, r25
  SREG = original_SREG;
    2020:	8f bf       	out	0x3f, r24	; 63
    2022:	26 c3       	rjmp	.+1612   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    2024:	80 91 7c 00 	lds	r24, 0x007C
    2028:	20 91 77 00 	lds	r18, 0x0077
    202c:	40 91 7b 00 	lds	r20, 0x007B
    2030:	60 91 7a 00 	lds	r22, 0x007A
    2034:	8e 01       	movw	r16, r28
    2036:	0f 5f       	subi	r16, 0xFF	; 255
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	99 27       	eor	r25, r25
    203c:	9f 93       	push	r25
    203e:	8f 93       	push	r24
    2040:	33 27       	eor	r19, r19
    2042:	3f 93       	push	r19
    2044:	2f 93       	push	r18
    2046:	55 27       	eor	r21, r21
    2048:	5f 93       	push	r21
    204a:	4f 93       	push	r20
    204c:	77 27       	eor	r23, r23
    204e:	7f 93       	push	r23
    2050:	6f 93       	push	r22
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	92 e0       	ldi	r25, 0x02	; 2
    2056:	9f 93       	push	r25
    2058:	8f 93       	push	r24
    205a:	1f 93       	push	r17
    205c:	0f 93       	push	r16
    205e:	f9 d6       	rcall	.+3570   	; 0x2e52 <sprintf>
    2060:	99 27       	eor	r25, r25
    2062:	bc 01       	movw	r22, r24
    2064:	c8 01       	movw	r24, r16
    2066:	0e 94 92 06 	call	0xd24	; 0xd24 <BlinkC__SerialStream__send>
    206a:	80 e0       	ldi	r24, 0x00	; 0
   * Initiates a read of the value.
   * 
   * @return SUCCESS if a readDone() event will eventually come back.
   */
  command error_t read();
    206c:	1d d8       	rcall	.-4038   	; 0x10a8 <ArbitratedReadC__0__Read__read>
    206e:	80 91 7c 00 	lds	r24, 0x007C
    2072:	20 91 77 00 	lds	r18, 0x0077
    2076:	40 91 7b 00 	lds	r20, 0x007B
    207a:	60 91 7a 00 	lds	r22, 0x007A
    207e:	99 27       	eor	r25, r25
    2080:	9f 93       	push	r25
    2082:	8f 93       	push	r24
    2084:	33 27       	eor	r19, r19
    2086:	3f 93       	push	r19
    2088:	2f 93       	push	r18
    208a:	55 27       	eor	r21, r21
    208c:	5f 93       	push	r21
    208e:	4f 93       	push	r20
    2090:	77 27       	eor	r23, r23
    2092:	7f 93       	push	r23
    2094:	6f 93       	push	r22
    2096:	89 e3       	ldi	r24, 0x39	; 57
    2098:	92 e0       	ldi	r25, 0x02	; 2
    209a:	9f 93       	push	r25
    209c:	8f 93       	push	r24
    209e:	1f 93       	push	r17
    20a0:	0f 93       	push	r16
    20a2:	d7 d6       	rcall	.+3502   	; 0x2e52 <sprintf>
    20a4:	99 27       	eor	r25, r25
    20a6:	bc 01       	movw	r22, r24
    20a8:	c8 01       	movw	r24, r16
    20aa:	0e 94 92 06 	call	0xd24	; 0xd24 <BlinkC__SerialStream__send>
    20ae:	0d b7       	in	r16, 0x3d	; 61
    20b0:	1e b7       	in	r17, 0x3e	; 62
    20b2:	08 5e       	subi	r16, 0xE8	; 232
    20b4:	1f 4f       	sbci	r17, 0xFF	; 255
    20b6:	77 c1       	rjmp	.+750    	; 0x23a6 <SchedulerBasicP__TaskBasic__runTask+0x500>
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 54 08 	call	0x10a8	; 0x10a8 <ArbitratedReadC__0__Read__read>
    20be:	8e 01       	movw	r16, r28
    20c0:	0f 5f       	subi	r16, 0xFF	; 255
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	99 27       	eor	r25, r25
    20c6:	9f 93       	push	r25
    20c8:	8f 93       	push	r24
    20ca:	82 e7       	ldi	r24, 0x72	; 114
    20cc:	92 e0       	ldi	r25, 0x02	; 2
    20ce:	9f 93       	push	r25
    20d0:	8f 93       	push	r24
    20d2:	1f 93       	push	r17
    20d4:	0f 93       	push	r16
    20d6:	bd d6       	rcall	.+3450   	; 0x2e52 <sprintf>
    20d8:	99 27       	eor	r25, r25
    20da:	bc 01       	movw	r22, r24
    20dc:	c8 01       	movw	r24, r16
    20de:	0e 94 92 06 	call	0xd24	; 0xd24 <BlinkC__SerialStream__send>
    20e2:	8d b7       	in	r24, 0x3d	; 61
    20e4:	9e b7       	in	r25, 0x3e	; 62
    20e6:	06 96       	adiw	r24, 0x06	; 6
    20e8:	25 c1       	rjmp	.+586    	; 0x2334 <SchedulerBasicP__TaskBasic__runTask+0x48e>
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	0e 94 54 08 	call	0x10a8	; 0x10a8 <ArbitratedReadC__0__Read__read>
    20f0:	8e 01       	movw	r16, r28
    20f2:	0f 5f       	subi	r16, 0xFF	; 255
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	99 27       	eor	r25, r25
    20f8:	9f 93       	push	r25
    20fa:	8f 93       	push	r24
    20fc:	81 e9       	ldi	r24, 0x91	; 145
    20fe:	92 e0       	ldi	r25, 0x02	; 2
    2100:	9f 93       	push	r25
    2102:	8f 93       	push	r24
    2104:	1f 93       	push	r17
    2106:	0f 93       	push	r16
    2108:	a4 d6       	rcall	.+3400   	; 0x2e52 <sprintf>
    210a:	99 27       	eor	r25, r25
    210c:	bc 01       	movw	r22, r24
    210e:	c8 01       	movw	r24, r16
    2110:	0e 94 92 06 	call	0xd24	; 0xd24 <BlinkC__SerialStream__send>
    2114:	28 c1       	rjmp	.+592    	; 0x2366 <SchedulerBasicP__TaskBasic__runTask+0x4c0>
    2116:	1f b7       	in	r17, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	64 e9       	ldi	r22, 0x94	; 148
    211c:	74 e0       	ldi	r23, 0x04	; 4
    211e:	80 eb       	ldi	r24, 0xB0	; 176
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    2120:	92 e0       	ldi	r25, 0x02	; 2
    2122:	8e d6       	rcall	.+3356   	; 0x2e40 <strcmp>
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2124:	89 2b       	or	r24, r25
    2126:	99 f4       	brne	.+38     	; 0x214e <SchedulerBasicP__TaskBasic__runTask+0x2a8>
    2128:	64 e9       	ldi	r22, 0x94	; 148
    212a:	74 e0       	ldi	r23, 0x04	; 4
    212c:	82 eb       	ldi	r24, 0xB2	; 178
    212e:	92 e0       	ldi	r25, 0x02	; 2
    2130:	87 d6       	rcall	.+3342   	; 0x2e40 <strcmp>
    2132:	89 2b       	or	r24, r25
    2134:	11 f4       	brne	.+4      	; 0x213a <SchedulerBasicP__TaskBasic__runTask+0x294>
    2136:	86 e0       	ldi	r24, 0x06	; 6
    2138:	08 c0       	rjmp	.+16     	; 0x214a <SchedulerBasicP__TaskBasic__runTask+0x2a4>
    213a:	64 e9       	ldi	r22, 0x94	; 148
    213c:	74 e0       	ldi	r23, 0x04	; 4
    213e:	85 eb       	ldi	r24, 0xB5	; 181
    2140:	92 e0       	ldi	r25, 0x02	; 2
    2142:	7e d6       	rcall	.+3324   	; 0x2e40 <strcmp>
    2144:	89 2b       	or	r24, r25
    2146:	19 f4       	brne	.+6      	; 0x214e <SchedulerBasicP__TaskBasic__runTask+0x2a8>
    2148:	87 e0       	ldi	r24, 0x07	; 7
    214a:	0e 94 9d 02 	call	0x53a	; 0x53a <SchedulerBasicP__TaskBasic__postTask>
    214e:	10 92 6e 04 	sts	0x046E, r1
    2152:	64 cf       	rjmp	.-312    	; 0x201c <SchedulerBasicP__TaskBasic__runTask+0x176>
    2154:	80 91 90 04 	lds	r24, 0x0490
    2158:	88 23       	and	r24, r24
    215a:	19 f5       	brne	.+70     	; 0x21a2 <SchedulerBasicP__TaskBasic__runTask+0x2fc>
    215c:	20 91 29 06 	lds	r18, 0x0629
    2160:	30 91 2a 06 	lds	r19, 0x062A
    call Alarm.startAt(t0, dt);
  }

  command void Timer.startPeriodic(uint32_t dt)
  { start(call Alarm.getNow(), dt, FALSE); }

  command void Timer.startOneShot(uint32_t dt)
  { start(call Alarm.getNow(), dt, TRUE); }

  command void Timer.stop()
  { call Alarm.stop(); }

  task void fired()
  { 
    if(m_oneshot == FALSE)
    2164:	40 91 2b 06 	lds	r20, 0x062B
    2168:	50 91 2c 06 	lds	r21, 0x062C
      start(call Alarm.getAlarm(), m_dt, FALSE);
    216c:	ef b7       	in	r30, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	ff 27       	eor	r31, r31
    2172:	60 91 a0 05 	lds	r22, 0x05A0
    2176:	70 91 a1 05 	lds	r23, 0x05A1
    217a:	80 91 a2 05 	lds	r24, 0x05A2
    sei();
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
    217e:	90 91 a3 05 	lds	r25, 0x05A3
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2182:	e0 90 9c 05 	lds	r14, 0x059C
    2186:	f0 90 9d 05 	lds	r15, 0x059D
    218a:	00 91 9e 05 	lds	r16, 0x059E
    218e:	10 91 9f 05 	lds	r17, 0x059F
    2192:	6e 0d       	add	r22, r14
    2194:	7f 1d       	adc	r23, r15
    2196:	80 1f       	adc	r24, r16
    2198:	91 1f       	adc	r25, r17
    219a:	ef bf       	out	0x3f, r30	; 63
    219c:	00 e0       	ldi	r16, 0x00	; 0
    219e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <AlarmToTimerC__0__start>
    21a2:	0e 94 de 04 	call	0x9bc	; 0x9bc <VirtualizeTimerC__0__TimerFrom__getNow>
    21a6:	41 c0       	rjmp	.+130    	; 0x222a <SchedulerBasicP__TaskBasic__runTask+0x384>
    21a8:	0e 94 de 04 	call	0x9bc	; 0x9bc <VirtualizeTimerC__0__TimerFrom__getNow>
    21ac:	5b 01       	movw	r10, r22
    21ae:	6c 01       	movw	r12, r24
    21b0:	80 91 df 00 	lds	r24, 0x00DF
    21b4:	8e 7f       	andi	r24, 0xFE	; 254
    21b6:	80 93 df 00 	sts	0x00DF, r24
    21ba:	8f ef       	ldi	r24, 0xFF	; 255
    21bc:	80 93 61 04 	sts	0x0461, r24
    21c0:	2f ef       	ldi	r18, 0xFF	; 255
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f ef       	ldi	r20, 0xFF	; 255
    21c6:	5f e7       	ldi	r21, 0x7F	; 127
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	e4 ee       	ldi	r30, 0xE4	; 228
    21cc:	f5 e0       	ldi	r31, 0x05	; 5
    21ce:	80 85       	ldd	r24, Z+8	; 0x08
    21d0:	81 ff       	sbrs	r24, 1
    21d2:	1c c0       	rjmp	.+56     	; 0x220c <SchedulerBasicP__TaskBasic__runTask+0x366>
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	a2 81       	ldd	r26, Z+2	; 0x02
    21da:	b3 81       	ldd	r27, Z+3	; 0x03
    21dc:	86 01       	movw	r16, r12
    21de:	75 01       	movw	r14, r10
    21e0:	e8 1a       	sub	r14, r24
    21e2:	f9 0a       	sbc	r15, r25
    21e4:	0a 0b       	sbc	r16, r26
    21e6:	1b 0b       	sbc	r17, r27
    21e8:	d8 01       	movw	r26, r16
    21ea:	c7 01       	movw	r24, r14
    21ec:	e4 80       	ldd	r14, Z+4	; 0x04
    21ee:	f5 80       	ldd	r15, Z+5	; 0x05
    21f0:	06 81       	ldd	r16, Z+6	; 0x06
    21f2:	17 81       	ldd	r17, Z+7	; 0x07
    21f4:	e8 1a       	sub	r14, r24
    21f6:	f9 0a       	sbc	r15, r25
    21f8:	0a 0b       	sbc	r16, r26
    21fa:	1b 0b       	sbc	r17, r27
    21fc:	e2 16       	cp	r14, r18
    21fe:	f3 06       	cpc	r15, r19
    2200:	04 07       	cpc	r16, r20
    2202:	15 07       	cpc	r17, r21
    2204:	1c f4       	brge	.+6      	; 0x220c <SchedulerBasicP__TaskBasic__runTask+0x366>
    2206:	a8 01       	movw	r20, r16
    2208:	97 01       	movw	r18, r14
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	39 96       	adiw	r30, 0x09	; 9
    220e:	06 e0       	ldi	r16, 0x06	; 6
    2210:	e8 30       	cpi	r30, 0x08	; 8
    2212:	f0 07       	cpc	r31, r16
    2214:	e1 f6       	brne	.-72     	; 0x21ce <SchedulerBasicP__TaskBasic__runTask+0x328>
    2216:	66 23       	and	r22, r22
    2218:	09 f4       	brne	.+2      	; 0x221c <SchedulerBasicP__TaskBasic__runTask+0x376>
    221a:	2a c2       	rjmp	.+1108   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    221c:	12 16       	cp	r1, r18
    221e:	13 06       	cpc	r1, r19
    2220:	14 06       	cpc	r1, r20
    2222:	15 06       	cpc	r1, r21
    2224:	2c f0       	brlt	.+10     	; 0x2230 <SchedulerBasicP__TaskBasic__runTask+0x38a>
    2226:	c6 01       	movw	r24, r12
    2228:	b5 01       	movw	r22, r10
    222a:	0e 94 6f 07 	call	0xede	; 0xede <VirtualizeTimerC__0__fireTimers>
    222e:	20 c2       	rjmp	.+1088   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    2230:	01 e0       	ldi	r16, 0x01	; 1
    2232:	c6 01       	movw	r24, r12
    2234:	b5 01       	movw	r22, r10
    2236:	0e 94 ce 07 	call	0xf9c	; 0xf9c <AlarmToTimerC__0__start>
    223a:	1a c2       	rjmp	.+1076   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    223c:	8f b7       	in	r24, 0x3f	; 63
    223e:	f8 94       	cli
    signal Timer.fired();
  }

  async event void Alarm.fired()
  { post fired(); }

  command bool Timer.isRunning()
  { return call Alarm.isRunning(); }

  command bool Timer.isOneShot()
  { return m_oneshot; }

  command void Timer.startPeriodicAt(uint32_t t0, uint32_t dt)
  { start(t0, dt, FALSE); }

  command void Timer.startOneShotAt(uint32_t t0, uint32_t dt)
  { start(t0, dt, TRUE); }
    2240:	99 27       	eor	r25, r25
    2242:	20 91 15 06 	lds	r18, 0x0615
    2246:	20 93 62 04 	sts	0x0462, r18
    224a:	23 e0       	ldi	r18, 0x03	; 3
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    224c:	20 93 68 04 	sts	0x0468, r18
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2250:	8f bf       	out	0x3f, r24	; 63
          return SUCCESS;
        }
      }
    }
    return FAIL;
  }
    
  /**
    Check if the Resource is currently in use
  */    
  async command bool ArbiterInfo.inUse() {
    atomic {
      if (state == RES_CONTROLLED)
        return FALSE;
    }
    return TRUE;
  }

  /**
    Returns the current user of the Resource.
    If there is no current user, the return value
    will be 0xFF
  */      
  async command uint8_t ArbiterInfo.userId() {
    atomic {
      if(state != RES_BUSY)
        return NO_RES;
      return resId;
    }
  }

  /**
   * Returns my user id.
   */      
  async command bool Resource.isOwner[uint8_t id]() {
    atomic {
      if(resId == id && state == RES_BUSY) return TRUE;
      else return FALSE;
    }
  }

  async command bool ResourceDefaultOwner.isOwner() {
    atomic return (state == RES_CONTROLLED
            || (resId == default_owner_id
                && (state == RES_GRANTING || state == RES_IMM_GRANTING)));
  }
  
  task void grantedTask() {
    atomic {
      resId = reqResId;
    2252:	80 91 62 04 	lds	r24, 0x0462
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	41 f0       	breq	.+16     	; 0x226a <SchedulerBasicP__TaskBasic__runTask+0x3c4>
      state = RES_BUSY;
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	20 f0       	brcs	.+8      	; 0x2266 <SchedulerBasicP__TaskBasic__runTask+0x3c0>
    225e:	82 30       	cpi	r24, 0x02	; 2
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2260:	09 f0       	breq	.+2      	; 0x2264 <SchedulerBasicP__TaskBasic__runTask+0x3be>

  /**
  * Request immediate access to a shared resource. You must call release()
  * when you are done with it.
  *
  * @return SUCCESS When a request has been accepted. <br>
  *            FAIL The request cannot be fulfilled
  */
  async command error_t immediateRequest();

  /**
   * You are now in control of the resource.
   */
  event void granted();
    2262:	06 c2       	rjmp	.+1036   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    2264:	06 c0       	rjmp	.+12     	; 0x2272 <SchedulerBasicP__TaskBasic__runTask+0x3cc>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	01 c0       	rjmp	.+2      	; 0x226c <SchedulerBasicP__TaskBasic__runTask+0x3c6>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	0e 94 69 07 	call	0xed2	; 0xed2 <ArbitratedReadC__0__Resource__granted>
    2270:	ff c1       	rjmp	.+1022   	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	fb cf       	rjmp	.-10     	; 0x226c <SchedulerBasicP__TaskBasic__runTask+0x3c6>
    2276:	10 92 a8 05 	sts	0x05A8, r1
    227a:	e0 90 0b 06 	lds	r14, 0x060B
    227e:	f0 90 0c 06 	lds	r15, 0x060C
    2282:	80 91 35 06 	lds	r24, 0x0635
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	49 f0       	breq	.+18     	; 0x229c <SchedulerBasicP__TaskBasic__runTask+0x3f6>
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	18 f0       	brcs	.+6      	; 0x2294 <SchedulerBasicP__TaskBasic__runTask+0x3ee>
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	69 f4       	brne	.+26     	; 0x22ac <SchedulerBasicP__TaskBasic__runTask+0x406>
    2292:	08 c0       	rjmp	.+16     	; 0x22a4 <SchedulerBasicP__TaskBasic__runTask+0x3fe>
    2294:	80 e0       	ldi	r24, 0x00	; 0
   
  /**
  * Release a shared resource you previously acquired.  
  *
  * @return SUCCESS The resource has been released <br>
  *         FAIL You tried to release but you are not the
  *              owner of the resource 
  *
  * @note This command should never be called between putting in a request 	  
  *       and waiting for a granted event.  Doing so will result in a
  *       potential race condition.  There are ways to guarantee that no
  *       race will occur, but they are clumsy and overly complicated.
  *       Since it doesn't logically make since to be calling
  *       <code>release</code> before receiving a <code>granted</code> event, 
  *       we have opted to keep thing simple and warn you about the potential 
  *       race.
  */
  async command error_t release();
    2296:	0e 94 22 06 	call	0xc44	; 0xc44 <ArbiterP__0__Resource__release>
    229a:	11 c0       	rjmp	.+34     	; 0x22be <SchedulerBasicP__TaskBasic__runTask+0x418>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	0e 94 22 06 	call	0xc44	; 0xc44 <ArbiterP__0__Resource__release>
    22a2:	4e c0       	rjmp	.+156    	; 0x2340 <SchedulerBasicP__TaskBasic__runTask+0x49a>
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	0e 94 22 06 	call	0xc44	; 0xc44 <ArbiterP__0__Resource__release>
    22aa:	66 c0       	rjmp	.+204    	; 0x2378 <SchedulerBasicP__TaskBasic__runTask+0x4d2>
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <SchedulerBasicP__TaskBasic__runTask+0x40c>
    22b0:	47 c0       	rjmp	.+142    	; 0x2340 <SchedulerBasicP__TaskBasic__runTask+0x49a>
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	20 f0       	brcs	.+8      	; 0x22be <SchedulerBasicP__TaskBasic__runTask+0x418>
    22b6:	82 30       	cpi	r24, 0x02	; 2
    22b8:	09 f0       	breq	.+2      	; 0x22bc <SchedulerBasicP__TaskBasic__runTask+0x416>
    22ba:	da c1       	rjmp	.+948    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>

  /**
   * Signals the completion of the read().
   *
   * @param result SUCCESS if the read() was successful
   * @param val the value that has been read
   */
  event void readDone( error_t result, val_t val );
    22bc:	5d c0       	rjmp	.+186    	; 0x2378 <SchedulerBasicP__TaskBasic__runTask+0x4d2>
    22be:	b7 01       	movw	r22, r14
    22c0:	88 27       	eor	r24, r24
    22c2:	77 fd       	sbrc	r23, 7
    22c4:	80 95       	com	r24
    22c6:	98 2f       	mov	r25, r24
    22c8:	52 d4       	rcall	.+2212   	; 0x2b6e <__floatsisf>
    22ca:	f7 fe       	sbrs	r15, 7
    22cc:	05 c0       	rjmp	.+10     	; 0x22d8 <SchedulerBasicP__TaskBasic__runTask+0x432>
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e8       	ldi	r20, 0x80	; 128
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	b9 d3       	rcall	.+1906   	; 0x2a4a <__addsf3>
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	42 ee       	ldi	r20, 0xE2	; 226
    22de:	52 e4       	ldi	r21, 0x42	; 66
    22e0:	d2 d4       	rcall	.+2468   	; 0x2c86 <__mulsf3>
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	38 ea       	ldi	r19, 0xA8	; 168
    22e6:	44 ed       	ldi	r20, 0xD4	; 212
    22e8:	56 e4       	ldi	r21, 0x46	; 70
    22ea:	ae d3       	rcall	.+1884   	; 0x2a48 <__subsf3>
    22ec:	12 d4       	rcall	.+2084   	; 0x2b12 <__fixunssfsi>
    22ee:	8b 01       	movw	r16, r22
    22f0:	9c 01       	movw	r18, r24
    22f2:	7e 01       	movw	r14, r28
    22f4:	08 94       	sec
    22f6:	e1 1c       	adc	r14, r1
    22f8:	f1 1c       	adc	r15, r1
    22fa:	cb 01       	movw	r24, r22
    22fc:	64 e6       	ldi	r22, 0x64	; 100
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	25 d5       	rcall	.+2634   	; 0x2d4c <__udivmodhi4>
    2302:	9f 93       	push	r25
    2304:	8f 93       	push	r24
    2306:	c8 01       	movw	r24, r16
    2308:	64 e6       	ldi	r22, 0x64	; 100
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	1f d5       	rcall	.+2622   	; 0x2d4c <__udivmodhi4>
    230e:	7f 93       	push	r23
    2310:	6f 93       	push	r22
    2312:	88 eb       	ldi	r24, 0xB8	; 184
    2314:	92 e0       	ldi	r25, 0x02	; 2
    2316:	9f 93       	push	r25
    2318:	8f 93       	push	r24
    231a:	ff 92       	push	r15
    231c:	ef 92       	push	r14
    231e:	99 d5       	rcall	.+2866   	; 0x2e52 <sprintf>
    2320:	99 27       	eor	r25, r25
    2322:	bc 01       	movw	r22, r24
    2324:	c7 01       	movw	r24, r14
    2326:	0e 94 92 06 	call	0xd24	; 0xd24 <BlinkC__SerialStream__send>
    232a:	0e 94 e5 06 	call	0xdca	; 0xdca <BlinkC__Leds__led1Toggle>
    232e:	8d b7       	in	r24, 0x3d	; 61
    2330:	9e b7       	in	r25, 0x3e	; 62
    2332:	08 96       	adiw	r24, 0x08	; 8
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	9e bf       	out	0x3e, r25	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	8d bf       	out	0x3d, r24	; 61
    233e:	98 c1       	rjmp	.+816    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    2340:	8e 01       	movw	r16, r28
    2342:	0f 5f       	subi	r16, 0xFF	; 255
    2344:	1f 4f       	sbci	r17, 0xFF	; 255
    2346:	ff 92       	push	r15
    2348:	ef 92       	push	r14
    234a:	87 ec       	ldi	r24, 0xC7	; 199
    234c:	92 e0       	ldi	r25, 0x02	; 2
    234e:	9f 93       	push	r25
    2350:	8f 93       	push	r24
    2352:	1f 93       	push	r17
    2354:	0f 93       	push	r16
    2356:	7d d5       	rcall	.+2810   	; 0x2e52 <sprintf>
    2358:	99 27       	eor	r25, r25
    235a:	bc 01       	movw	r22, r24
    235c:	c8 01       	movw	r24, r16
    235e:	0e 94 92 06 	call	0xd24	; 0xd24 <BlinkC__SerialStream__send>
    2362:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <BlinkC__Leds__led2Toggle>
    2366:	ed b7       	in	r30, 0x3d	; 61
    2368:	fe b7       	in	r31, 0x3e	; 62
    236a:	36 96       	adiw	r30, 0x06	; 6
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	fe bf       	out	0x3e, r31	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	ed bf       	out	0x3d, r30	; 61
    2376:	7c c1       	rjmp	.+760    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    2378:	8e 01       	movw	r16, r28
    237a:	0f 5f       	subi	r16, 0xFF	; 255
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	ff 92       	push	r15
    2380:	ef 92       	push	r14
    2382:	83 ed       	ldi	r24, 0xD3	; 211
    2384:	92 e0       	ldi	r25, 0x02	; 2
    2386:	9f 93       	push	r25
    2388:	8f 93       	push	r24
    238a:	1f 93       	push	r17
    238c:	0f 93       	push	r16
    238e:	61 d5       	rcall	.+2754   	; 0x2e52 <sprintf>
    2390:	99 27       	eor	r25, r25
    2392:	bc 01       	movw	r22, r24
    2394:	c8 01       	movw	r24, r16
    2396:	0e 94 92 06 	call	0xd24	; 0xd24 <BlinkC__SerialStream__send>
    239a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <BlinkC__Leds__led2Toggle>
    239e:	0d b7       	in	r16, 0x3d	; 61
    23a0:	1e b7       	in	r17, 0x3e	; 62
    23a2:	0a 5f       	subi	r16, 0xFA	; 250
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	1e bf       	out	0x3e, r17	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	0d bf       	out	0x3d, r16	; 61
    23b0:	5f c1       	rjmp	.+702    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    23b2:	8f b7       	in	r24, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	99 27       	eor	r25, r25
    23b8:	20 91 93 04 	lds	r18, 0x0493
    23bc:	20 93 63 04 	sts	0x0463, r18
    23c0:	22 e0       	ldi	r18, 0x02	; 2
    23c2:	20 93 69 04 	sts	0x0469, r18
    23c6:	52 c1       	rjmp	.+676    	; 0x266c <SchedulerBasicP__TaskBasic__runTask+0x7c6>
    23c8:	e0 90 13 06 	lds	r14, 0x0613
    23cc:	f0 90 14 06 	lds	r15, 0x0614
    23d0:	c7 01       	movw	r24, r14
    23d2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <PacketLinkLayerP__0__getMeta>
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    23d6:	6c 01       	movw	r12, r24
    23d8:	fc 01       	movw	r30, r24
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    23da:	00 81       	ld	r16, Z
  }
  
  task void grantedTask() {
    atomic {
      resId = reqResId;
    23dc:	11 81       	ldd	r17, Z+1	; 0x01
    23de:	80 91 6a 04 	lds	r24, 0x046A
    23e2:	82 30       	cpi	r24, 0x02	; 2
      state = RES_BUSY;
    23e4:	91 f5       	brne	.+100    	; 0x244a <SchedulerBasicP__TaskBasic__runTask+0x5a4>
    23e6:	01 15       	cp	r16, r1
    23e8:	11 05       	cpc	r17, r1
    23ea:	31 f0       	breq	.+12     	; 0x23f8 <SchedulerBasicP__TaskBasic__runTask+0x552>
    23ec:	b7 01       	movw	r22, r14
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <MetadataFlagsLayerC__0__PacketFlag__get>
		return ((void*)msg) + sizeof(message_t) - call RadioPacket.metadataLength(msg);
	}

	command void PacketLink.setRetries(message_t *msg, uint16_t maxRetries)
	{
		getMeta(msg)->maxRetries = maxRetries;
	}

	command void PacketLink.setRetryDelay(message_t *msg, uint16_t retryDelay)
	{
		getMeta(msg)->retryDelay = retryDelay;
	}

	command uint16_t PacketLink.getRetries(message_t *msg)
	{
		return getMeta(msg)->maxRetries;
    23f4:	88 23       	and	r24, r24
    23f6:	11 f0       	breq	.+4      	; 0x23fc <SchedulerBasicP__TaskBasic__runTask+0x556>
    23f8:	84 e0       	ldi	r24, 0x04	; 4
    23fa:	22 c0       	rjmp	.+68     	; 0x2440 <SchedulerBasicP__TaskBasic__runTask+0x59a>
    23fc:	80 91 0f 06 	lds	r24, 0x060F
    2400:	90 91 10 06 	lds	r25, 0x0610
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	90 93 10 06 	sts	0x0610, r25
    240a:	80 93 0f 06 	sts	0x060F, r24
    240e:	80 17       	cp	r24, r16
    2410:	91 07       	cpc	r25, r17
    2412:	a8 f4       	brcc	.+42     	; 0x243e <SchedulerBasicP__TaskBasic__runTask+0x598>
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	80 93 6a 04 	sts	0x046A, r24
    241a:	f6 01       	movw	r30, r12
    241c:	02 81       	ldd	r16, Z+2	; 0x02
    241e:	13 81       	ldd	r17, Z+3	; 0x03
    2420:	01 15       	cp	r16, r1
    2422:	11 05       	cpc	r17, r1
    2424:	a1 f0       	breq	.+40     	; 0x244e <SchedulerBasicP__TaskBasic__runTask+0x5a8>
    2426:	0e 94 de 04 	call	0x9bc	; 0x9bc <VirtualizeTimerC__0__TimerFrom__getNow>
    242a:	ab 01       	movw	r20, r22
    242c:	bc 01       	movw	r22, r24
    242e:	22 27       	eor	r18, r18
    2430:	33 27       	eor	r19, r19
    2432:	e1 e0       	ldi	r30, 0x01	; 1
    2434:	ee 2e       	mov	r14, r30
    2436:	83 e0       	ldi	r24, 0x03	; 3
    2438:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <VirtualizeTimerC__0__startTimer>
    243c:	19 c1       	rjmp	.+562    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
	}

	command uint16_t PacketLink.getRetryDelay(message_t *msg)
	{
		return getMeta(msg)->retryDelay;
    243e:	85 e0       	ldi	r24, 0x05	; 5
    2440:	80 93 6a 04 	sts	0x046A, r24
    2444:	80 91 6a 04 	lds	r24, 0x046A
    2448:	19 c0       	rjmp	.+50     	; 0x247c <SchedulerBasicP__TaskBasic__runTask+0x5d6>
  }

  command void Timer.startOneShot[uint8_t num](uint32_t dt)
  {
    startTimer(num, call TimerFrom.getNow(), dt, TRUE);
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	b9 f4       	brne	.+46     	; 0x247c <SchedulerBasicP__TaskBasic__runTask+0x5d6>
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	80 93 6a 04 	sts	0x046A, r24
    2454:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MessageBufferLayerP__0__Tasklet__suspend>
    2458:	80 91 96 05 	lds	r24, 0x0596
    245c:	88 23       	and	r24, r24
    245e:	61 f4       	brne	.+24     	; 0x2478 <SchedulerBasicP__TaskBasic__runTask+0x5d2>
    2460:	f0 92 0e 06 	sts	0x060E, r15
    2464:	e0 92 0d 06 	sts	0x060D, r14
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	80 93 96 05 	sts	0x0596, r24
    246e:	10 92 0a 06 	sts	0x060A, r1
    2472:	0e 94 cc 02 	call	0x598	; 0x598 <MessageBufferLayerP__0__sendTask__postTask>
    2476:	61 c0       	rjmp	.+194    	; 0x253a <SchedulerBasicP__TaskBasic__runTask+0x694>
    2478:	d4 db       	rcall	.-2136   	; 0x1c22 <MessageBufferLayerP__0__Tasklet__resume>
    247a:	64 c0       	rjmp	.+200    	; 0x2544 <SchedulerBasicP__TaskBasic__runTask+0x69e>
    247c:	84 30       	cpi	r24, 0x04	; 4
    247e:	08 f4       	brcc	.+2      	; 0x2482 <SchedulerBasicP__TaskBasic__runTask+0x5dc>
    2480:	f7 c0       	rjmp	.+494    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    2482:	01 2b       	or	r16, r17
    2484:	39 f0       	breq	.+14     	; 0x2494 <SchedulerBasicP__TaskBasic__runTask+0x5ee>
    2486:	80 91 0f 06 	lds	r24, 0x060F
    248a:	90 91 10 06 	lds	r25, 0x0610
    248e:	f6 01       	movw	r30, r12
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	10 92 6a 04 	sts	0x046A, r1
    2498:	eb c0       	rjmp	.+470    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    249a:	80 91 96 05 	lds	r24, 0x0596
    249e:	10 92 96 05 	sts	0x0596, r1
    24a2:	85 30       	cpi	r24, 0x05	; 5
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <SchedulerBasicP__TaskBasic__runTask+0x602>
    24a6:	e4 c0       	rjmp	.+456    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    24a8:	86 30       	cpi	r24, 0x06	; 6
    24aa:	09 f4       	brne	.+2      	; 0x24ae <SchedulerBasicP__TaskBasic__runTask+0x608>
    24ac:	e1 c0       	rjmp	.+450    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    24ae:	87 30       	cpi	r24, 0x07	; 7
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <SchedulerBasicP__TaskBasic__runTask+0x60e>
    24b2:	de c0       	rjmp	.+444    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    24b4:	80 93 96 05 	sts	0x0596, r24
    24b8:	db c0       	rjmp	.+438    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    24ba:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MessageBufferLayerP__0__Tasklet__suspend>
    24be:	40 91 96 05 	lds	r20, 0x0596
    24c2:	41 30       	cpi	r20, 0x01	; 1
    24c4:	91 f5       	brne	.+100    	; 0x252a <SchedulerBasicP__TaskBasic__runTask+0x684>
    24c6:	80 91 0a 06 	lds	r24, 0x060A
    24ca:	8f 5f       	subi	r24, 0xFF	; 255
    24cc:	80 93 0a 06 	sts	0x060A, r24
    24d0:	86 30       	cpi	r24, 0x06	; 6
    24d2:	58 f5       	brcc	.+86     	; 0x252a <SchedulerBasicP__TaskBasic__runTask+0x684>
    24d4:	20 91 0d 06 	lds	r18, 0x060D
    24d8:	30 91 0e 06 	lds	r19, 0x060E
    24dc:	80 91 97 05 	lds	r24, 0x0597
    24e0:	88 23       	and	r24, r24
    24e2:	e1 f4       	brne	.+56     	; 0x251c <SchedulerBasicP__TaskBasic__runTask+0x676>
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	80 91 08 06 	lds	r24, 0x0608
    24ea:	88 23       	and	r24, r24
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <SchedulerBasicP__TaskBasic__runTask+0x64a>
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	99 23       	and	r25, r25
    24f2:	a1 f0       	breq	.+40     	; 0x251c <SchedulerBasicP__TaskBasic__runTask+0x676>
    24f4:	30 93 94 05 	sts	0x0594, r19
    24f8:	20 93 93 05 	sts	0x0593, r18
    24fc:	40 93 97 05 	sts	0x0597, r20
    2500:	86 e3       	ldi	r24, 0x36	; 54
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	0e 94 c6 05 	call	0xb8c	; 0xb8c <RandomCollisionLayerP__0__getBackoff>
    2508:	aa 27       	eor	r26, r26
    250a:	bb 27       	eor	r27, r27
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 b9 05 	call	0xb72	; 0xb72 <RandomCollisionLayerP__0__RadioAlarm__wait>
    2514:	10 92 37 06 	sts	0x0637, r1
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <SchedulerBasicP__TaskBasic__runTask+0x67e>
    251c:	85 e0       	ldi	r24, 0x05	; 5
    251e:	80 93 37 06 	sts	0x0637, r24
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	80 93 96 05 	sts	0x0596, r24
    2528:	08 c0       	rjmp	.+16     	; 0x253a <SchedulerBasicP__TaskBasic__runTask+0x694>
    252a:	10 92 96 05 	sts	0x0596, r1
    252e:	79 db       	rcall	.-2318   	; 0x1c22 <MessageBufferLayerP__0__Tasklet__resume>
    2530:	80 91 37 06 	lds	r24, 0x0637
    2534:	88 23       	and	r24, r24
    2536:	19 f4       	brne	.+6      	; 0x253e <SchedulerBasicP__TaskBasic__runTask+0x698>
    2538:	05 c0       	rjmp	.+10     	; 0x2544 <SchedulerBasicP__TaskBasic__runTask+0x69e>
    253a:	73 db       	rcall	.-2330   	; 0x1c22 <MessageBufferLayerP__0__Tasklet__resume>
    253c:	99 c0       	rjmp	.+306    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    253e:	8c 5f       	subi	r24, 0xFC	; 252
    2540:	80 93 6a 04 	sts	0x046A, r24
    2544:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <PacketLinkLayerP__0__send__postTask>
    2548:	93 c0       	rjmp	.+294    	; 0x2670 <SchedulerBasicP__TaskBasic__runTask+0x7ca>
    254a:	8f b7       	in	r24, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	28 2f       	mov	r18, r24
    2550:	33 27       	eor	r19, r19
    2552:	80 91 17 06 	lds	r24, 0x0617
    2556:	88 23       	and	r24, r24
    2558:	09 f4       	brne	.+2      	; 0x255c <SchedulerBasicP__TaskBasic__runTask+0x6b6>
    255a:	89 c0       	rjmp	.+274    	; 0x266e <SchedulerBasicP__TaskBasic__runTask+0x7c8>
    255c:	e0 91 34 06 	lds	r30, 0x0634
    2560:	ff 27       	eor	r31, r31
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	e1 59       	subi	r30, 0x91	; 145
    2568:	fb 4f       	sbci	r31, 0xFB	; 251
    256a:	00 81       	ld	r16, Z
    256c:	11 81       	ldd	r17, Z+1	; 0x01
    256e:	2f bf       	out	0x3f, r18	; 63
    2570:	c8 01       	movw	r24, r16
    2572:	0e 94 29 05 	call	0xa52	; 0xa52 <Ieee154PacketLayerP__0__Ieee154PacketLayer__getDestAddr>
    sei();
}
/* Disables all interrupts. */
inline void __nesc_disable_interrupt() @safe() {
    cli();
    2576:	8f b7       	in	r24, 0x3f	; 63
}

/* Defines data type for storing interrupt mask state during atomic. */
typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void);
void __nesc_atomic_end(__nesc_atomic_t original_SREG);

#ifndef NESC_BUILD_BINARY
/* @spontaneous() functions should not be included when NESC_BUILD_BINARY
   is #defined, to avoid duplicate functions definitions wheb binary
   components are used. Such functions do need a prototype in all cases,
   though. */

/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2578:	f8 94       	cli
    257a:	99 27       	eor	r25, r25
    257c:	8f bf       	out	0x3f, r24	; 63
    257e:	9f b7       	in	r25, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	80 91 34 06 	lds	r24, 0x0634
    2586:	e8 2f       	mov	r30, r24
    2588:	ff 27       	eor	r31, r31
    258a:	ee 0f       	add	r30, r30
    258c:	ff 1f       	adc	r31, r31
    258e:	e1 59       	subi	r30, 0x91	; 145
    2590:	fb 4f       	sbci	r31, 0xFB	; 251
    2592:	11 83       	std	Z+1, r17	; 0x01
    2594:	00 83       	st	Z, r16
    2596:	8f 5f       	subi	r24, 0xFF	; 255
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2598:	80 93 34 06 	sts	0x0634, r24
			&& call Ieee154PacketLayer.isDataFrame(msg)
			&& call Ieee154PacketLayer.getDestAddr(msg) == call ActiveMessageAddress.amAddress();
	}

	async command ieee154_saddr_t Ieee154PacketLayer.localAddr()
	{
		return call ActiveMessageAddress.amAddress();
	}

	async command ieee154_panid_t Ieee154PacketLayer.localPan()
	{
		return call ActiveMessageAddress.amGroup();
	}

	async command bool Ieee154PacketLayer.isForMe(message_t* msg)
	{
		ieee154_saddr_t addr = call Ieee154PacketLayer.getDestAddr(msg);
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	10 f0       	brcs	.+4      	; 0x25a4 <SchedulerBasicP__TaskBasic__runTask+0x6fe>
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    25a0:	10 92 34 06 	sts	0x0634, r1
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    25a4:	80 91 17 06 	lds	r24, 0x0617
    25a8:	81 50       	subi	r24, 0x01	; 1
    25aa:	80 93 17 06 	sts	0x0617, r24
    25ae:	89 2f       	mov	r24, r25
    25b0:	99 27       	eor	r25, r25
    25b2:	8f bf       	out	0x3f, r24	; 63
    25b4:	ca cf       	rjmp	.-108    	; 0x254a <SchedulerBasicP__TaskBasic__runTask+0x6a4>
    25b6:	ff b7       	in	r31, 0x3f	; 63
    25b8:	f9 a3       	std	Y+33, r31	; 0x21
    25ba:	f8 94       	cli
    25bc:	20 90 98 05 	lds	r2, 0x0598
    25c0:	30 90 99 05 	lds	r3, 0x0599
    25c4:	40 90 9a 05 	lds	r4, 0x059A
    25c8:	50 90 9b 05 	lds	r5, 0x059B
    25cc:	66 24       	eor	r6, r6
    25ce:	77 24       	eor	r7, r7
    25d0:	88 24       	eor	r8, r8
    25d2:	1e e4       	ldi	r17, 0x4E	; 78
    25d4:	a1 2e       	mov	r10, r17
    25d6:	b3 e8       	ldi	r27, 0x83	; 131
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    25d8:	bb 2e       	mov	r11, r27
    25da:	cc 24       	eor	r12, r12
  SREG = original_SREG;
    25dc:	dd 24       	eor	r13, r13
    25de:	ee 24       	eor	r14, r14
    25e0:	ff 24       	eor	r15, r15
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	10 e0       	ldi	r17, 0x00	; 0
    25e6:	22 2d       	mov	r18, r2
    25e8:	33 2d       	mov	r19, r3
    25ea:	44 2d       	mov	r20, r4
    25ec:	55 2d       	mov	r21, r5
    25ee:	66 2d       	mov	r22, r6
    25f0:	77 2d       	mov	r23, r7
    25f2:	88 2d       	mov	r24, r8
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 b3 00 	call	0x166	; 0x166 <__muldi3>
    25fa:	2a a3       	std	Y+34, r18	; 0x22
    25fc:	3b a3       	std	Y+35, r19	; 0x23
    25fe:	4c a3       	std	Y+36, r20	; 0x24
    2600:	5d a3       	std	Y+37, r21	; 0x25
    2602:	6e a3       	std	Y+38, r22	; 0x26
    2604:	7f a3       	std	Y+39, r23	; 0x27
    2606:	88 a7       	std	Y+40, r24	; 0x28
    2608:	99 a7       	std	Y+41, r25	; 0x29
    260a:	82 2e       	mov	r8, r18
    260c:	93 2e       	mov	r9, r19
    260e:	a4 2e       	mov	r10, r20
    2610:	b5 2e       	mov	r11, r21
    2612:	24 01       	movw	r4, r8
    2614:	35 01       	movw	r6, r10
    2616:	00 e2       	ldi	r16, 0x20	; 32
    2618:	0e 94 b1 01 	call	0x362	; 0x362 <__lshrdi3>
    261c:	a2 2e       	mov	r10, r18
    261e:	b3 2e       	mov	r11, r19
    2620:	c4 2e       	mov	r12, r20
    2622:	d5 2e       	mov	r13, r21
    2624:	a3 01       	movw	r20, r6
    2626:	92 01       	movw	r18, r4
    2628:	56 95       	lsr	r21
    262a:	47 95       	ror	r20
    262c:	37 95       	ror	r19
    262e:	27 95       	ror	r18
    2630:	2a 0d       	add	r18, r10
    2632:	3b 1d       	adc	r19, r11
    2634:	4c 1d       	adc	r20, r12
    2636:	5d 1d       	adc	r21, r13
    2638:	57 ff       	sbrs	r21, 7
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <SchedulerBasicP__TaskBasic__runTask+0x7a0>
    uint64_t tmpseed;
    atomic
      {
	tmpseed =  (uint64_t)33614U * (uint64_t)seed;
	q = tmpseed; 	/* low */
    263c:	5f 77       	andi	r21, 0x7F	; 127
    263e:	2f 5f       	subi	r18, 0xFF	; 255
	q = q >> 1;
	p = tmpseed >> 32 ;		/* hi */
	mlcg = p + q;
    2640:	3f 4f       	sbci	r19, 0xFF	; 255
    2642:	4f 4f       	sbci	r20, 0xFF	; 255
    2644:	5f 4f       	sbci	r21, 0xFF	; 255
    2646:	20 93 98 05 	sts	0x0598, r18
    264a:	30 93 99 05 	sts	0x0599, r19
    264e:	40 93 9a 05 	sts	0x059A, r20
    2652:	50 93 9b 05 	sts	0x059B, r21
    2656:	e9 a0       	ldd	r14, Y+33	; 0x21
    2658:	8e 2d       	mov	r24, r14
    265a:	99 27       	eor	r25, r25
    265c:	8f bf       	out	0x3f, r24	; 63
    265e:	8f b7       	in	r24, 0x3f	; 63
    2660:	f8 94       	cli
        if (mlcg & 0x80000000) { 
    2662:	99 27       	eor	r25, r25
    2664:	30 93 12 06 	sts	0x0612, r19
	  mlcg = mlcg & 0x7FFFFFFF;
	  mlcg++;
    2668:	20 93 11 06 	sts	0x0611, r18
    266c:	d9 cc       	rjmp	.-1614   	; 0x2020 <SchedulerBasicP__TaskBasic__runTask+0x17a>
    266e:	2f bf       	out	0x3f, r18	; 63
	}
	seed = mlcg;
    2670:	a9 96       	adiw	r28, 0x29	; 41
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	ff 90       	pop	r15
  SREG = original_SREG;
    2686:	ef 90       	pop	r14
    2688:	df 90       	pop	r13
    268a:	cf 90       	pop	r12
    268c:	bf 90       	pop	r11
    268e:	af 90       	pop	r10
    2690:	9f 90       	pop	r9
    2692:	8f 90       	pop	r8
    2694:	7f 90       	pop	r7
    2696:	6f 90       	pop	r6
    2698:	5f 90       	pop	r5
    269a:	4f 90       	pop	r4
    269c:	3f 90       	pop	r3
    269e:	2f 90       	pop	r2
    26a0:	08 95       	ret

000026a2 <RealMainP__Scheduler__runNextTask>:
    *
    * @return        whether a task was run -- TRUE indicates a task
    *                ran, FALSE indicates there was no task to run.
    */
  command bool runNextTask();
    26a2:	0e 94 86 02 	call	0x50c	; 0x50c <SchedulerBasicP__popTask>
    26a6:	8f 3f       	cpi	r24, 0xFF	; 255
    26a8:	19 f4       	brne	.+6      	; 0x26b0 <RealMainP__Scheduler__runNextTask+0xe>
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	08 95       	ret
    26b0:	fa db       	rcall	.-2060   	; 0x1ea6 <SchedulerBasicP__TaskBasic__runTask>
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	08 95       	ret

000026b8 <main>:
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    26be:	1f b7       	in	r17, 0x3f	; 63
    26c0:	f8 94       	cli
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    26c2:	14 be       	out	0x34, r1	; 52
    26c4:	88 e1       	ldi	r24, 0x18	; 24
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	80 93 60 00 	sts	0x0060, r24
    return result;
}

/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
  SREG = original_SREG;
    26ce:	10 92 60 00 	sts	0x0060, r1
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	43 e1       	ldi	r20, 0x13	; 19
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	6f ef       	ldi	r22, 0xFF	; 255
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	8a e7       	ldi	r24, 0x7A	; 122
    26de:	94 e0       	ldi	r25, 0x04	; 4
    26e0:	a8 d3       	rcall	.+1872   	; 0x2e32 <memset>
    26e2:	8f ef       	ldi	r24, 0xFF	; 255
    26e4:	80 93 2f 06 	sts	0x062F, r24
    26e8:	80 93 d4 06 	sts	0x06D4, r24
    26ec:	87 ed       	ldi	r24, 0xD7	; 215
    26ee:	96 e0       	ldi	r25, 0x06	; 6
    26f0:	90 93 0a 07 	sts	0x070A, r25
    26f4:	80 93 09 07 	sts	0x0709, r24
    26f8:	10 92 36 06 	sts	0x0636, r1
    26fc:	8a e5       	ldi	r24, 0x5A	; 90
    26fe:	80 93 76 04 	sts	0x0476, r24
    2702:	85 b7       	in	r24, 0x35	; 53
  {
    error_t ok;

	// disable on-chip debugging
    MCUCR |= 1<<JTD;
    2704:	80 68       	ori	r24, 0x80	; 128
    2706:	85 bf       	out	0x35, r24	; 53
    2708:	85 b7       	in	r24, 0x35	; 53
    MCUCR |= 1<<JTD; 
    270a:	80 68       	ori	r24, 0x80	; 128
    270c:	85 bf       	out	0x35, r24	; 53
    270e:	80 e8       	ldi	r24, 0x80	; 128
		// set the clock prescaler
		atomic
		{
			// enable changing the prescaler
			CLKPR = 0x80;
    2710:	80 93 61 00 	sts	0x0061, r24
    2714:	8f e0       	ldi	r24, 0x0F	; 15

#if PLATFORM_MHZ == 16
			CLKPR = 0x0F;	
    2716:	80 93 61 00 	sts	0x0061, r24
    271a:	91 e0       	ldi	r25, 0x01	; 1
      uint16_t prev_cycles_min=0xffff;
      uint16_t prev_cycles_max=0;

      /* Setup timer2 to at 32768 Hz, and timer1 cpu cycles */
      TCCR1B = 1 << CS10;
    271c:	90 93 81 00 	sts	0x0081, r25
    2720:	80 e2       	ldi	r24, 0x20	; 32
      ASSR = 1 << AS2;
    2722:	80 93 b6 00 	sts	0x00B6, r24
    2726:	90 93 b1 00 	sts	0x00B1, r25
      TCCR2B = 1 << CS20;
    272a:	ae ef       	ldi	r26, 0xFE	; 254

      // one wrap is 256/32768 = 1/128 sec
      while( wraps_ok < 50 && --wraps != 0 )
    272c:	e0 e0       	ldi	r30, 0x00	; 0
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	6f ef       	ldi	r22, 0xFF	; 255
    2732:	7f ef       	ldi	r23, 0xFF	; 255
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	80 91 b2 00 	lds	r24, 0x00B2
      {
        while( TCNT2 != 0 )
    273a:	88 23       	and	r24, r24
    273c:	e1 f7       	brne	.-8      	; 0x2736 <main+0x7e>
    273e:	40 91 84 00 	lds	r20, 0x0084
          ;

        now = TCNT1;
    2742:	50 91 85 00 	lds	r21, 0x0085
    2746:	80 91 b2 00 	lds	r24, 0x00B2

        while( TCNT2 != 64 )	// wait 64/32768 = 1/512 sec
    274a:	80 34       	cpi	r24, 0x40	; 64
    274c:	e1 f7       	brne	.-8      	; 0x2746 <main+0x8e>
    274e:	20 91 84 00 	lds	r18, 0x0084
          ;

        cycles = TCNT1 - now;
    2752:	30 91 85 00 	lds	r19, 0x0085
    2756:	24 1b       	sub	r18, r20
    2758:	35 0b       	sbc	r19, r21
    275a:	62 17       	cp	r22, r18
    275c:	73 07       	cpc	r23, r19
    275e:	08 f4       	brcc	.+2      	; 0x2762 <main+0xaa>
    2760:	b9 01       	movw	r22, r18
    2762:	2e 17       	cp	r18, r30
    2764:	3f 07       	cpc	r19, r31
    2766:	08 f4       	brcc	.+2      	; 0x276a <main+0xb2>
    2768:	f9 01       	movw	r30, r18
    276a:	cf 01       	movw	r24, r30
		
        if(prev_cycles_min<cycles)
          prev_cycles_min=cycles;
        if(prev_cycles_max>cycles)
          prev_cycles_max=cycles;
		
        if(prev_cycles_max-prev_cycles_min<=1){
    276c:	86 1b       	sub	r24, r22
    276e:	97 0b       	sbc	r25, r23
    2770:	02 97       	sbiw	r24, 0x02	; 2
    2772:	30 f0       	brcs	.+12     	; 0x2780 <main+0xc8>
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	6f ef       	ldi	r22, 0xFF	; 255
    2778:	7f ef       	ldi	r23, 0xFF	; 255
    277a:	e0 e0       	ldi	r30, 0x00	; 0
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	03 c0       	rjmp	.+6      	; 0x2786 <main+0xce>
    2780:	bf 5f       	subi	r27, 0xFF	; 255
          wraps_ok++;
    2782:	b2 33       	cpi	r27, 0x32	; 50
    2784:	10 f4       	brcc	.+4      	; 0x278a <main+0xd2>
    2786:	a1 50       	subi	r26, 0x01	; 1
    2788:	b1 f6       	brne	.-84     	; 0x2736 <main+0x7e>
    278a:	30 93 31 06 	sts	0x0631, r19
    278e:	20 93 30 06 	sts	0x0630, r18
    2792:	10 92 b1 00 	sts	0x00B1, r1
        } else{
          wraps_ok=0;
          prev_cycles_min=0xffff;
          prev_cycles_max=0;
        }
      }

      /* Reset to boot state */
      ASSR = TCCR1B = TCCR2B = 0;
    2796:	80 91 b1 00 	lds	r24, 0x00B1
    279a:	80 93 81 00 	sts	0x0081, r24
    279e:	80 91 81 00 	lds	r24, 0x0081
    27a2:	80 93 b6 00 	sts	0x00B6, r24
    27a6:	80 91 b6 00 	lds	r24, 0x00B6
      while (ASSR & (1 << TCR2AUB | 1 << TCR2BUB))
    27aa:	99 27       	eor	r25, r25
    27ac:	83 70       	andi	r24, 0x03	; 3
    27ae:	90 70       	andi	r25, 0x00	; 0
    27b0:	89 2b       	or	r24, r25
    27b2:	c9 f7       	brne	.-14     	; 0x27a6 <main+0xee>
    27b4:	80 91 df 00 	lds	r24, 0x00DF
    27b8:	8d 7f       	andi	r24, 0xFD	; 253
    27ba:	80 93 df 00 	sts	0x00DF, r24
    27be:	80 91 dc 00 	lds	r24, 0x00DC
    27c2:	8d 7f       	andi	r24, 0xFD	; 253
    27c4:	80 93 dc 00 	sts	0x00DC, r24
    27c8:	80 91 df 00 	lds	r24, 0x00DF
    27cc:	8e 7f       	andi	r24, 0xFE	; 254
    27ce:	80 93 df 00 	sts	0x00DF, r24
    27d2:	80 91 dc 00 	lds	r24, 0x00DC
    27d6:	8e 7f       	andi	r24, 0xFE	; 254
    27d8:	80 93 dc 00 	sts	0x00DC, r24
    27dc:	80 e2       	ldi	r24, 0x20	; 32
    27de:	80 93 b6 00 	sts	0x00B6, r24
    27e2:	80 91 dc 00 	lds	r24, 0x00DC
    27e6:	8f 7c       	andi	r24, 0xCF	; 207
    27e8:	80 63       	ori	r24, 0x30	; 48
    27ea:	80 93 dc 00 	sts	0x00DC, r24
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	80 93 61 04 	sts	0x0461, r24
    27f4:	80 91 df 00 	lds	r24, 0x00DF
    27f8:	88 60       	ori	r24, 0x08	; 8
    27fa:	80 93 df 00 	sts	0x00DF, r24
    27fe:	84 e4       	ldi	r24, 0x44	; 68
    2800:	80 93 e1 05 	sts	0x05E1, r24
    2804:	80 91 c8 00 	lds	r24, 0x00C8
    2808:	8f 77       	andi	r24, 0x7F	; 127
    280a:	80 93 c8 00 	sts	0x00C8, r24
    280e:	80 91 c8 00 	lds	r24, 0x00C8
    2812:	8f 7b       	andi	r24, 0xBF	; 191
    2814:	80 93 c8 00 	sts	0x00C8, r24
    2818:	80 91 c8 00 	lds	r24, 0x00C8
    281c:	82 60       	ori	r24, 0x02	; 2
    281e:	80 93 c8 00 	sts	0x00C8, r24
    2822:	80 91 c9 00 	lds	r24, 0x00C9
    2826:	8f 7d       	andi	r24, 0xDF	; 223
    2828:	80 93 c9 00 	sts	0x00C9, r24
    282c:	80 91 c9 00 	lds	r24, 0x00C9
    2830:	8b 7f       	andi	r24, 0xFB	; 251
    2832:	80 93 c9 00 	sts	0x00C9, r24
    2836:	80 91 c9 00 	lds	r24, 0x00C9
    283a:	80 68       	ori	r24, 0x80	; 128
    283c:	80 93 c9 00 	sts	0x00C9, r24
    2840:	80 91 c9 00 	lds	r24, 0x00C9
    2844:	80 64       	ori	r24, 0x40	; 64
    2846:	80 93 c9 00 	sts	0x00C9, r24
    284a:	80 91 c9 00 	lds	r24, 0x00C9
    284e:	80 61       	ori	r24, 0x10	; 16
    2850:	80 93 c9 00 	sts	0x00C9, r24
    2854:	80 91 c9 00 	lds	r24, 0x00C9
    2858:	88 60       	ori	r24, 0x08	; 8
    285a:	80 93 c9 00 	sts	0x00C9, r24
    285e:	80 91 ca 00 	lds	r24, 0x00CA
    2862:	8f 77       	andi	r24, 0x7F	; 127
    2864:	80 93 ca 00 	sts	0x00CA, r24
    2868:	80 91 ca 00 	lds	r24, 0x00CA
    286c:	8f 7b       	andi	r24, 0xBF	; 191
    286e:	80 93 ca 00 	sts	0x00CA, r24
    2872:	80 91 ca 00 	lds	r24, 0x00CA
    2876:	8f 7d       	andi	r24, 0xDF	; 223
    2878:	80 93 ca 00 	sts	0x00CA, r24
    287c:	80 91 ca 00 	lds	r24, 0x00CA
    2880:	8f 7e       	andi	r24, 0xEF	; 239
    2882:	80 93 ca 00 	sts	0x00CA, r24
    2886:	80 91 ca 00 	lds	r24, 0x00CA
    288a:	8e 7f       	andi	r24, 0xFE	; 254
    288c:	80 93 ca 00 	sts	0x00CA, r24
    2890:	80 91 ca 00 	lds	r24, 0x00CA
    2894:	84 60       	ori	r24, 0x04	; 4
    2896:	80 93 ca 00 	sts	0x00CA, r24
    289a:	80 91 ca 00 	lds	r24, 0x00CA
    289e:	82 60       	ori	r24, 0x02	; 2
    28a0:	80 93 ca 00 	sts	0x00CA, r24
    28a4:	10 92 cd 00 	sts	0x00CD, r1
    28a8:	82 e2       	ldi	r24, 0x22	; 34
    28aa:	80 93 cc 00 	sts	0x00CC, r24
    28ae:	10 92 75 04 	sts	0x0475, r1
    28b2:	10 92 a4 05 	sts	0x05A4, r1
    28b6:	10 92 33 06 	sts	0x0633, r1
    28ba:	10 92 32 06 	sts	0x0632, r1
    28be:	10 92 6d 04 	sts	0x046D, r1
    28c2:	10 92 6c 04 	sts	0x046C, r1
    28c6:	10 92 a6 05 	sts	0x05A6, r1
    28ca:	10 92 a5 05 	sts	0x05A5, r1
    28ce:	10 92 2e 06 	sts	0x062E, r1
    28d2:	10 92 2d 06 	sts	0x062D, r1
    28d6:	10 92 1e 06 	sts	0x061E, r1
    28da:	10 92 1d 06 	sts	0x061D, r1
    28de:	10 92 8e 04 	sts	0x048E, r1
    28e2:	10 92 8d 04 	sts	0x048D, r1
    28e6:	6a 9a       	sbi	0x0d, 2	; 13
  async command void IO.toggle()     { atomic FLIP_BIT (port, bit); }
    
  inline async command void IO.makeInput()  { CLR_BIT  (ddr, bit);  }
  inline async command bool IO.isInput() { return !READ_BIT(ddr, bit); }
  inline async command void IO.makeOutput() { SET_BIT  (ddr, bit);  }
    28e8:	6b 9a       	sbi	0x0d, 3	; 13
    28ea:	6c 9a       	sbi	0x0d, 4	; 13
    28ec:	72 9a       	sbi	0x0e, 2	; 14
    28ee:	73 9a       	sbi	0x0e, 3	; 14
    28f0:	74 9a       	sbi	0x0e, 4	; 14
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	85 bf       	out	0x35, r24	; 53
    28f6:	80 91 39 01 	lds	r24, 0x0139
}
implementation {
  command error_t RFA1RadioOff.init() {
    if(!uniqueCount("RFA1RadioOn")) {
      TRXPR |= (1<<SLPTR); 
    28fa:	82 60       	ori	r24, 0x02	; 2
    28fc:	80 93 39 01 	sts	0x0139, r24
    2900:	d0 de       	rcall	.-608    	; 0x26a2 <RealMainP__Scheduler__runNextTask>
	 * FALSE so it will not put the system to sleep if there are no
	 * more tasks; if no tasks remain, continue on to software
	 * initialization */
	call PlatformInit.init();    
	while (call Scheduler.runNextTask());
    2902:	88 23       	and	r24, r24
    2904:	e9 f7       	brne	.-6      	; 0x2900 <main+0x248>
    2906:	10 92 e2 05 	sts	0x05E2, r1
    290a:	8a e1       	ldi	r24, 0x1A	; 26
    290c:	80 93 ce 06 	sts	0x06CE, r24
    2910:	87 ec       	ldi	r24, 0xC7	; 199
    2912:	80 93 49 01 	sts	0x0149, r24
    2916:	8a e7       	ldi	r24, 0x7A	; 122
    2918:	80 93 48 01 	sts	0x0148, r24
    291c:	80 ec       	ldi	r24, 0xC0	; 192
    291e:	80 93 45 01 	sts	0x0145, r24
    2922:	88 e3       	ldi	r24, 0x38	; 56
    2924:	80 93 dc 00 	sts	0x00DC, r24
    2928:	80 91 39 01 	lds	r24, 0x0139
    292c:	82 60       	ori	r24, 0x02	; 2
    292e:	80 93 39 01 	sts	0x0139, r24
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	80 93 aa 05 	sts	0x05AA, r24
    2938:	20 91 df 02 	lds	r18, 0x02DF
    293c:	30 91 e0 02 	lds	r19, 0x02E0
    2940:	2f 5f       	subi	r18, 0xFF	; 255
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	c9 01       	movw	r24, r18
    2946:	aa 27       	eor	r26, r26
    2948:	bb 27       	eor	r27, r27
    294a:	21 50       	subi	r18, 0x01	; 1
    294c:	30 40       	sbci	r19, 0x00	; 0
    294e:	80 93 98 05 	sts	0x0598, r24
    2952:	90 93 99 05 	sts	0x0599, r25
    2956:	a0 93 9a 05 	sts	0x059A, r26
    295a:	b0 93 9b 05 	sts	0x059B, r27
    295e:	88 e3       	ldi	r24, 0x38	; 56
    2960:	96 e0       	ldi	r25, 0x06	; 6
    2962:	90 93 70 04 	sts	0x0470, r25
    2966:	80 93 6f 04 	sts	0x046F, r24
    296a:	c2 96       	adiw	r24, 0x32	; 50
    296c:	90 93 72 04 	sts	0x0472, r25
    2970:	80 93 71 04 	sts	0x0471, r24
    2974:	8c e9       	ldi	r24, 0x9C	; 156
    2976:	96 e0       	ldi	r25, 0x06	; 6
    2978:	90 93 74 04 	sts	0x0474, r25
    297c:	80 93 73 04 	sts	0x0473, r24
    2980:	8f ef       	ldi	r24, 0xFF	; 255
    2982:	9f ef       	ldi	r25, 0xFF	; 255
    2984:	90 93 20 06 	sts	0x0620, r25
    2988:	80 93 1f 06 	sts	0x061F, r24
    298c:	90 93 22 06 	sts	0x0622, r25
    2990:	80 93 21 06 	sts	0x0621, r24
    2994:	90 93 24 06 	sts	0x0624, r25
    2998:	80 93 23 06 	sts	0x0623, r24
    299c:	90 93 26 06 	sts	0x0626, r25
    29a0:	80 93 25 06 	sts	0x0625, r24
    29a4:	90 93 28 06 	sts	0x0628, r25
    29a8:	80 93 27 06 	sts	0x0627, r24
    29ac:	22 95       	swap	r18
    29ae:	20 7f       	andi	r18, 0xF0	; 240
    29b0:	20 93 6b 04 	sts	0x046B, r18
    29b4:	10 92 e3 05 	sts	0x05E3, r1
    29b8:	74 de       	rcall	.-792    	; 0x26a2 <RealMainP__Scheduler__runNextTask>
    29ba:	88 23       	and	r24, r24

	/* Initialize software components.Then spin on the Scheduler,
	 * passing FALSE so it will not put the system to sleep if there
	 * are no more tasks; if no tasks remain, the system has booted
	 * successfully.*/
	call SoftwareInit.init(); 
	while (call Scheduler.runNextTask());
    29bc:	e9 f7       	brne	.-6      	; 0x29b8 <main+0x300>
    29be:	81 2f       	mov	r24, r17
    29c0:	99 27       	eor	r25, r25
    29c2:	8f bf       	out	0x3f, r24	; 63
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    29c4:	78 94       	sei
    29c6:	80 98       	cbi	0x10, 0	; 16
  SREG = original_SREG;
    29c8:	80 91 7e 00 	lds	r24, 0x007E
    29cc:	81 60       	ori	r24, 0x01	; 1
    29ce:	80 93 7e 00 	sts	0x007E, r24
    29d2:	44 ef       	ldi	r20, 0xF4	; 244
    29d4:	51 e0       	ldi	r21, 0x01	; 1
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <VirtualizeTimerC__0__Timer__startPeriodic>
    29e0:	40 e1       	ldi	r20, 0x10	; 16
    29e2:	57 e2       	ldi	r21, 0x27	; 39
    29e4:	60 e0       	ldi	r22, 0x00	; 0
/* Saves current interrupt mask state and disables interrupts. */
inline __nesc_atomic_t
__nesc_atomic_start(void) @spontaneous() @safe()
{
    __nesc_atomic_t result = SREG;
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <VirtualizeTimerC__0__Timer__startPeriodic>
    29ee:	48 e8       	ldi	r20, 0x88	; 136
    29f0:	53 e1       	ldi	r21, 0x13	; 19
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <VirtualizeTimerC__0__Timer__startPeriodic>
    29fc:	8f b7       	in	r24, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	c8 2f       	mov	r28, r24
    2a02:	dd 27       	eor	r29, r29
    2a04:	1a c0       	rjmp	.+52     	; 0x2a3a <main+0x382>
    __nesc_disable_interrupt();
    asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2a06:	80 91 61 04 	lds	r24, 0x0461
    2a0a:	87 ff       	sbrs	r24, 7
    2a0c:	0d c0       	rjmp	.+26     	; 0x2a28 <main+0x370>
    2a0e:	80 91 7a 00 	lds	r24, 0x007A
    2a12:	80 91 dc 00 	lds	r24, 0x00DC
    2a16:	10 92 61 04 	sts	0x0461, r1
		}

		return time.full;
	}

	async command void SfdCapture.set(uint32_t value) 
	{ 
		// SCTSR is read only
	}

// ----- SFD CAPTURE: has no interrupt (use RX_START instead)

	async command bool SfdCapture.test() { return FALSE; }
	async command void SfdCapture.reset() { }
	async command void SfdCapture.start() { }
	async command void SfdCapture.stop() { }
	async command bool SfdCapture.isOn() { return FALSE; }

// ----- SFD CAPTURE: symbol counter control register (SCCR), timestamping enable (SCTES)

	async command void SfdCapture.setMode(uint8_t mode)
	{
		atomic
		{
			SCCR0 = (SCCR0 & ~(1 << SCTSE))
				| (mode & 0x1) << SCTSE;
		}
	}

	async command uint8_t SfdCapture.getMode()
	{
		return (SCCR0 >> SCTSE) & 0x1;
	}


// ----- BEACON CAPTURE: symbol counter time stamp register (SCTSR)

	async command uint32_t BeaconCapture.get()
	{
		reg32_t time;

		atomic
		{
			time.ll = SCBTSRLL;
			time.lh = SCBTSRLH;
			time.hl = SCBTSRHL;
			time.hh	= SCBTSRHH;
		}

		return time.full;
	}

	async command void BeaconCapture.set(uint32_t value) 
	{ 
		reg32_t time;
		
		time.full = value;

		atomic
		{
			SCBTSRHH = time.hh;
			SCBTSRHL = time.hl;
			SCBTSRLH = time.lh;
			SCBTSRLL = time.ll;
		}
	}

// ----- BEACON CAPTURE: has no interrupt (use RX_START instead)

	async command bool BeaconCapture.test() { return FALSE; }
	async command void BeaconCapture.reset() { }
	async command void BeaconCapture.start() { }
	async command void BeaconCapture.stop() { }
	async command bool BeaconCapture.isOn() { return FALSE; }

// ----- BEACON CAPTURE: symbol counter control register (SCCR), timestamping enable (SCTES)

	async command void BeaconCapture.setMode(uint8_t mode)
	{
		atomic
		{
			SCCR0 = (SCCR0 & ~(1 << SCTSE))
				| (mode & 0x1) << SCTSE;
		}
	}

	async command uint8_t BeaconCapture.getMode()
	{
		return (SCCR0 >> SCTSE) & 0x1;
	}

// ----- MCUPOWER

	async command mcu_power_t McuPowerOverride.lowestState()
	{
		// TODO: check out why ATM128_POWER_DOWN does not work

		if( SCCR0 & (1 << SCEN) )
    2a1a:	83 b7       	in	r24, 0x33	; 51
    2a1c:	e0 e2       	ldi	r30, 0x20	; 32
    2a1e:	f1 e0       	ldi	r31, 0x01	; 1
    2a20:	e4 91       	lpm	r30, Z
    2a22:	80 7f       	andi	r24, 0xF0	; 240
    2a24:	8e 2b       	or	r24, r30
    2a26:	83 bf       	out	0x33, r24	; 51
    2a28:	83 b7       	in	r24, 0x33	; 51
    2a2a:	81 60       	ori	r24, 0x01	; 1
    2a2c:	83 bf       	out	0x33, r24	; 51
    2a2e:	78 94       	sei
    2a30:	88 95       	sleep
    2a32:	f8 94       	cli
    2a34:	83 b7       	in	r24, 0x33	; 51
    2a36:	8e 7f       	andi	r24, 0xFE	; 254
    2a38:	83 bf       	out	0x33, r24	; 51
    2a3a:	0e 94 86 02 	call	0x50c	; 0x50c <SchedulerBasicP__popTask>
    2a3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a40:	11 f3       	breq	.-60     	; 0x2a06 <main+0x34e>
    2a42:	cf bf       	out	0x3f, r28	; 63
    2a44:	30 da       	rcall	.-2976   	; 0x1ea6 <SchedulerBasicP__TaskBasic__runTask>
    2a46:	da cf       	rjmp	.-76     	; 0x29fc <main+0x344>

00002a48 <__subsf3>:
/* Restores interrupt mask to original state. */
inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG) @spontaneous() @safe()
{
  asm volatile("" : : : "memory"); /* ensure atomic section effect visibility */
    2a48:	50 58       	subi	r21, 0x80	; 128

00002a4a <__addsf3>:
    2a4a:	bb 27       	eor	r27, r27
    2a4c:	aa 27       	eor	r26, r26
    2a4e:	0e d0       	rcall	.+28     	; 0x2a6c <__addsf3x>
    2a50:	e0 c0       	rjmp	.+448    	; 0x2c12 <__fp_round>
    2a52:	d1 d0       	rcall	.+418    	; 0x2bf6 <__fp_pscA>
    2a54:	30 f0       	brcs	.+12     	; 0x2a62 <__addsf3+0x18>
    2a56:	d6 d0       	rcall	.+428    	; 0x2c04 <__fp_pscB>
    2a58:	20 f0       	brcs	.+8      	; 0x2a62 <__addsf3+0x18>
    2a5a:	31 f4       	brne	.+12     	; 0x2a68 <__addsf3+0x1e>
    2a5c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a5e:	11 f4       	brne	.+4      	; 0x2a64 <__addsf3+0x1a>
    2a60:	1e f4       	brtc	.+6      	; 0x2a68 <__addsf3+0x1e>
    2a62:	c6 c0       	rjmp	.+396    	; 0x2bf0 <__fp_nan>
    2a64:	0e f4       	brtc	.+2      	; 0x2a68 <__addsf3+0x1e>
    2a66:	e0 95       	com	r30
    2a68:	e7 fb       	bst	r30, 7
    2a6a:	bc c0       	rjmp	.+376    	; 0x2be4 <__fp_inf>

00002a6c <__addsf3x>:
    2a6c:	e9 2f       	mov	r30, r25
    2a6e:	e2 d0       	rcall	.+452    	; 0x2c34 <__fp_split3>
    2a70:	80 f3       	brcs	.-32     	; 0x2a52 <__addsf3+0x8>
    2a72:	ba 17       	cp	r27, r26
    2a74:	62 07       	cpc	r22, r18
    2a76:	73 07       	cpc	r23, r19
    2a78:	84 07       	cpc	r24, r20
    2a7a:	95 07       	cpc	r25, r21
    2a7c:	18 f0       	brcs	.+6      	; 0x2a84 <__addsf3x+0x18>
    2a7e:	71 f4       	brne	.+28     	; 0x2a9c <__addsf3x+0x30>
    2a80:	9e f5       	brtc	.+102    	; 0x2ae8 <__addsf3x+0x7c>
    2a82:	fa c0       	rjmp	.+500    	; 0x2c78 <__fp_zero>
    2a84:	0e f4       	brtc	.+2      	; 0x2a88 <__addsf3x+0x1c>
    2a86:	e0 95       	com	r30
    2a88:	0b 2e       	mov	r0, r27
    2a8a:	ba 2f       	mov	r27, r26
    2a8c:	a0 2d       	mov	r26, r0
    2a8e:	0b 01       	movw	r0, r22
    2a90:	b9 01       	movw	r22, r18
    2a92:	90 01       	movw	r18, r0
    2a94:	0c 01       	movw	r0, r24
    2a96:	ca 01       	movw	r24, r20
    2a98:	a0 01       	movw	r20, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	ff 27       	eor	r31, r31
    2a9e:	59 1b       	sub	r21, r25
    2aa0:	99 f0       	breq	.+38     	; 0x2ac8 <__addsf3x+0x5c>
    2aa2:	59 3f       	cpi	r21, 0xF9	; 249
    2aa4:	50 f4       	brcc	.+20     	; 0x2aba <__addsf3x+0x4e>
    2aa6:	50 3e       	cpi	r21, 0xE0	; 224
    2aa8:	68 f1       	brcs	.+90     	; 0x2b04 <__addsf3x+0x98>
    2aaa:	1a 16       	cp	r1, r26
    2aac:	f0 40       	sbci	r31, 0x00	; 0
    2aae:	a2 2f       	mov	r26, r18
    2ab0:	23 2f       	mov	r18, r19
    2ab2:	34 2f       	mov	r19, r20
    2ab4:	44 27       	eor	r20, r20
    2ab6:	58 5f       	subi	r21, 0xF8	; 248
    2ab8:	f3 cf       	rjmp	.-26     	; 0x2aa0 <__addsf3x+0x34>
    2aba:	46 95       	lsr	r20
    2abc:	37 95       	ror	r19
    2abe:	27 95       	ror	r18
    2ac0:	a7 95       	ror	r26
    2ac2:	f0 40       	sbci	r31, 0x00	; 0
    2ac4:	53 95       	inc	r21
    2ac6:	c9 f7       	brne	.-14     	; 0x2aba <__addsf3x+0x4e>
    2ac8:	7e f4       	brtc	.+30     	; 0x2ae8 <__addsf3x+0x7c>
    2aca:	1f 16       	cp	r1, r31
    2acc:	ba 0b       	sbc	r27, r26
    2ace:	62 0b       	sbc	r22, r18
    2ad0:	73 0b       	sbc	r23, r19
    2ad2:	84 0b       	sbc	r24, r20
    2ad4:	ba f0       	brmi	.+46     	; 0x2b04 <__addsf3x+0x98>
    2ad6:	91 50       	subi	r25, 0x01	; 1
    2ad8:	a1 f0       	breq	.+40     	; 0x2b02 <__addsf3x+0x96>
    2ada:	ff 0f       	add	r31, r31
    2adc:	bb 1f       	adc	r27, r27
    2ade:	66 1f       	adc	r22, r22
    2ae0:	77 1f       	adc	r23, r23
    2ae2:	88 1f       	adc	r24, r24
    2ae4:	c2 f7       	brpl	.-16     	; 0x2ad6 <__addsf3x+0x6a>
    2ae6:	0e c0       	rjmp	.+28     	; 0x2b04 <__addsf3x+0x98>
    2ae8:	ba 0f       	add	r27, r26
    2aea:	62 1f       	adc	r22, r18
    2aec:	73 1f       	adc	r23, r19
    2aee:	84 1f       	adc	r24, r20
    2af0:	48 f4       	brcc	.+18     	; 0x2b04 <__addsf3x+0x98>
    2af2:	87 95       	ror	r24
    2af4:	77 95       	ror	r23
    2af6:	67 95       	ror	r22
    2af8:	b7 95       	ror	r27
    2afa:	f7 95       	ror	r31
    2afc:	9e 3f       	cpi	r25, 0xFE	; 254
    2afe:	08 f0       	brcs	.+2      	; 0x2b02 <__addsf3x+0x96>
    2b00:	b3 cf       	rjmp	.-154    	; 0x2a68 <__addsf3+0x1e>
    2b02:	93 95       	inc	r25
    2b04:	88 0f       	add	r24, r24
    2b06:	08 f0       	brcs	.+2      	; 0x2b0a <__addsf3x+0x9e>
    2b08:	99 27       	eor	r25, r25
    2b0a:	ee 0f       	add	r30, r30
    2b0c:	97 95       	ror	r25
    2b0e:	87 95       	ror	r24
    2b10:	08 95       	ret

00002b12 <__fixunssfsi>:
    2b12:	98 d0       	rcall	.+304    	; 0x2c44 <__fp_splitA>
    2b14:	88 f0       	brcs	.+34     	; 0x2b38 <__fixunssfsi+0x26>
    2b16:	9f 57       	subi	r25, 0x7F	; 127
    2b18:	90 f0       	brcs	.+36     	; 0x2b3e <__fixunssfsi+0x2c>
    2b1a:	b9 2f       	mov	r27, r25
    2b1c:	99 27       	eor	r25, r25
    2b1e:	b7 51       	subi	r27, 0x17	; 23
    2b20:	a0 f0       	brcs	.+40     	; 0x2b4a <__fixunssfsi+0x38>
    2b22:	d1 f0       	breq	.+52     	; 0x2b58 <__fixunssfsi+0x46>
    2b24:	66 0f       	add	r22, r22
    2b26:	77 1f       	adc	r23, r23
    2b28:	88 1f       	adc	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	1a f0       	brmi	.+6      	; 0x2b34 <__fixunssfsi+0x22>
    2b2e:	ba 95       	dec	r27
    2b30:	c9 f7       	brne	.-14     	; 0x2b24 <__fixunssfsi+0x12>
    2b32:	12 c0       	rjmp	.+36     	; 0x2b58 <__fixunssfsi+0x46>
    2b34:	b1 30       	cpi	r27, 0x01	; 1
    2b36:	81 f0       	breq	.+32     	; 0x2b58 <__fixunssfsi+0x46>
    2b38:	9f d0       	rcall	.+318    	; 0x2c78 <__fp_zero>
    2b3a:	b1 e0       	ldi	r27, 0x01	; 1
    2b3c:	08 95       	ret
    2b3e:	9c c0       	rjmp	.+312    	; 0x2c78 <__fp_zero>
    2b40:	67 2f       	mov	r22, r23
    2b42:	78 2f       	mov	r23, r24
    2b44:	88 27       	eor	r24, r24
    2b46:	b8 5f       	subi	r27, 0xF8	; 248
    2b48:	39 f0       	breq	.+14     	; 0x2b58 <__fixunssfsi+0x46>
    2b4a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b4c:	cc f3       	brlt	.-14     	; 0x2b40 <__fixunssfsi+0x2e>
    2b4e:	86 95       	lsr	r24
    2b50:	77 95       	ror	r23
    2b52:	67 95       	ror	r22
    2b54:	b3 95       	inc	r27
    2b56:	d9 f7       	brne	.-10     	; 0x2b4e <__fixunssfsi+0x3c>
    2b58:	3e f4       	brtc	.+14     	; 0x2b68 <__fixunssfsi+0x56>
    2b5a:	90 95       	com	r25
    2b5c:	80 95       	com	r24
    2b5e:	70 95       	com	r23
    2b60:	61 95       	neg	r22
    2b62:	7f 4f       	sbci	r23, 0xFF	; 255
    2b64:	8f 4f       	sbci	r24, 0xFF	; 255
    2b66:	9f 4f       	sbci	r25, 0xFF	; 255
    2b68:	08 95       	ret

00002b6a <__floatunsisf>:
    2b6a:	e8 94       	clt
    2b6c:	09 c0       	rjmp	.+18     	; 0x2b80 <__floatsisf+0x12>

00002b6e <__floatsisf>:
    2b6e:	97 fb       	bst	r25, 7
    2b70:	3e f4       	brtc	.+14     	; 0x2b80 <__floatsisf+0x12>
    2b72:	90 95       	com	r25
    2b74:	80 95       	com	r24
    2b76:	70 95       	com	r23
    2b78:	61 95       	neg	r22
    2b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b80:	99 23       	and	r25, r25
    2b82:	a9 f0       	breq	.+42     	; 0x2bae <__floatsisf+0x40>
    2b84:	f9 2f       	mov	r31, r25
    2b86:	96 e9       	ldi	r25, 0x96	; 150
    2b88:	bb 27       	eor	r27, r27
    2b8a:	93 95       	inc	r25
    2b8c:	f6 95       	lsr	r31
    2b8e:	87 95       	ror	r24
    2b90:	77 95       	ror	r23
    2b92:	67 95       	ror	r22
    2b94:	b7 95       	ror	r27
    2b96:	f1 11       	cpse	r31, r1
    2b98:	f8 cf       	rjmp	.-16     	; 0x2b8a <__floatsisf+0x1c>
    2b9a:	fa f4       	brpl	.+62     	; 0x2bda <__floatsisf+0x6c>
    2b9c:	bb 0f       	add	r27, r27
    2b9e:	11 f4       	brne	.+4      	; 0x2ba4 <__floatsisf+0x36>
    2ba0:	60 ff       	sbrs	r22, 0
    2ba2:	1b c0       	rjmp	.+54     	; 0x2bda <__floatsisf+0x6c>
    2ba4:	6f 5f       	subi	r22, 0xFF	; 255
    2ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    2baa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bac:	16 c0       	rjmp	.+44     	; 0x2bda <__floatsisf+0x6c>
    2bae:	88 23       	and	r24, r24
    2bb0:	11 f0       	breq	.+4      	; 0x2bb6 <__floatsisf+0x48>
    2bb2:	96 e9       	ldi	r25, 0x96	; 150
    2bb4:	11 c0       	rjmp	.+34     	; 0x2bd8 <__floatsisf+0x6a>
    2bb6:	77 23       	and	r23, r23
    2bb8:	21 f0       	breq	.+8      	; 0x2bc2 <__floatsisf+0x54>
    2bba:	9e e8       	ldi	r25, 0x8E	; 142
    2bbc:	87 2f       	mov	r24, r23
    2bbe:	76 2f       	mov	r23, r22
    2bc0:	05 c0       	rjmp	.+10     	; 0x2bcc <__floatsisf+0x5e>
    2bc2:	66 23       	and	r22, r22
    2bc4:	71 f0       	breq	.+28     	; 0x2be2 <__floatsisf+0x74>
    2bc6:	96 e8       	ldi	r25, 0x86	; 134
    2bc8:	86 2f       	mov	r24, r22
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	2a f0       	brmi	.+10     	; 0x2bda <__floatsisf+0x6c>
    2bd0:	9a 95       	dec	r25
    2bd2:	66 0f       	add	r22, r22
    2bd4:	77 1f       	adc	r23, r23
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	da f7       	brpl	.-10     	; 0x2bd0 <__floatsisf+0x62>
    2bda:	88 0f       	add	r24, r24
    2bdc:	96 95       	lsr	r25
    2bde:	87 95       	ror	r24
    2be0:	97 f9       	bld	r25, 7
    2be2:	08 95       	ret

00002be4 <__fp_inf>:
    2be4:	97 f9       	bld	r25, 7
    2be6:	9f 67       	ori	r25, 0x7F	; 127
    2be8:	80 e8       	ldi	r24, 0x80	; 128
    2bea:	70 e0       	ldi	r23, 0x00	; 0
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	08 95       	ret

00002bf0 <__fp_nan>:
    2bf0:	9f ef       	ldi	r25, 0xFF	; 255
    2bf2:	80 ec       	ldi	r24, 0xC0	; 192
    2bf4:	08 95       	ret

00002bf6 <__fp_pscA>:
    2bf6:	00 24       	eor	r0, r0
    2bf8:	0a 94       	dec	r0
    2bfa:	16 16       	cp	r1, r22
    2bfc:	17 06       	cpc	r1, r23
    2bfe:	18 06       	cpc	r1, r24
    2c00:	09 06       	cpc	r0, r25
    2c02:	08 95       	ret

00002c04 <__fp_pscB>:
    2c04:	00 24       	eor	r0, r0
    2c06:	0a 94       	dec	r0
    2c08:	12 16       	cp	r1, r18
    2c0a:	13 06       	cpc	r1, r19
    2c0c:	14 06       	cpc	r1, r20
    2c0e:	05 06       	cpc	r0, r21
    2c10:	08 95       	ret

00002c12 <__fp_round>:
    2c12:	09 2e       	mov	r0, r25
    2c14:	03 94       	inc	r0
    2c16:	00 0c       	add	r0, r0
    2c18:	11 f4       	brne	.+4      	; 0x2c1e <__fp_round+0xc>
    2c1a:	88 23       	and	r24, r24
    2c1c:	52 f0       	brmi	.+20     	; 0x2c32 <__fp_round+0x20>
    2c1e:	bb 0f       	add	r27, r27
    2c20:	40 f4       	brcc	.+16     	; 0x2c32 <__fp_round+0x20>
    2c22:	bf 2b       	or	r27, r31
    2c24:	11 f4       	brne	.+4      	; 0x2c2a <__fp_round+0x18>
    2c26:	60 ff       	sbrs	r22, 0
    2c28:	04 c0       	rjmp	.+8      	; 0x2c32 <__fp_round+0x20>
    2c2a:	6f 5f       	subi	r22, 0xFF	; 255
    2c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c30:	9f 4f       	sbci	r25, 0xFF	; 255
    2c32:	08 95       	ret

00002c34 <__fp_split3>:
    2c34:	57 fd       	sbrc	r21, 7
    2c36:	90 58       	subi	r25, 0x80	; 128
    2c38:	44 0f       	add	r20, r20
    2c3a:	55 1f       	adc	r21, r21
    2c3c:	59 f0       	breq	.+22     	; 0x2c54 <__fp_splitA+0x10>
    2c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c40:	71 f0       	breq	.+28     	; 0x2c5e <__fp_splitA+0x1a>
    2c42:	47 95       	ror	r20

00002c44 <__fp_splitA>:
    2c44:	88 0f       	add	r24, r24
    2c46:	97 fb       	bst	r25, 7
    2c48:	99 1f       	adc	r25, r25
    2c4a:	61 f0       	breq	.+24     	; 0x2c64 <__fp_splitA+0x20>
    2c4c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c4e:	79 f0       	breq	.+30     	; 0x2c6e <__fp_splitA+0x2a>
    2c50:	87 95       	ror	r24
    2c52:	08 95       	ret
    2c54:	12 16       	cp	r1, r18
    2c56:	13 06       	cpc	r1, r19
    2c58:	14 06       	cpc	r1, r20
    2c5a:	55 1f       	adc	r21, r21
    2c5c:	f2 cf       	rjmp	.-28     	; 0x2c42 <__fp_split3+0xe>
    2c5e:	46 95       	lsr	r20
    2c60:	f1 df       	rcall	.-30     	; 0x2c44 <__fp_splitA>
    2c62:	08 c0       	rjmp	.+16     	; 0x2c74 <__fp_splitA+0x30>
    2c64:	16 16       	cp	r1, r22
    2c66:	17 06       	cpc	r1, r23
    2c68:	18 06       	cpc	r1, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	f1 cf       	rjmp	.-30     	; 0x2c50 <__fp_splitA+0xc>
    2c6e:	86 95       	lsr	r24
    2c70:	71 05       	cpc	r23, r1
    2c72:	61 05       	cpc	r22, r1
    2c74:	08 94       	sec
    2c76:	08 95       	ret

00002c78 <__fp_zero>:
    2c78:	e8 94       	clt

00002c7a <__fp_szero>:
    2c7a:	bb 27       	eor	r27, r27
    2c7c:	66 27       	eor	r22, r22
    2c7e:	77 27       	eor	r23, r23
    2c80:	cb 01       	movw	r24, r22
    2c82:	97 f9       	bld	r25, 7
    2c84:	08 95       	ret

00002c86 <__mulsf3>:
    2c86:	0b d0       	rcall	.+22     	; 0x2c9e <__mulsf3x>
    2c88:	c4 cf       	rjmp	.-120    	; 0x2c12 <__fp_round>
    2c8a:	b5 df       	rcall	.-150    	; 0x2bf6 <__fp_pscA>
    2c8c:	28 f0       	brcs	.+10     	; 0x2c98 <__mulsf3+0x12>
    2c8e:	ba df       	rcall	.-140    	; 0x2c04 <__fp_pscB>
    2c90:	18 f0       	brcs	.+6      	; 0x2c98 <__mulsf3+0x12>
    2c92:	95 23       	and	r25, r21
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <__mulsf3+0x12>
    2c96:	a6 cf       	rjmp	.-180    	; 0x2be4 <__fp_inf>
    2c98:	ab cf       	rjmp	.-170    	; 0x2bf0 <__fp_nan>
    2c9a:	11 24       	eor	r1, r1
    2c9c:	ee cf       	rjmp	.-36     	; 0x2c7a <__fp_szero>

00002c9e <__mulsf3x>:
    2c9e:	ca df       	rcall	.-108    	; 0x2c34 <__fp_split3>
    2ca0:	a0 f3       	brcs	.-24     	; 0x2c8a <__mulsf3+0x4>

00002ca2 <__mulsf3_pse>:
    2ca2:	95 9f       	mul	r25, r21
    2ca4:	d1 f3       	breq	.-12     	; 0x2c9a <__mulsf3+0x14>
    2ca6:	95 0f       	add	r25, r21
    2ca8:	50 e0       	ldi	r21, 0x00	; 0
    2caa:	55 1f       	adc	r21, r21
    2cac:	62 9f       	mul	r22, r18
    2cae:	f0 01       	movw	r30, r0
    2cb0:	72 9f       	mul	r23, r18
    2cb2:	bb 27       	eor	r27, r27
    2cb4:	f0 0d       	add	r31, r0
    2cb6:	b1 1d       	adc	r27, r1
    2cb8:	63 9f       	mul	r22, r19
    2cba:	aa 27       	eor	r26, r26
    2cbc:	f0 0d       	add	r31, r0
    2cbe:	b1 1d       	adc	r27, r1
    2cc0:	aa 1f       	adc	r26, r26
    2cc2:	64 9f       	mul	r22, r20
    2cc4:	66 27       	eor	r22, r22
    2cc6:	b0 0d       	add	r27, r0
    2cc8:	a1 1d       	adc	r26, r1
    2cca:	66 1f       	adc	r22, r22
    2ccc:	82 9f       	mul	r24, r18
    2cce:	22 27       	eor	r18, r18
    2cd0:	b0 0d       	add	r27, r0
    2cd2:	a1 1d       	adc	r26, r1
    2cd4:	62 1f       	adc	r22, r18
    2cd6:	73 9f       	mul	r23, r19
    2cd8:	b0 0d       	add	r27, r0
    2cda:	a1 1d       	adc	r26, r1
    2cdc:	62 1f       	adc	r22, r18
    2cde:	83 9f       	mul	r24, r19
    2ce0:	a0 0d       	add	r26, r0
    2ce2:	61 1d       	adc	r22, r1
    2ce4:	22 1f       	adc	r18, r18
    2ce6:	74 9f       	mul	r23, r20
    2ce8:	33 27       	eor	r19, r19
    2cea:	a0 0d       	add	r26, r0
    2cec:	61 1d       	adc	r22, r1
    2cee:	23 1f       	adc	r18, r19
    2cf0:	84 9f       	mul	r24, r20
    2cf2:	60 0d       	add	r22, r0
    2cf4:	21 1d       	adc	r18, r1
    2cf6:	82 2f       	mov	r24, r18
    2cf8:	76 2f       	mov	r23, r22
    2cfa:	6a 2f       	mov	r22, r26
    2cfc:	11 24       	eor	r1, r1
    2cfe:	9f 57       	subi	r25, 0x7F	; 127
    2d00:	50 40       	sbci	r21, 0x00	; 0
    2d02:	8a f0       	brmi	.+34     	; 0x2d26 <__mulsf3_pse+0x84>
    2d04:	e1 f0       	breq	.+56     	; 0x2d3e <__mulsf3_pse+0x9c>
    2d06:	88 23       	and	r24, r24
    2d08:	4a f0       	brmi	.+18     	; 0x2d1c <__mulsf3_pse+0x7a>
    2d0a:	ee 0f       	add	r30, r30
    2d0c:	ff 1f       	adc	r31, r31
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	66 1f       	adc	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	88 1f       	adc	r24, r24
    2d16:	91 50       	subi	r25, 0x01	; 1
    2d18:	50 40       	sbci	r21, 0x00	; 0
    2d1a:	a9 f7       	brne	.-22     	; 0x2d06 <__mulsf3_pse+0x64>
    2d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d1e:	51 05       	cpc	r21, r1
    2d20:	70 f0       	brcs	.+28     	; 0x2d3e <__mulsf3_pse+0x9c>
    2d22:	60 cf       	rjmp	.-320    	; 0x2be4 <__fp_inf>
    2d24:	aa cf       	rjmp	.-172    	; 0x2c7a <__fp_szero>
    2d26:	5f 3f       	cpi	r21, 0xFF	; 255
    2d28:	ec f3       	brlt	.-6      	; 0x2d24 <__mulsf3_pse+0x82>
    2d2a:	98 3e       	cpi	r25, 0xE8	; 232
    2d2c:	dc f3       	brlt	.-10     	; 0x2d24 <__mulsf3_pse+0x82>
    2d2e:	86 95       	lsr	r24
    2d30:	77 95       	ror	r23
    2d32:	67 95       	ror	r22
    2d34:	b7 95       	ror	r27
    2d36:	f7 95       	ror	r31
    2d38:	e7 95       	ror	r30
    2d3a:	9f 5f       	subi	r25, 0xFF	; 255
    2d3c:	c1 f7       	brne	.-16     	; 0x2d2e <__mulsf3_pse+0x8c>
    2d3e:	fe 2b       	or	r31, r30
    2d40:	88 0f       	add	r24, r24
    2d42:	91 1d       	adc	r25, r1
    2d44:	96 95       	lsr	r25
    2d46:	87 95       	ror	r24
    2d48:	97 f9       	bld	r25, 7
    2d4a:	08 95       	ret

00002d4c <__udivmodhi4>:
    2d4c:	aa 1b       	sub	r26, r26
    2d4e:	bb 1b       	sub	r27, r27
    2d50:	51 e1       	ldi	r21, 0x11	; 17
    2d52:	07 c0       	rjmp	.+14     	; 0x2d62 <__udivmodhi4_ep>

00002d54 <__udivmodhi4_loop>:
    2d54:	aa 1f       	adc	r26, r26
    2d56:	bb 1f       	adc	r27, r27
    2d58:	a6 17       	cp	r26, r22
    2d5a:	b7 07       	cpc	r27, r23
    2d5c:	10 f0       	brcs	.+4      	; 0x2d62 <__udivmodhi4_ep>
    2d5e:	a6 1b       	sub	r26, r22
    2d60:	b7 0b       	sbc	r27, r23

00002d62 <__udivmodhi4_ep>:
    2d62:	88 1f       	adc	r24, r24
    2d64:	99 1f       	adc	r25, r25
    2d66:	5a 95       	dec	r21
    2d68:	a9 f7       	brne	.-22     	; 0x2d54 <__udivmodhi4_loop>
    2d6a:	80 95       	com	r24
    2d6c:	90 95       	com	r25
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	08 95       	ret

00002d74 <__mulsi3>:
    2d74:	62 9f       	mul	r22, r18
    2d76:	d0 01       	movw	r26, r0
    2d78:	73 9f       	mul	r23, r19
    2d7a:	f0 01       	movw	r30, r0
    2d7c:	82 9f       	mul	r24, r18
    2d7e:	e0 0d       	add	r30, r0
    2d80:	f1 1d       	adc	r31, r1
    2d82:	64 9f       	mul	r22, r20
    2d84:	e0 0d       	add	r30, r0
    2d86:	f1 1d       	adc	r31, r1
    2d88:	92 9f       	mul	r25, r18
    2d8a:	f0 0d       	add	r31, r0
    2d8c:	83 9f       	mul	r24, r19
    2d8e:	f0 0d       	add	r31, r0
    2d90:	74 9f       	mul	r23, r20
    2d92:	f0 0d       	add	r31, r0
    2d94:	65 9f       	mul	r22, r21
    2d96:	f0 0d       	add	r31, r0
    2d98:	99 27       	eor	r25, r25
    2d9a:	72 9f       	mul	r23, r18
    2d9c:	b0 0d       	add	r27, r0
    2d9e:	e1 1d       	adc	r30, r1
    2da0:	f9 1f       	adc	r31, r25
    2da2:	63 9f       	mul	r22, r19
    2da4:	b0 0d       	add	r27, r0
    2da6:	e1 1d       	adc	r30, r1
    2da8:	f9 1f       	adc	r31, r25
    2daa:	bd 01       	movw	r22, r26
    2dac:	cf 01       	movw	r24, r30
    2dae:	11 24       	eor	r1, r1
    2db0:	08 95       	ret

00002db2 <__prologue_saves__>:
    2db2:	2f 92       	push	r2
    2db4:	3f 92       	push	r3
    2db6:	4f 92       	push	r4
    2db8:	5f 92       	push	r5
    2dba:	6f 92       	push	r6
    2dbc:	7f 92       	push	r7
    2dbe:	8f 92       	push	r8
    2dc0:	9f 92       	push	r9
    2dc2:	af 92       	push	r10
    2dc4:	bf 92       	push	r11
    2dc6:	cf 92       	push	r12
    2dc8:	df 92       	push	r13
    2dca:	ef 92       	push	r14
    2dcc:	ff 92       	push	r15
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	ca 1b       	sub	r28, r26
    2ddc:	db 0b       	sbc	r29, r27
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	09 94       	ijmp

00002dea <__epilogue_restores__>:
    2dea:	2a 88       	ldd	r2, Y+18	; 0x12
    2dec:	39 88       	ldd	r3, Y+17	; 0x11
    2dee:	48 88       	ldd	r4, Y+16	; 0x10
    2df0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2df2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2df4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2df6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2df8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dfc:	b9 84       	ldd	r11, Y+9	; 0x09
    2dfe:	c8 84       	ldd	r12, Y+8	; 0x08
    2e00:	df 80       	ldd	r13, Y+7	; 0x07
    2e02:	ee 80       	ldd	r14, Y+6	; 0x06
    2e04:	fd 80       	ldd	r15, Y+5	; 0x05
    2e06:	0c 81       	ldd	r16, Y+4	; 0x04
    2e08:	1b 81       	ldd	r17, Y+3	; 0x03
    2e0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e0c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e0e:	ce 0f       	add	r28, r30
    2e10:	d1 1d       	adc	r29, r1
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	ed 01       	movw	r28, r26
    2e1e:	08 95       	ret

00002e20 <memcpy>:
    2e20:	fb 01       	movw	r30, r22
    2e22:	dc 01       	movw	r26, r24
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <memcpy+0xa>
    2e26:	01 90       	ld	r0, Z+
    2e28:	0d 92       	st	X+, r0
    2e2a:	41 50       	subi	r20, 0x01	; 1
    2e2c:	50 40       	sbci	r21, 0x00	; 0
    2e2e:	d8 f7       	brcc	.-10     	; 0x2e26 <memcpy+0x6>
    2e30:	08 95       	ret

00002e32 <memset>:
    2e32:	dc 01       	movw	r26, r24
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <memset+0x6>
    2e36:	6d 93       	st	X+, r22
    2e38:	41 50       	subi	r20, 0x01	; 1
    2e3a:	50 40       	sbci	r21, 0x00	; 0
    2e3c:	e0 f7       	brcc	.-8      	; 0x2e36 <memset+0x4>
    2e3e:	08 95       	ret

00002e40 <strcmp>:
    2e40:	fb 01       	movw	r30, r22
    2e42:	dc 01       	movw	r26, r24
    2e44:	8d 91       	ld	r24, X+
    2e46:	01 90       	ld	r0, Z+
    2e48:	80 19       	sub	r24, r0
    2e4a:	01 10       	cpse	r0, r1
    2e4c:	d9 f3       	breq	.-10     	; 0x2e44 <strcmp+0x4>
    2e4e:	99 0b       	sbc	r25, r25
    2e50:	08 95       	ret

00002e52 <sprintf>:
    2e52:	a0 e1       	ldi	r26, 0x10	; 16
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ee e2       	ldi	r30, 0x2E	; 46
    2e58:	f7 e1       	ldi	r31, 0x17	; 23
    2e5a:	b9 cf       	rjmp	.-142    	; 0x2dce <__prologue_saves__+0x1c>
    2e5c:	0f 89       	ldd	r16, Y+23	; 0x17
    2e5e:	18 8d       	ldd	r17, Y+24	; 0x18
    2e60:	86 e0       	ldi	r24, 0x06	; 6
    2e62:	8e 83       	std	Y+6, r24	; 0x06
    2e64:	1c 83       	std	Y+4, r17	; 0x04
    2e66:	0b 83       	std	Y+3, r16	; 0x03
    2e68:	8f ef       	ldi	r24, 0xFF	; 255
    2e6a:	9f e7       	ldi	r25, 0x7F	; 127
    2e6c:	98 87       	std	Y+8, r25	; 0x08
    2e6e:	8f 83       	std	Y+7, r24	; 0x07
    2e70:	ae 01       	movw	r20, r28
    2e72:	45 5e       	subi	r20, 0xE5	; 229
    2e74:	5f 4f       	sbci	r21, 0xFF	; 255
    2e76:	5a 83       	std	Y+2, r21	; 0x02
    2e78:	49 83       	std	Y+1, r20	; 0x01
    2e7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7e:	ce 01       	movw	r24, r28
    2e80:	03 96       	adiw	r24, 0x03	; 3
    2e82:	09 d0       	rcall	.+18     	; 0x2e96 <vfprintf>
    2e84:	29 85       	ldd	r18, Y+9	; 0x09
    2e86:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e88:	02 0f       	add	r16, r18
    2e8a:	13 1f       	adc	r17, r19
    2e8c:	f8 01       	movw	r30, r16
    2e8e:	10 82       	st	Z, r1
    2e90:	e4 e0       	ldi	r30, 0x04	; 4
    2e92:	60 96       	adiw	r28, 0x10	; 16
    2e94:	b8 cf       	rjmp	.-144    	; 0x2e06 <__epilogue_restores__+0x1c>

00002e96 <vfprintf>:
    2e96:	ab e0       	ldi	r26, 0x0B	; 11
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e0 e5       	ldi	r30, 0x50	; 80
    2e9c:	f7 e1       	ldi	r31, 0x17	; 23
    2e9e:	8b cf       	rjmp	.-234    	; 0x2db6 <__prologue_saves__+0x4>
    2ea0:	3c 01       	movw	r6, r24
    2ea2:	4b 01       	movw	r8, r22
    2ea4:	6a 01       	movw	r12, r20
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	17 82       	std	Z+7, r1	; 0x07
    2eaa:	16 82       	std	Z+6, r1	; 0x06
    2eac:	83 81       	ldd	r24, Z+3	; 0x03
    2eae:	81 fd       	sbrc	r24, 1
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <vfprintf+0x22>
    2eb2:	8f ef       	ldi	r24, 0xFF	; 255
    2eb4:	9f ef       	ldi	r25, 0xFF	; 255
    2eb6:	cd c1       	rjmp	.+922    	; 0x3252 <vfprintf+0x3bc>
    2eb8:	f3 01       	movw	r30, r6
    2eba:	33 81       	ldd	r19, Z+3	; 0x03
    2ebc:	f4 01       	movw	r30, r8
    2ebe:	33 fd       	sbrc	r19, 3
    2ec0:	85 91       	lpm	r24, Z+
    2ec2:	33 ff       	sbrs	r19, 3
    2ec4:	81 91       	ld	r24, Z+
    2ec6:	4f 01       	movw	r8, r30
    2ec8:	88 23       	and	r24, r24
    2eca:	09 f4       	brne	.+2      	; 0x2ece <vfprintf+0x38>
    2ecc:	bf c1       	rjmp	.+894    	; 0x324c <vfprintf+0x3b6>
    2ece:	85 32       	cpi	r24, 0x25	; 37
    2ed0:	39 f4       	brne	.+14     	; 0x2ee0 <vfprintf+0x4a>
    2ed2:	33 fd       	sbrc	r19, 3
    2ed4:	85 91       	lpm	r24, Z+
    2ed6:	33 ff       	sbrs	r19, 3
    2ed8:	81 91       	ld	r24, Z+
    2eda:	4f 01       	movw	r8, r30
    2edc:	85 32       	cpi	r24, 0x25	; 37
    2ede:	21 f4       	brne	.+8      	; 0x2ee8 <vfprintf+0x52>
    2ee0:	b3 01       	movw	r22, r6
    2ee2:	99 27       	eor	r25, r25
    2ee4:	cf d1       	rcall	.+926    	; 0x3284 <fputc>
    2ee6:	e8 cf       	rjmp	.-48     	; 0x2eb8 <vfprintf+0x22>
    2ee8:	00 e0       	ldi	r16, 0x00	; 0
    2eea:	44 24       	eor	r4, r4
    2eec:	55 24       	eor	r5, r5
    2eee:	4a e0       	ldi	r20, 0x0A	; 10
    2ef0:	00 32       	cpi	r16, 0x20	; 32
    2ef2:	b0 f4       	brcc	.+44     	; 0x2f20 <vfprintf+0x8a>
    2ef4:	8b 32       	cpi	r24, 0x2B	; 43
    2ef6:	69 f0       	breq	.+26     	; 0x2f12 <vfprintf+0x7c>
    2ef8:	8c 32       	cpi	r24, 0x2C	; 44
    2efa:	28 f4       	brcc	.+10     	; 0x2f06 <vfprintf+0x70>
    2efc:	80 32       	cpi	r24, 0x20	; 32
    2efe:	51 f0       	breq	.+20     	; 0x2f14 <vfprintf+0x7e>
    2f00:	83 32       	cpi	r24, 0x23	; 35
    2f02:	71 f4       	brne	.+28     	; 0x2f20 <vfprintf+0x8a>
    2f04:	0b c0       	rjmp	.+22     	; 0x2f1c <vfprintf+0x86>
    2f06:	8d 32       	cpi	r24, 0x2D	; 45
    2f08:	39 f0       	breq	.+14     	; 0x2f18 <vfprintf+0x82>
    2f0a:	80 33       	cpi	r24, 0x30	; 48
    2f0c:	49 f4       	brne	.+18     	; 0x2f20 <vfprintf+0x8a>
    2f0e:	01 60       	ori	r16, 0x01	; 1
    2f10:	28 c0       	rjmp	.+80     	; 0x2f62 <vfprintf+0xcc>
    2f12:	02 60       	ori	r16, 0x02	; 2
    2f14:	04 60       	ori	r16, 0x04	; 4
    2f16:	25 c0       	rjmp	.+74     	; 0x2f62 <vfprintf+0xcc>
    2f18:	08 60       	ori	r16, 0x08	; 8
    2f1a:	23 c0       	rjmp	.+70     	; 0x2f62 <vfprintf+0xcc>
    2f1c:	00 61       	ori	r16, 0x10	; 16
    2f1e:	21 c0       	rjmp	.+66     	; 0x2f62 <vfprintf+0xcc>
    2f20:	07 fd       	sbrc	r16, 7
    2f22:	29 c0       	rjmp	.+82     	; 0x2f76 <vfprintf+0xe0>
    2f24:	28 2f       	mov	r18, r24
    2f26:	20 53       	subi	r18, 0x30	; 48
    2f28:	2a 30       	cpi	r18, 0x0A	; 10
    2f2a:	78 f4       	brcc	.+30     	; 0x2f4a <vfprintf+0xb4>
    2f2c:	06 ff       	sbrs	r16, 6
    2f2e:	06 c0       	rjmp	.+12     	; 0x2f3c <vfprintf+0xa6>
    2f30:	54 9e       	mul	r5, r20
    2f32:	c0 01       	movw	r24, r0
    2f34:	11 24       	eor	r1, r1
    2f36:	52 2e       	mov	r5, r18
    2f38:	58 0e       	add	r5, r24
    2f3a:	13 c0       	rjmp	.+38     	; 0x2f62 <vfprintf+0xcc>
    2f3c:	44 9e       	mul	r4, r20
    2f3e:	c0 01       	movw	r24, r0
    2f40:	11 24       	eor	r1, r1
    2f42:	42 2e       	mov	r4, r18
    2f44:	48 0e       	add	r4, r24
    2f46:	00 62       	ori	r16, 0x20	; 32
    2f48:	0c c0       	rjmp	.+24     	; 0x2f62 <vfprintf+0xcc>
    2f4a:	8e 32       	cpi	r24, 0x2E	; 46
    2f4c:	21 f4       	brne	.+8      	; 0x2f56 <vfprintf+0xc0>
    2f4e:	06 fd       	sbrc	r16, 6
    2f50:	7d c1       	rjmp	.+762    	; 0x324c <vfprintf+0x3b6>
    2f52:	00 64       	ori	r16, 0x40	; 64
    2f54:	06 c0       	rjmp	.+12     	; 0x2f62 <vfprintf+0xcc>
    2f56:	8c 36       	cpi	r24, 0x6C	; 108
    2f58:	11 f4       	brne	.+4      	; 0x2f5e <vfprintf+0xc8>
    2f5a:	00 68       	ori	r16, 0x80	; 128
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <vfprintf+0xcc>
    2f5e:	88 36       	cpi	r24, 0x68	; 104
    2f60:	51 f4       	brne	.+20     	; 0x2f76 <vfprintf+0xe0>
    2f62:	f4 01       	movw	r30, r8
    2f64:	33 fd       	sbrc	r19, 3
    2f66:	85 91       	lpm	r24, Z+
    2f68:	33 ff       	sbrs	r19, 3
    2f6a:	81 91       	ld	r24, Z+
    2f6c:	4f 01       	movw	r8, r30
    2f6e:	88 23       	and	r24, r24
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <vfprintf+0xde>
    2f72:	6b c0       	rjmp	.+214    	; 0x304a <vfprintf+0x1b4>
    2f74:	bd cf       	rjmp	.-134    	; 0x2ef0 <vfprintf+0x5a>
    2f76:	98 2f       	mov	r25, r24
    2f78:	85 54       	subi	r24, 0x45	; 69
    2f7a:	83 30       	cpi	r24, 0x03	; 3
    2f7c:	18 f0       	brcs	.+6      	; 0x2f84 <vfprintf+0xee>
    2f7e:	80 52       	subi	r24, 0x20	; 32
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	38 f4       	brcc	.+14     	; 0x2f92 <vfprintf+0xfc>
    2f84:	24 e0       	ldi	r18, 0x04	; 4
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	c2 0e       	add	r12, r18
    2f8a:	d3 1e       	adc	r13, r19
    2f8c:	8f e3       	ldi	r24, 0x3F	; 63
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	0f c0       	rjmp	.+30     	; 0x2fb0 <vfprintf+0x11a>
    2f92:	93 36       	cpi	r25, 0x63	; 99
    2f94:	31 f0       	breq	.+12     	; 0x2fa2 <vfprintf+0x10c>
    2f96:	93 37       	cpi	r25, 0x73	; 115
    2f98:	99 f0       	breq	.+38     	; 0x2fc0 <vfprintf+0x12a>
    2f9a:	93 35       	cpi	r25, 0x53	; 83
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <vfprintf+0x10a>
    2f9e:	57 c0       	rjmp	.+174    	; 0x304e <vfprintf+0x1b8>
    2fa0:	22 c0       	rjmp	.+68     	; 0x2fe6 <vfprintf+0x150>
    2fa2:	f6 01       	movw	r30, r12
    2fa4:	80 81       	ld	r24, Z
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	22 e0       	ldi	r18, 0x02	; 2
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	c2 0e       	add	r12, r18
    2fae:	d3 1e       	adc	r13, r19
    2fb0:	7e 01       	movw	r14, r28
    2fb2:	08 94       	sec
    2fb4:	e1 1c       	adc	r14, r1
    2fb6:	f1 1c       	adc	r15, r1
    2fb8:	51 e0       	ldi	r21, 0x01	; 1
    2fba:	a5 2e       	mov	r10, r21
    2fbc:	b1 2c       	mov	r11, r1
    2fbe:	11 c0       	rjmp	.+34     	; 0x2fe2 <vfprintf+0x14c>
    2fc0:	f6 01       	movw	r30, r12
    2fc2:	e0 80       	ld	r14, Z
    2fc4:	f1 80       	ldd	r15, Z+1	; 0x01
    2fc6:	06 fd       	sbrc	r16, 6
    2fc8:	03 c0       	rjmp	.+6      	; 0x2fd0 <vfprintf+0x13a>
    2fca:	6f ef       	ldi	r22, 0xFF	; 255
    2fcc:	7f ef       	ldi	r23, 0xFF	; 255
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <vfprintf+0x13e>
    2fd0:	65 2d       	mov	r22, r5
    2fd2:	77 27       	eor	r23, r23
    2fd4:	22 e0       	ldi	r18, 0x02	; 2
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	c2 0e       	add	r12, r18
    2fda:	d3 1e       	adc	r13, r19
    2fdc:	c7 01       	movw	r24, r14
    2fde:	47 d1       	rcall	.+654    	; 0x326e <strnlen>
    2fe0:	5c 01       	movw	r10, r24
    2fe2:	0f 77       	andi	r16, 0x7F	; 127
    2fe4:	12 c0       	rjmp	.+36     	; 0x300a <vfprintf+0x174>
    2fe6:	f6 01       	movw	r30, r12
    2fe8:	e0 80       	ld	r14, Z
    2fea:	f1 80       	ldd	r15, Z+1	; 0x01
    2fec:	06 fd       	sbrc	r16, 6
    2fee:	03 c0       	rjmp	.+6      	; 0x2ff6 <vfprintf+0x160>
    2ff0:	6f ef       	ldi	r22, 0xFF	; 255
    2ff2:	7f ef       	ldi	r23, 0xFF	; 255
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <vfprintf+0x164>
    2ff6:	65 2d       	mov	r22, r5
    2ff8:	77 27       	eor	r23, r23
    2ffa:	22 e0       	ldi	r18, 0x02	; 2
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	c2 0e       	add	r12, r18
    3000:	d3 1e       	adc	r13, r19
    3002:	c7 01       	movw	r24, r14
    3004:	29 d1       	rcall	.+594    	; 0x3258 <strnlen_P>
    3006:	5c 01       	movw	r10, r24
    3008:	00 68       	ori	r16, 0x80	; 128
    300a:	03 ff       	sbrs	r16, 3
    300c:	06 c0       	rjmp	.+12     	; 0x301a <vfprintf+0x184>
    300e:	19 c0       	rjmp	.+50     	; 0x3042 <vfprintf+0x1ac>
    3010:	b3 01       	movw	r22, r6
    3012:	80 e2       	ldi	r24, 0x20	; 32
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	36 d1       	rcall	.+620    	; 0x3284 <fputc>
    3018:	4a 94       	dec	r4
    301a:	84 2d       	mov	r24, r4
    301c:	99 27       	eor	r25, r25
    301e:	a8 16       	cp	r10, r24
    3020:	b9 06       	cpc	r11, r25
    3022:	b0 f3       	brcs	.-20     	; 0x3010 <vfprintf+0x17a>
    3024:	0e c0       	rjmp	.+28     	; 0x3042 <vfprintf+0x1ac>
    3026:	f7 01       	movw	r30, r14
    3028:	07 fd       	sbrc	r16, 7
    302a:	85 91       	lpm	r24, Z+
    302c:	07 ff       	sbrs	r16, 7
    302e:	81 91       	ld	r24, Z+
    3030:	7f 01       	movw	r14, r30
    3032:	b3 01       	movw	r22, r6
    3034:	99 27       	eor	r25, r25
    3036:	26 d1       	rcall	.+588    	; 0x3284 <fputc>
    3038:	41 10       	cpse	r4, r1
    303a:	4a 94       	dec	r4
    303c:	08 94       	sec
    303e:	a1 08       	sbc	r10, r1
    3040:	b1 08       	sbc	r11, r1
    3042:	a1 14       	cp	r10, r1
    3044:	b1 04       	cpc	r11, r1
    3046:	79 f7       	brne	.-34     	; 0x3026 <vfprintf+0x190>
    3048:	fe c0       	rjmp	.+508    	; 0x3246 <vfprintf+0x3b0>
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	3d c0       	rjmp	.+122    	; 0x30c8 <vfprintf+0x232>
    304e:	94 36       	cpi	r25, 0x64	; 100
    3050:	11 f0       	breq	.+4      	; 0x3056 <vfprintf+0x1c0>
    3052:	99 36       	cpi	r25, 0x69	; 105
    3054:	89 f5       	brne	.+98     	; 0x30b8 <vfprintf+0x222>
    3056:	07 ff       	sbrs	r16, 7
    3058:	0a c0       	rjmp	.+20     	; 0x306e <vfprintf+0x1d8>
    305a:	f6 01       	movw	r30, r12
    305c:	60 81       	ld	r22, Z
    305e:	71 81       	ldd	r23, Z+1	; 0x01
    3060:	82 81       	ldd	r24, Z+2	; 0x02
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	24 e0       	ldi	r18, 0x04	; 4
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	c2 0e       	add	r12, r18
    306a:	d3 1e       	adc	r13, r19
    306c:	0d c0       	rjmp	.+26     	; 0x3088 <vfprintf+0x1f2>
    306e:	f6 01       	movw	r30, r12
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	9c 01       	movw	r18, r24
    3076:	b9 01       	movw	r22, r18
    3078:	88 27       	eor	r24, r24
    307a:	77 fd       	sbrc	r23, 7
    307c:	80 95       	com	r24
    307e:	98 2f       	mov	r25, r24
    3080:	42 e0       	ldi	r20, 0x02	; 2
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	c4 0e       	add	r12, r20
    3086:	d5 1e       	adc	r13, r21
    3088:	4f e6       	ldi	r20, 0x6F	; 111
    308a:	b4 2e       	mov	r11, r20
    308c:	b0 22       	and	r11, r16
    308e:	97 ff       	sbrs	r25, 7
    3090:	09 c0       	rjmp	.+18     	; 0x30a4 <vfprintf+0x20e>
    3092:	90 95       	com	r25
    3094:	80 95       	com	r24
    3096:	70 95       	com	r23
    3098:	61 95       	neg	r22
    309a:	7f 4f       	sbci	r23, 0xFF	; 255
    309c:	8f 4f       	sbci	r24, 0xFF	; 255
    309e:	9f 4f       	sbci	r25, 0xFF	; 255
    30a0:	50 e8       	ldi	r21, 0x80	; 128
    30a2:	b5 2a       	or	r11, r21
    30a4:	8e 01       	movw	r16, r28
    30a6:	0f 5f       	subi	r16, 0xFF	; 255
    30a8:	1f 4f       	sbci	r17, 0xFF	; 255
    30aa:	2a e0       	ldi	r18, 0x0A	; 10
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	a8 01       	movw	r20, r16
    30b0:	16 d1       	rcall	.+556    	; 0x32de <__ultoa_invert>
    30b2:	a8 2e       	mov	r10, r24
    30b4:	a0 1a       	sub	r10, r16
    30b6:	4c c0       	rjmp	.+152    	; 0x3150 <vfprintf+0x2ba>
    30b8:	95 37       	cpi	r25, 0x75	; 117
    30ba:	31 f4       	brne	.+12     	; 0x30c8 <vfprintf+0x232>
    30bc:	3f ee       	ldi	r19, 0xEF	; 239
    30be:	f3 2e       	mov	r15, r19
    30c0:	f0 22       	and	r15, r16
    30c2:	2a e0       	ldi	r18, 0x0A	; 10
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	23 c0       	rjmp	.+70     	; 0x310e <vfprintf+0x278>
    30c8:	29 ef       	ldi	r18, 0xF9	; 249
    30ca:	f2 2e       	mov	r15, r18
    30cc:	f0 22       	and	r15, r16
    30ce:	9f 36       	cpi	r25, 0x6F	; 111
    30d0:	61 f0       	breq	.+24     	; 0x30ea <vfprintf+0x254>
    30d2:	90 37       	cpi	r25, 0x70	; 112
    30d4:	20 f4       	brcc	.+8      	; 0x30de <vfprintf+0x248>
    30d6:	98 35       	cpi	r25, 0x58	; 88
    30d8:	09 f0       	breq	.+2      	; 0x30dc <vfprintf+0x246>
    30da:	b8 c0       	rjmp	.+368    	; 0x324c <vfprintf+0x3b6>
    30dc:	12 c0       	rjmp	.+36     	; 0x3102 <vfprintf+0x26c>
    30de:	90 37       	cpi	r25, 0x70	; 112
    30e0:	39 f0       	breq	.+14     	; 0x30f0 <vfprintf+0x25a>
    30e2:	98 37       	cpi	r25, 0x78	; 120
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <vfprintf+0x252>
    30e6:	b2 c0       	rjmp	.+356    	; 0x324c <vfprintf+0x3b6>
    30e8:	05 c0       	rjmp	.+10     	; 0x30f4 <vfprintf+0x25e>
    30ea:	28 e0       	ldi	r18, 0x08	; 8
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <vfprintf+0x278>
    30f0:	80 e1       	ldi	r24, 0x10	; 16
    30f2:	f8 2a       	or	r15, r24
    30f4:	f4 fe       	sbrs	r15, 4
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <vfprintf+0x266>
    30f8:	94 e0       	ldi	r25, 0x04	; 4
    30fa:	f9 2a       	or	r15, r25
    30fc:	20 e1       	ldi	r18, 0x10	; 16
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	06 c0       	rjmp	.+12     	; 0x310e <vfprintf+0x278>
    3102:	f4 fe       	sbrs	r15, 4
    3104:	02 c0       	rjmp	.+4      	; 0x310a <vfprintf+0x274>
    3106:	e6 e0       	ldi	r30, 0x06	; 6
    3108:	fe 2a       	or	r15, r30
    310a:	20 e1       	ldi	r18, 0x10	; 16
    310c:	32 e0       	ldi	r19, 0x02	; 2
    310e:	f7 fe       	sbrs	r15, 7
    3110:	0a c0       	rjmp	.+20     	; 0x3126 <vfprintf+0x290>
    3112:	f6 01       	movw	r30, r12
    3114:	60 81       	ld	r22, Z
    3116:	71 81       	ldd	r23, Z+1	; 0x01
    3118:	82 81       	ldd	r24, Z+2	; 0x02
    311a:	93 81       	ldd	r25, Z+3	; 0x03
    311c:	44 e0       	ldi	r20, 0x04	; 4
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	c4 0e       	add	r12, r20
    3122:	d5 1e       	adc	r13, r21
    3124:	0b c0       	rjmp	.+22     	; 0x313c <vfprintf+0x2a6>
    3126:	f6 01       	movw	r30, r12
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	ac 01       	movw	r20, r24
    312e:	ba 01       	movw	r22, r20
    3130:	88 27       	eor	r24, r24
    3132:	99 27       	eor	r25, r25
    3134:	e2 e0       	ldi	r30, 0x02	; 2
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	ce 0e       	add	r12, r30
    313a:	df 1e       	adc	r13, r31
    313c:	8e 01       	movw	r16, r28
    313e:	0f 5f       	subi	r16, 0xFF	; 255
    3140:	1f 4f       	sbci	r17, 0xFF	; 255
    3142:	a8 01       	movw	r20, r16
    3144:	cc d0       	rcall	.+408    	; 0x32de <__ultoa_invert>
    3146:	a8 2e       	mov	r10, r24
    3148:	a0 1a       	sub	r10, r16
    314a:	8f e7       	ldi	r24, 0x7F	; 127
    314c:	b8 2e       	mov	r11, r24
    314e:	bf 20       	and	r11, r15
    3150:	b6 fe       	sbrs	r11, 6
    3152:	10 c0       	rjmp	.+32     	; 0x3174 <vfprintf+0x2de>
    3154:	fe ef       	ldi	r31, 0xFE	; 254
    3156:	bf 22       	and	r11, r31
    3158:	a5 14       	cp	r10, r5
    315a:	60 f4       	brcc	.+24     	; 0x3174 <vfprintf+0x2de>
    315c:	2b 2d       	mov	r18, r11
    315e:	33 27       	eor	r19, r19
    3160:	24 ff       	sbrs	r18, 4
    3162:	1a c0       	rjmp	.+52     	; 0x3198 <vfprintf+0x302>
    3164:	22 ff       	sbrs	r18, 2
    3166:	02 c0       	rjmp	.+4      	; 0x316c <vfprintf+0x2d6>
    3168:	05 2d       	mov	r16, r5
    316a:	09 c0       	rjmp	.+18     	; 0x317e <vfprintf+0x2e8>
    316c:	2f ee       	ldi	r18, 0xEF	; 239
    316e:	b2 22       	and	r11, r18
    3170:	05 2d       	mov	r16, r5
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <vfprintf+0x2e0>
    3174:	0a 2d       	mov	r16, r10
    3176:	2b 2d       	mov	r18, r11
    3178:	33 27       	eor	r19, r19
    317a:	24 ff       	sbrs	r18, 4
    317c:	0e c0       	rjmp	.+28     	; 0x319a <vfprintf+0x304>
    317e:	fe 01       	movw	r30, r28
    3180:	ea 0d       	add	r30, r10
    3182:	f1 1d       	adc	r31, r1
    3184:	80 81       	ld	r24, Z
    3186:	80 33       	cpi	r24, 0x30	; 48
    3188:	19 f4       	brne	.+6      	; 0x3190 <vfprintf+0x2fa>
    318a:	39 ee       	ldi	r19, 0xE9	; 233
    318c:	b3 22       	and	r11, r19
    318e:	09 c0       	rjmp	.+18     	; 0x31a2 <vfprintf+0x30c>
    3190:	0f 5f       	subi	r16, 0xFF	; 255
    3192:	22 ff       	sbrs	r18, 2
    3194:	06 c0       	rjmp	.+12     	; 0x31a2 <vfprintf+0x30c>
    3196:	04 c0       	rjmp	.+8      	; 0x31a0 <vfprintf+0x30a>
    3198:	05 2d       	mov	r16, r5
    319a:	82 2f       	mov	r24, r18
    319c:	86 78       	andi	r24, 0x86	; 134
    319e:	09 f0       	breq	.+2      	; 0x31a2 <vfprintf+0x30c>
    31a0:	0f 5f       	subi	r16, 0xFF	; 255
    31a2:	eb 2c       	mov	r14, r11
    31a4:	ff 24       	eor	r15, r15
    31a6:	e3 fc       	sbrc	r14, 3
    31a8:	13 c0       	rjmp	.+38     	; 0x31d0 <vfprintf+0x33a>
    31aa:	e0 fe       	sbrs	r14, 0
    31ac:	0e c0       	rjmp	.+28     	; 0x31ca <vfprintf+0x334>
    31ae:	04 15       	cp	r16, r4
    31b0:	10 f0       	brcs	.+4      	; 0x31b6 <vfprintf+0x320>
    31b2:	5a 2c       	mov	r5, r10
    31b4:	0a c0       	rjmp	.+20     	; 0x31ca <vfprintf+0x334>
    31b6:	54 2c       	mov	r5, r4
    31b8:	50 1a       	sub	r5, r16
    31ba:	5a 0c       	add	r5, r10
    31bc:	04 2d       	mov	r16, r4
    31be:	05 c0       	rjmp	.+10     	; 0x31ca <vfprintf+0x334>
    31c0:	b3 01       	movw	r22, r6
    31c2:	80 e2       	ldi	r24, 0x20	; 32
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	5e d0       	rcall	.+188    	; 0x3284 <fputc>
    31c8:	0f 5f       	subi	r16, 0xFF	; 255
    31ca:	04 15       	cp	r16, r4
    31cc:	c8 f3       	brcs	.-14     	; 0x31c0 <vfprintf+0x32a>
    31ce:	04 c0       	rjmp	.+8      	; 0x31d8 <vfprintf+0x342>
    31d0:	04 15       	cp	r16, r4
    31d2:	10 f4       	brcc	.+4      	; 0x31d8 <vfprintf+0x342>
    31d4:	40 1a       	sub	r4, r16
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <vfprintf+0x344>
    31d8:	44 24       	eor	r4, r4
    31da:	e4 fe       	sbrs	r14, 4
    31dc:	0f c0       	rjmp	.+30     	; 0x31fc <vfprintf+0x366>
    31de:	b3 01       	movw	r22, r6
    31e0:	80 e3       	ldi	r24, 0x30	; 48
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	4f d0       	rcall	.+158    	; 0x3284 <fputc>
    31e6:	e2 fe       	sbrs	r14, 2
    31e8:	1c c0       	rjmp	.+56     	; 0x3222 <vfprintf+0x38c>
    31ea:	e1 fe       	sbrs	r14, 1
    31ec:	03 c0       	rjmp	.+6      	; 0x31f4 <vfprintf+0x35e>
    31ee:	88 e5       	ldi	r24, 0x58	; 88
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <vfprintf+0x362>
    31f4:	88 e7       	ldi	r24, 0x78	; 120
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	b3 01       	movw	r22, r6
    31fa:	0c c0       	rjmp	.+24     	; 0x3214 <vfprintf+0x37e>
    31fc:	8e 2d       	mov	r24, r14
    31fe:	86 78       	andi	r24, 0x86	; 134
    3200:	81 f0       	breq	.+32     	; 0x3222 <vfprintf+0x38c>
    3202:	e1 fe       	sbrs	r14, 1
    3204:	02 c0       	rjmp	.+4      	; 0x320a <vfprintf+0x374>
    3206:	8b e2       	ldi	r24, 0x2B	; 43
    3208:	01 c0       	rjmp	.+2      	; 0x320c <vfprintf+0x376>
    320a:	80 e2       	ldi	r24, 0x20	; 32
    320c:	b7 fc       	sbrc	r11, 7
    320e:	8d e2       	ldi	r24, 0x2D	; 45
    3210:	b3 01       	movw	r22, r6
    3212:	99 27       	eor	r25, r25
    3214:	37 d0       	rcall	.+110    	; 0x3284 <fputc>
    3216:	05 c0       	rjmp	.+10     	; 0x3222 <vfprintf+0x38c>
    3218:	b3 01       	movw	r22, r6
    321a:	80 e3       	ldi	r24, 0x30	; 48
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	32 d0       	rcall	.+100    	; 0x3284 <fputc>
    3220:	5a 94       	dec	r5
    3222:	a5 14       	cp	r10, r5
    3224:	c8 f3       	brcs	.-14     	; 0x3218 <vfprintf+0x382>
    3226:	aa 94       	dec	r10
    3228:	fe 01       	movw	r30, r28
    322a:	ea 0d       	add	r30, r10
    322c:	f1 1d       	adc	r31, r1
    322e:	81 81       	ldd	r24, Z+1	; 0x01
    3230:	b3 01       	movw	r22, r6
    3232:	99 27       	eor	r25, r25
    3234:	27 d0       	rcall	.+78     	; 0x3284 <fputc>
    3236:	aa 20       	and	r10, r10
    3238:	31 f0       	breq	.+12     	; 0x3246 <vfprintf+0x3b0>
    323a:	f5 cf       	rjmp	.-22     	; 0x3226 <vfprintf+0x390>
    323c:	b3 01       	movw	r22, r6
    323e:	80 e2       	ldi	r24, 0x20	; 32
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	20 d0       	rcall	.+64     	; 0x3284 <fputc>
    3244:	4a 94       	dec	r4
    3246:	44 20       	and	r4, r4
    3248:	c9 f7       	brne	.-14     	; 0x323c <vfprintf+0x3a6>
    324a:	36 ce       	rjmp	.-916    	; 0x2eb8 <vfprintf+0x22>
    324c:	f3 01       	movw	r30, r6
    324e:	86 81       	ldd	r24, Z+6	; 0x06
    3250:	97 81       	ldd	r25, Z+7	; 0x07
    3252:	e0 e1       	ldi	r30, 0x10	; 16
    3254:	2b 96       	adiw	r28, 0x0b	; 11
    3256:	cb cd       	rjmp	.-1130   	; 0x2dee <__epilogue_restores__+0x4>

00003258 <strnlen_P>:
    3258:	fc 01       	movw	r30, r24
    325a:	05 90       	lpm	r0, Z+
    325c:	61 50       	subi	r22, 0x01	; 1
    325e:	70 40       	sbci	r23, 0x00	; 0
    3260:	01 10       	cpse	r0, r1
    3262:	d8 f7       	brcc	.-10     	; 0x325a <strnlen_P+0x2>
    3264:	80 95       	com	r24
    3266:	90 95       	com	r25
    3268:	8e 0f       	add	r24, r30
    326a:	9f 1f       	adc	r25, r31
    326c:	08 95       	ret

0000326e <strnlen>:
    326e:	fc 01       	movw	r30, r24
    3270:	61 50       	subi	r22, 0x01	; 1
    3272:	70 40       	sbci	r23, 0x00	; 0
    3274:	01 90       	ld	r0, Z+
    3276:	01 10       	cpse	r0, r1
    3278:	d8 f7       	brcc	.-10     	; 0x3270 <strnlen+0x2>
    327a:	80 95       	com	r24
    327c:	90 95       	com	r25
    327e:	8e 0f       	add	r24, r30
    3280:	9f 1f       	adc	r25, r31
    3282:	08 95       	ret

00003284 <fputc>:
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	8c 01       	movw	r16, r24
    328e:	eb 01       	movw	r28, r22
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	99 27       	eor	r25, r25
    3294:	81 ff       	sbrs	r24, 1
    3296:	1b c0       	rjmp	.+54     	; 0x32ce <fputc+0x4a>
    3298:	82 ff       	sbrs	r24, 2
    329a:	0d c0       	rjmp	.+26     	; 0x32b6 <fputc+0x32>
    329c:	2e 81       	ldd	r18, Y+6	; 0x06
    329e:	3f 81       	ldd	r19, Y+7	; 0x07
    32a0:	8c 81       	ldd	r24, Y+4	; 0x04
    32a2:	9d 81       	ldd	r25, Y+5	; 0x05
    32a4:	28 17       	cp	r18, r24
    32a6:	39 07       	cpc	r19, r25
    32a8:	64 f4       	brge	.+24     	; 0x32c2 <fputc+0x3e>
    32aa:	e8 81       	ld	r30, Y
    32ac:	f9 81       	ldd	r31, Y+1	; 0x01
    32ae:	01 93       	st	Z+, r16
    32b0:	f9 83       	std	Y+1, r31	; 0x01
    32b2:	e8 83       	st	Y, r30
    32b4:	06 c0       	rjmp	.+12     	; 0x32c2 <fputc+0x3e>
    32b6:	e8 85       	ldd	r30, Y+8	; 0x08
    32b8:	f9 85       	ldd	r31, Y+9	; 0x09
    32ba:	80 2f       	mov	r24, r16
    32bc:	09 95       	icall
    32be:	89 2b       	or	r24, r25
    32c0:	31 f4       	brne	.+12     	; 0x32ce <fputc+0x4a>
    32c2:	8e 81       	ldd	r24, Y+6	; 0x06
    32c4:	9f 81       	ldd	r25, Y+7	; 0x07
    32c6:	01 96       	adiw	r24, 0x01	; 1
    32c8:	9f 83       	std	Y+7, r25	; 0x07
    32ca:	8e 83       	std	Y+6, r24	; 0x06
    32cc:	02 c0       	rjmp	.+4      	; 0x32d2 <fputc+0x4e>
    32ce:	0f ef       	ldi	r16, 0xFF	; 255
    32d0:	1f ef       	ldi	r17, 0xFF	; 255
    32d2:	c8 01       	movw	r24, r16
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	1f 91       	pop	r17
    32da:	0f 91       	pop	r16
    32dc:	08 95       	ret

000032de <__ultoa_invert>:
    32de:	fa 01       	movw	r30, r20
    32e0:	aa 27       	eor	r26, r26
    32e2:	28 30       	cpi	r18, 0x08	; 8
    32e4:	51 f1       	breq	.+84     	; 0x333a <__ultoa_invert+0x5c>
    32e6:	20 31       	cpi	r18, 0x10	; 16
    32e8:	81 f1       	breq	.+96     	; 0x334a <__ultoa_invert+0x6c>
    32ea:	e8 94       	clt
    32ec:	6f 93       	push	r22
    32ee:	6e 7f       	andi	r22, 0xFE	; 254
    32f0:	6e 5f       	subi	r22, 0xFE	; 254
    32f2:	7f 4f       	sbci	r23, 0xFF	; 255
    32f4:	8f 4f       	sbci	r24, 0xFF	; 255
    32f6:	9f 4f       	sbci	r25, 0xFF	; 255
    32f8:	af 4f       	sbci	r26, 0xFF	; 255
    32fa:	b1 e0       	ldi	r27, 0x01	; 1
    32fc:	3e d0       	rcall	.+124    	; 0x337a <__ultoa_invert+0x9c>
    32fe:	b4 e0       	ldi	r27, 0x04	; 4
    3300:	3c d0       	rcall	.+120    	; 0x337a <__ultoa_invert+0x9c>
    3302:	67 0f       	add	r22, r23
    3304:	78 1f       	adc	r23, r24
    3306:	89 1f       	adc	r24, r25
    3308:	9a 1f       	adc	r25, r26
    330a:	a1 1d       	adc	r26, r1
    330c:	68 0f       	add	r22, r24
    330e:	79 1f       	adc	r23, r25
    3310:	8a 1f       	adc	r24, r26
    3312:	91 1d       	adc	r25, r1
    3314:	a1 1d       	adc	r26, r1
    3316:	6a 0f       	add	r22, r26
    3318:	71 1d       	adc	r23, r1
    331a:	81 1d       	adc	r24, r1
    331c:	91 1d       	adc	r25, r1
    331e:	a1 1d       	adc	r26, r1
    3320:	20 d0       	rcall	.+64     	; 0x3362 <__ultoa_invert+0x84>
    3322:	09 f4       	brne	.+2      	; 0x3326 <__ultoa_invert+0x48>
    3324:	68 94       	set
    3326:	3f 91       	pop	r19
    3328:	2a e0       	ldi	r18, 0x0A	; 10
    332a:	26 9f       	mul	r18, r22
    332c:	11 24       	eor	r1, r1
    332e:	30 19       	sub	r19, r0
    3330:	30 5d       	subi	r19, 0xD0	; 208
    3332:	31 93       	st	Z+, r19
    3334:	de f6       	brtc	.-74     	; 0x32ec <__ultoa_invert+0xe>
    3336:	cf 01       	movw	r24, r30
    3338:	08 95       	ret
    333a:	46 2f       	mov	r20, r22
    333c:	47 70       	andi	r20, 0x07	; 7
    333e:	40 5d       	subi	r20, 0xD0	; 208
    3340:	41 93       	st	Z+, r20
    3342:	b3 e0       	ldi	r27, 0x03	; 3
    3344:	0f d0       	rcall	.+30     	; 0x3364 <__ultoa_invert+0x86>
    3346:	c9 f7       	brne	.-14     	; 0x333a <__ultoa_invert+0x5c>
    3348:	f6 cf       	rjmp	.-20     	; 0x3336 <__ultoa_invert+0x58>
    334a:	46 2f       	mov	r20, r22
    334c:	4f 70       	andi	r20, 0x0F	; 15
    334e:	40 5d       	subi	r20, 0xD0	; 208
    3350:	4a 33       	cpi	r20, 0x3A	; 58
    3352:	18 f0       	brcs	.+6      	; 0x335a <__ultoa_invert+0x7c>
    3354:	49 5d       	subi	r20, 0xD9	; 217
    3356:	31 fd       	sbrc	r19, 1
    3358:	40 52       	subi	r20, 0x20	; 32
    335a:	41 93       	st	Z+, r20
    335c:	02 d0       	rcall	.+4      	; 0x3362 <__ultoa_invert+0x84>
    335e:	a9 f7       	brne	.-22     	; 0x334a <__ultoa_invert+0x6c>
    3360:	ea cf       	rjmp	.-44     	; 0x3336 <__ultoa_invert+0x58>
    3362:	b4 e0       	ldi	r27, 0x04	; 4
    3364:	a6 95       	lsr	r26
    3366:	97 95       	ror	r25
    3368:	87 95       	ror	r24
    336a:	77 95       	ror	r23
    336c:	67 95       	ror	r22
    336e:	ba 95       	dec	r27
    3370:	c9 f7       	brne	.-14     	; 0x3364 <__ultoa_invert+0x86>
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	61 05       	cpc	r22, r1
    3376:	71 05       	cpc	r23, r1
    3378:	08 95       	ret
    337a:	9b 01       	movw	r18, r22
    337c:	ac 01       	movw	r20, r24
    337e:	0a 2e       	mov	r0, r26
    3380:	06 94       	lsr	r0
    3382:	57 95       	ror	r21
    3384:	47 95       	ror	r20
    3386:	37 95       	ror	r19
    3388:	27 95       	ror	r18
    338a:	ba 95       	dec	r27
    338c:	c9 f7       	brne	.-14     	; 0x3380 <__ultoa_invert+0xa2>
    338e:	62 0f       	add	r22, r18
    3390:	73 1f       	adc	r23, r19
    3392:	84 1f       	adc	r24, r20
    3394:	95 1f       	adc	r25, r21
    3396:	a0 1d       	adc	r26, r0
    3398:	08 95       	ret

0000339a <_exit>:
    339a:	ff cf       	rjmp	.-2      	; 0x339a <_exit>
