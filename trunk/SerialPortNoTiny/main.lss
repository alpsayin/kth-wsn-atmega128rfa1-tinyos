
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000290  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000750  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000038  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000004b  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000168  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e7  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021c  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000eb  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000028  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
   2:	00 00       	nop
   4:	aa c0       	rjmp	.+340    	; 0x15a <__bad_interrupt>
   6:	00 00       	nop
   8:	a8 c0       	rjmp	.+336    	; 0x15a <__bad_interrupt>
   a:	00 00       	nop
   c:	a6 c0       	rjmp	.+332    	; 0x15a <__bad_interrupt>
   e:	00 00       	nop
  10:	a4 c0       	rjmp	.+328    	; 0x15a <__bad_interrupt>
  12:	00 00       	nop
  14:	a2 c0       	rjmp	.+324    	; 0x15a <__bad_interrupt>
  16:	00 00       	nop
  18:	a0 c0       	rjmp	.+320    	; 0x15a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9e c0       	rjmp	.+316    	; 0x15a <__bad_interrupt>
  1e:	00 00       	nop
  20:	9c c0       	rjmp	.+312    	; 0x15a <__bad_interrupt>
  22:	00 00       	nop
  24:	9a c0       	rjmp	.+308    	; 0x15a <__bad_interrupt>
  26:	00 00       	nop
  28:	98 c0       	rjmp	.+304    	; 0x15a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	96 c0       	rjmp	.+300    	; 0x15a <__bad_interrupt>
  2e:	00 00       	nop
  30:	94 c0       	rjmp	.+296    	; 0x15a <__bad_interrupt>
  32:	00 00       	nop
  34:	92 c0       	rjmp	.+292    	; 0x15a <__bad_interrupt>
  36:	00 00       	nop
  38:	90 c0       	rjmp	.+288    	; 0x15a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8e c0       	rjmp	.+284    	; 0x15a <__bad_interrupt>
  3e:	00 00       	nop
  40:	8c c0       	rjmp	.+280    	; 0x15a <__bad_interrupt>
  42:	00 00       	nop
  44:	8a c0       	rjmp	.+276    	; 0x15a <__bad_interrupt>
  46:	00 00       	nop
  48:	88 c0       	rjmp	.+272    	; 0x15a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	86 c0       	rjmp	.+268    	; 0x15a <__bad_interrupt>
  4e:	00 00       	nop
  50:	84 c0       	rjmp	.+264    	; 0x15a <__bad_interrupt>
  52:	00 00       	nop
  54:	82 c0       	rjmp	.+260    	; 0x15a <__bad_interrupt>
  56:	00 00       	nop
  58:	80 c0       	rjmp	.+256    	; 0x15a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7e c0       	rjmp	.+252    	; 0x15a <__bad_interrupt>
  5e:	00 00       	nop
  60:	7c c0       	rjmp	.+248    	; 0x15a <__bad_interrupt>
  62:	00 00       	nop
  64:	7a c0       	rjmp	.+244    	; 0x15a <__bad_interrupt>
  66:	00 00       	nop
  68:	78 c0       	rjmp	.+240    	; 0x15a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	76 c0       	rjmp	.+236    	; 0x15a <__bad_interrupt>
  6e:	00 00       	nop
  70:	74 c0       	rjmp	.+232    	; 0x15a <__bad_interrupt>
  72:	00 00       	nop
  74:	72 c0       	rjmp	.+228    	; 0x15a <__bad_interrupt>
  76:	00 00       	nop
  78:	70 c0       	rjmp	.+224    	; 0x15a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6e c0       	rjmp	.+220    	; 0x15a <__bad_interrupt>
  7e:	00 00       	nop
  80:	6c c0       	rjmp	.+216    	; 0x15a <__bad_interrupt>
  82:	00 00       	nop
  84:	6a c0       	rjmp	.+212    	; 0x15a <__bad_interrupt>
  86:	00 00       	nop
  88:	68 c0       	rjmp	.+208    	; 0x15a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	66 c0       	rjmp	.+204    	; 0x15a <__bad_interrupt>
  8e:	00 00       	nop
  90:	d6 c0       	rjmp	.+428    	; 0x23e <__vector_36>
  92:	00 00       	nop
  94:	62 c0       	rjmp	.+196    	; 0x15a <__bad_interrupt>
  96:	00 00       	nop
  98:	60 c0       	rjmp	.+192    	; 0x15a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	5e c0       	rjmp	.+188    	; 0x15a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	5c c0       	rjmp	.+184    	; 0x15a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5a c0       	rjmp	.+180    	; 0x15a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	58 c0       	rjmp	.+176    	; 0x15a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	56 c0       	rjmp	.+172    	; 0x15a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	54 c0       	rjmp	.+168    	; 0x15a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	52 c0       	rjmp	.+164    	; 0x15a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	50 c0       	rjmp	.+160    	; 0x15a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	4e c0       	rjmp	.+156    	; 0x15a <__bad_interrupt>
  be:	00 00       	nop
  c0:	4c c0       	rjmp	.+152    	; 0x15a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4a c0       	rjmp	.+148    	; 0x15a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	48 c0       	rjmp	.+144    	; 0x15a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	46 c0       	rjmp	.+140    	; 0x15a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	44 c0       	rjmp	.+136    	; 0x15a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	42 c0       	rjmp	.+132    	; 0x15a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	40 c0       	rjmp	.+128    	; 0x15a <__bad_interrupt>
  da:	00 00       	nop
  dc:	3e c0       	rjmp	.+124    	; 0x15a <__bad_interrupt>
  de:	00 00       	nop
  e0:	3c c0       	rjmp	.+120    	; 0x15a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3a c0       	rjmp	.+116    	; 0x15a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	38 c0       	rjmp	.+112    	; 0x15a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	36 c0       	rjmp	.+108    	; 0x15a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	34 c0       	rjmp	.+104    	; 0x15a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	32 c0       	rjmp	.+100    	; 0x15a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	30 c0       	rjmp	.+96     	; 0x15a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	2e c0       	rjmp	.+92     	; 0x15a <__bad_interrupt>
  fe:	00 00       	nop
 100:	2c c0       	rjmp	.+88     	; 0x15a <__bad_interrupt>
 102:	00 00       	nop
 104:	2a c0       	rjmp	.+84     	; 0x15a <__bad_interrupt>
 106:	00 00       	nop
 108:	28 c0       	rjmp	.+80     	; 0x15a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	26 c0       	rjmp	.+76     	; 0x15a <__bad_interrupt>
 10e:	00 00       	nop
 110:	24 c0       	rjmp	.+72     	; 0x15a <__bad_interrupt>
 112:	00 00       	nop
 114:	22 c0       	rjmp	.+68     	; 0x15a <__bad_interrupt>
 116:	00 00       	nop
 118:	20 c0       	rjmp	.+64     	; 0x15a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	1e c0       	rjmp	.+60     	; 0x15a <__bad_interrupt>
 11e:	00 00       	nop

00000120 <__ctors_end>:
 120:	11 24       	eor	r1, r1
 122:	1f be       	out	0x3f, r1	; 63
 124:	cf ef       	ldi	r28, 0xFF	; 255
 126:	d1 e4       	ldi	r29, 0x41	; 65
 128:	de bf       	out	0x3e, r29	; 62
 12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
 12c:	12 e0       	ldi	r17, 0x02	; 2
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b2 e0       	ldi	r27, 0x02	; 2
 132:	e0 e9       	ldi	r30, 0x90	; 144
 134:	f2 e0       	ldi	r31, 0x02	; 2
 136:	00 e0       	ldi	r16, 0x00	; 0
 138:	0b bf       	out	0x3b, r16	; 59
 13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
 13c:	07 90       	elpm	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	a2 30       	cpi	r26, 0x02	; 2
 142:	b1 07       	cpc	r27, r17
 144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
 146:	12 e0       	ldi	r17, 0x02	; 2
 148:	a2 e0       	ldi	r26, 0x02	; 2
 14a:	b2 e0       	ldi	r27, 0x02	; 2
 14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
 14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
 150:	a2 30       	cpi	r26, 0x02	; 2
 152:	b1 07       	cpc	r27, r17
 154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
 156:	02 d0       	rcall	.+4      	; 0x15c <main>
 158:	9a c0       	rjmp	.+308    	; 0x28e <_exit>

0000015a <__bad_interrupt>:
 15a:	87 c0       	rjmp	.+270    	; 0x26a <__vector_default>

0000015c <main>:

uint8_t myByte = 'U';
 
int main(void) 
{
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	80 93 61 00 	sts	0x0061, r24
  uint16_t brr = 16;
  
  CLKPR = 0x80;
  CLKPR = 0x00;
 162:	10 92 61 00 	sts	0x0061, r1
  while(READ_BIT(CLKPR, CLKPCE));
 166:	80 91 61 00 	lds	r24, 0x0061
 16a:	87 fd       	sbrc	r24, 7
 16c:	fc cf       	rjmp	.-8      	; 0x166 <main+0xa>
  
  CLR_BIT(UCSR1A, RXC1);
 16e:	80 91 c8 00 	lds	r24, 0x00C8
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	80 93 c8 00 	sts	0x00C8, r24
  CLR_BIT(UCSR1A, TXC1);//clear rx & tx complete flags
 178:	80 91 c8 00 	lds	r24, 0x00C8
 17c:	8f 7b       	andi	r24, 0xBF	; 191
 17e:	80 93 c8 00 	sts	0x00C8, r24
  
  SET_BIT(UCSR1A, U2X1);  //disable double rate
 182:	80 91 c8 00 	lds	r24, 0x00C8
 186:	82 60       	ori	r24, 0x02	; 2
 188:	80 93 c8 00 	sts	0x00C8, r24
  
  CLR_BIT(UCSR1B, UDRIE1);
 18c:	80 91 c9 00 	lds	r24, 0x00C9
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	80 93 c9 00 	sts	0x00C9, r24
  CLR_BIT(UCSR1B, UCSZ12);  //disable data register empty interrupt & set character size bit 3 to 0 = 0x011
 196:	80 91 c9 00 	lds	r24, 0x00C9
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	80 93 c9 00 	sts	0x00C9, r24
  
  SET_BIT(UCSR1B, RXCIE1);//enable rx intr
 1a0:	80 91 c9 00 	lds	r24, 0x00C9
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	80 93 c9 00 	sts	0x00C9, r24
  CLR_BIT(UCSR1B, TXCIE1);  // enable tx intr
 1aa:	80 91 c9 00 	lds	r24, 0x00C9
 1ae:	8f 7b       	andi	r24, 0xBF	; 191
 1b0:	80 93 c9 00 	sts	0x00C9, r24
  
  SET_BIT(UCSR1B, RXEN1); //enable rx
 1b4:	80 91 c9 00 	lds	r24, 0x00C9
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	80 93 c9 00 	sts	0x00C9, r24
  SET_BIT(UCSR1B, TXEN1);  // enable tx
 1be:	80 91 c9 00 	lds	r24, 0x00C9
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	80 93 c9 00 	sts	0x00C9, r24
  
  CLR_BIT(UCSR1C, UMSEL11);
 1c8:	80 91 ca 00 	lds	r24, 0x00CA
 1cc:	8f 77       	andi	r24, 0x7F	; 127
 1ce:	80 93 ca 00 	sts	0x00CA, r24
  CLR_BIT(UCSR1C, UMSEL10);
 1d2:	80 91 ca 00 	lds	r24, 0x00CA
 1d6:	8f 7b       	andi	r24, 0xBF	; 191
 1d8:	80 93 ca 00 	sts	0x00CA, r24
  CLR_BIT(UCSR1C, UPM11);
 1dc:	80 91 ca 00 	lds	r24, 0x00CA
 1e0:	8f 7d       	andi	r24, 0xDF	; 223
 1e2:	80 93 ca 00 	sts	0x00CA, r24
  CLR_BIT(UCSR1C, UPM10);
 1e6:	80 91 ca 00 	lds	r24, 0x00CA
 1ea:	8f 7e       	andi	r24, 0xEF	; 239
 1ec:	80 93 ca 00 	sts	0x00CA, r24
  CLR_BIT(UCSR1C, UCPOL1);
 1f0:	80 91 ca 00 	lds	r24, 0x00CA
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	80 93 ca 00 	sts	0x00CA, r24
  
  SET_BIT(UCSR1C, UCSZ11);
 1fa:	80 91 ca 00 	lds	r24, 0x00CA
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	80 93 ca 00 	sts	0x00CA, r24
  SET_BIT(UCSR1C, UCSZ10); //set character size
 204:	80 91 ca 00 	lds	r24, 0x00CA
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	80 93 ca 00 	sts	0x00CA, r24
  
  UBRR1H = (uint8_t)(brr>>8);
 20e:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = (uint8_t)(brr&0xFF);
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	80 93 cc 00 	sts	0x00CC, r24

  DDRD &= ~(1<<2);
 218:	52 98       	cbi	0x0a, 2	; 10
  DDRD |= 1<<3;
 21a:	53 9a       	sbi	0x0a, 3	; 10
  DDRE |= 1<<2; /* set PB0 to output */
 21c:	6a 9a       	sbi	0x0d, 2	; 13
  
  sei();
 21e:	78 94       	sei
 220:	44 e0       	ldi	r20, 0x04	; 4
 222:	e8 ec       	ldi	r30, 0xC8	; 200
 224:	f0 e0       	ldi	r31, 0x00	; 0

  while(1) 
    {
      FLIP_BIT(PORTE, PORTE2);
 226:	8e b1       	in	r24, 0x0e	; 14
 228:	84 27       	eor	r24, r20
 22a:	8e b9       	out	0x0e, r24	; 14
 22c:	28 e8       	ldi	r18, 0x88	; 136
 22e:	33 e1       	ldi	r19, 0x13	; 19
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 230:	cf 01       	movw	r24, r30
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0xd6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 236:	21 50       	subi	r18, 0x01	; 1
 238:	30 40       	sbci	r19, 0x00	; 0
 23a:	d1 f7       	brne	.-12     	; 0x230 <main+0xd4>
 23c:	f4 cf       	rjmp	.-24     	; 0x226 <main+0xca>

0000023e <__vector_36>:
      _delay_ms(500);
      //UDR1 = myByte;
      //while(!READ_BIT(UCSR1A, UDRE1)){}
      //CLR_BIT(UCSR1A, TXC1);

      //while(!READ_BIT(UCSR1A, RXC1)){}
      //myByte = UDR1;
      //CLR_BIT(UCSR1A, RXC1);

    }
  return 0;
}

ISR(USART1_RX_vect)
{
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	8f 93       	push	r24
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
  myByte = UDR1;
 24e:	ee ec       	ldi	r30, 0xCE	; 206
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	80 93 00 02 	sts	0x0200, r24
  UDR1 = myByte;
 258:	80 83       	st	Z, r24
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_default>:
}

ISR(BADISR_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
  FLIP_BIT(PORTE, PORTE4);
 278:	8e b1       	in	r24, 0x0e	; 14
 27a:	90 e1       	ldi	r25, 0x10	; 16
 27c:	89 27       	eor	r24, r25
 27e:	8e b9       	out	0x0e, r24	; 14
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <_exit>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <_exit>
