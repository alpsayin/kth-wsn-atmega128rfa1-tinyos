
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  0000042c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080025a  0080025a  0000051a  2**0
                  ALLOC
  3 .stab         00001314  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c85  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000024b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000127  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000034b  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000172  00000000  00000000  000029a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005d7  00000000  00000000  00002b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000178  00000000  00000000  000031d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000084  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000070  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
   2:	00 00       	nop
   4:	aa c0       	rjmp	.+340    	; 0x15a <__bad_interrupt>
   6:	00 00       	nop
   8:	a8 c0       	rjmp	.+336    	; 0x15a <__bad_interrupt>
   a:	00 00       	nop
   c:	a6 c0       	rjmp	.+332    	; 0x15a <__bad_interrupt>
   e:	00 00       	nop
  10:	a4 c0       	rjmp	.+328    	; 0x15a <__bad_interrupt>
  12:	00 00       	nop
  14:	a2 c0       	rjmp	.+324    	; 0x15a <__bad_interrupt>
  16:	00 00       	nop
  18:	a0 c0       	rjmp	.+320    	; 0x15a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9e c0       	rjmp	.+316    	; 0x15a <__bad_interrupt>
  1e:	00 00       	nop
  20:	9c c0       	rjmp	.+312    	; 0x15a <__bad_interrupt>
  22:	00 00       	nop
  24:	9a c0       	rjmp	.+308    	; 0x15a <__bad_interrupt>
  26:	00 00       	nop
  28:	98 c0       	rjmp	.+304    	; 0x15a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	96 c0       	rjmp	.+300    	; 0x15a <__bad_interrupt>
  2e:	00 00       	nop
  30:	94 c0       	rjmp	.+296    	; 0x15a <__bad_interrupt>
  32:	00 00       	nop
  34:	92 c0       	rjmp	.+292    	; 0x15a <__bad_interrupt>
  36:	00 00       	nop
  38:	90 c0       	rjmp	.+288    	; 0x15a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8e c0       	rjmp	.+284    	; 0x15a <__bad_interrupt>
  3e:	00 00       	nop
  40:	8c c0       	rjmp	.+280    	; 0x15a <__bad_interrupt>
  42:	00 00       	nop
  44:	8a c0       	rjmp	.+276    	; 0x15a <__bad_interrupt>
  46:	00 00       	nop
  48:	88 c0       	rjmp	.+272    	; 0x15a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	86 c0       	rjmp	.+268    	; 0x15a <__bad_interrupt>
  4e:	00 00       	nop
  50:	84 c0       	rjmp	.+264    	; 0x15a <__bad_interrupt>
  52:	00 00       	nop
  54:	82 c0       	rjmp	.+260    	; 0x15a <__bad_interrupt>
  56:	00 00       	nop
  58:	80 c0       	rjmp	.+256    	; 0x15a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7e c0       	rjmp	.+252    	; 0x15a <__bad_interrupt>
  5e:	00 00       	nop
  60:	7c c0       	rjmp	.+248    	; 0x15a <__bad_interrupt>
  62:	00 00       	nop
  64:	89 c1       	rjmp	.+786    	; 0x378 <__vector_25>
  66:	00 00       	nop
  68:	78 c0       	rjmp	.+240    	; 0x15a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	76 c0       	rjmp	.+236    	; 0x15a <__bad_interrupt>
  6e:	00 00       	nop
  70:	74 c0       	rjmp	.+232    	; 0x15a <__bad_interrupt>
  72:	00 00       	nop
  74:	68 c1       	rjmp	.+720    	; 0x346 <__vector_29>
  76:	00 00       	nop
  78:	70 c0       	rjmp	.+224    	; 0x15a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6e c0       	rjmp	.+220    	; 0x15a <__bad_interrupt>
  7e:	00 00       	nop
  80:	6c c0       	rjmp	.+216    	; 0x15a <__bad_interrupt>
  82:	00 00       	nop
  84:	6a c0       	rjmp	.+212    	; 0x15a <__bad_interrupt>
  86:	00 00       	nop
  88:	68 c0       	rjmp	.+208    	; 0x15a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	66 c0       	rjmp	.+204    	; 0x15a <__bad_interrupt>
  8e:	00 00       	nop
  90:	96 c1       	rjmp	.+812    	; 0x3be <__vector_36>
  92:	00 00       	nop
  94:	62 c0       	rjmp	.+196    	; 0x15a <__bad_interrupt>
  96:	00 00       	nop
  98:	60 c0       	rjmp	.+192    	; 0x15a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	5e c0       	rjmp	.+188    	; 0x15a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	5c c0       	rjmp	.+184    	; 0x15a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5a c0       	rjmp	.+180    	; 0x15a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	58 c0       	rjmp	.+176    	; 0x15a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	56 c0       	rjmp	.+172    	; 0x15a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	54 c0       	rjmp	.+168    	; 0x15a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	52 c0       	rjmp	.+164    	; 0x15a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	50 c0       	rjmp	.+160    	; 0x15a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	4e c0       	rjmp	.+156    	; 0x15a <__bad_interrupt>
  be:	00 00       	nop
  c0:	4c c0       	rjmp	.+152    	; 0x15a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4a c0       	rjmp	.+148    	; 0x15a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	48 c0       	rjmp	.+144    	; 0x15a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	46 c0       	rjmp	.+140    	; 0x15a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	44 c0       	rjmp	.+136    	; 0x15a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	42 c0       	rjmp	.+132    	; 0x15a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	40 c0       	rjmp	.+128    	; 0x15a <__bad_interrupt>
  da:	00 00       	nop
  dc:	3e c0       	rjmp	.+124    	; 0x15a <__bad_interrupt>
  de:	00 00       	nop
  e0:	3c c0       	rjmp	.+120    	; 0x15a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3a c0       	rjmp	.+116    	; 0x15a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	38 c0       	rjmp	.+112    	; 0x15a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	36 c0       	rjmp	.+108    	; 0x15a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	34 c0       	rjmp	.+104    	; 0x15a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	32 c0       	rjmp	.+100    	; 0x15a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	30 c0       	rjmp	.+96     	; 0x15a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	2e c0       	rjmp	.+92     	; 0x15a <__bad_interrupt>
  fe:	00 00       	nop
 100:	2c c0       	rjmp	.+88     	; 0x15a <__bad_interrupt>
 102:	00 00       	nop
 104:	2a c0       	rjmp	.+84     	; 0x15a <__bad_interrupt>
 106:	00 00       	nop
 108:	28 c0       	rjmp	.+80     	; 0x15a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	26 c0       	rjmp	.+76     	; 0x15a <__bad_interrupt>
 10e:	00 00       	nop
 110:	24 c0       	rjmp	.+72     	; 0x15a <__bad_interrupt>
 112:	00 00       	nop
 114:	22 c0       	rjmp	.+68     	; 0x15a <__bad_interrupt>
 116:	00 00       	nop
 118:	20 c0       	rjmp	.+64     	; 0x15a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	1e c0       	rjmp	.+60     	; 0x15a <__bad_interrupt>
 11e:	00 00       	nop

00000120 <__ctors_end>:
 120:	11 24       	eor	r1, r1
 122:	1f be       	out	0x3f, r1	; 63
 124:	cf ef       	ldi	r28, 0xFF	; 255
 126:	d1 e4       	ldi	r29, 0x41	; 65
 128:	de bf       	out	0x3e, r29	; 62
 12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
 12c:	12 e0       	ldi	r17, 0x02	; 2
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b2 e0       	ldi	r27, 0x02	; 2
 132:	ec e2       	ldi	r30, 0x2C	; 44
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	00 e0       	ldi	r16, 0x00	; 0
 138:	0b bf       	out	0x3b, r16	; 59
 13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
 13c:	07 90       	elpm	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	aa 35       	cpi	r26, 0x5A	; 90
 142:	b1 07       	cpc	r27, r17
 144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
 146:	12 e0       	ldi	r17, 0x02	; 2
 148:	aa e5       	ldi	r26, 0x5A	; 90
 14a:	b2 e0       	ldi	r27, 0x02	; 2
 14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
 14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
 150:	ae 35       	cpi	r26, 0x5E	; 94
 152:	b1 07       	cpc	r27, r17
 154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
 156:	d6 d0       	rcall	.+428    	; 0x304 <main>
 158:	67 c1       	rjmp	.+718    	; 0x428 <_exit>

0000015a <__bad_interrupt>:
 15a:	54 c1       	rjmp	.+680    	; 0x404 <__vector_default>

0000015c <printStr>:
void setupAdcSimple(void);

void printStr(uint8_t* str, uint8_t len)
{
  uint8_t i;
  for(i=0; i<len; i++)
 15c:	e8 2f       	mov	r30, r24
 15e:	f9 2f       	mov	r31, r25
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0f c0       	rjmp	.+30     	; 0x182 <printStr+0x26>
    {
      UDR1 = (uint8_t)(str[i]);
 164:	90 81       	ld	r25, Z
 166:	90 93 ce 00 	sts	0x00CE, r25
      while(!READ_BIT(UCSR1A, UDRE1));
 16a:	90 91 c8 00 	lds	r25, 0x00C8
 16e:	95 ff       	sbrs	r25, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <printStr+0xe>
      
      UDR0 = (uint8_t)(str[i]);
 172:	91 91       	ld	r25, Z+
 174:	90 93 c6 00 	sts	0x00C6, r25
      while(!READ_BIT(UCSR0A, UDRE0));
 178:	90 91 c0 00 	lds	r25, 0x00C0
 17c:	95 ff       	sbrs	r25, 5
 17e:	fc cf       	rjmp	.-8      	; 0x178 <printStr+0x1c>
void setupAdcSimple(void);

void printStr(uint8_t* str, uint8_t len)
{
  uint8_t i;
  for(i=0; i<len; i++)
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	86 17       	cp	r24, r22
 184:	78 f3       	brcs	.-34     	; 0x164 <printStr+0x8>
      while(!READ_BIT(UCSR1A, UDRE1));
      
      UDR0 = (uint8_t)(str[i]);
      while(!READ_BIT(UCSR0A, UDRE0));
    }
}
 186:	08 95       	ret

00000188 <setupUSART1>:
void setupUSART1()
{

  uint16_t brr = 25;
  //disable power reduction for usart0                                                                                                                                           
  CLR_BIT(PRR1, PRUSART1);
 188:	e5 e6       	ldi	r30, 0x65	; 101
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8e 7f       	andi	r24, 0xFE	; 254
 190:	80 83       	st	Z, r24

  //UCSR0A
  //clear rx & tx complete flags
  CLR_BIT(UCSR1A, RXC1);
 192:	e8 ec       	ldi	r30, 0xC8	; 200
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8f 77       	andi	r24, 0x7F	; 127
 19a:	80 83       	st	Z, r24
  CLR_BIT(UCSR1A, TXC1);
 19c:	80 81       	ld	r24, Z
 19e:	8f 7b       	andi	r24, 0xBF	; 191
 1a0:	80 83       	st	Z, r24
  //set double rate
  SET_BIT(UCSR1A, U2X1);
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
  //disable multiprocessor communication mode
  CLR_BIT(UCSR1A, MPCM1);
 1a8:	80 81       	ld	r24, Z
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	80 83       	st	Z, r24

  // UCSR0B
  //enable rx complete interrupt
  SET_BIT(UCSR1B, RXCIE1);
 1ae:	a9 ec       	ldi	r26, 0xC9	; 201
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	8c 91       	ld	r24, X
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	8c 93       	st	X, r24
  //disable tx complete interrupt
  CLR_BIT(UCSR1B, TXCIE1); 
 1b8:	8c 91       	ld	r24, X
 1ba:	8f 7b       	andi	r24, 0xBF	; 191
 1bc:	8c 93       	st	X, r24
  //disable data register empty interrupt
  CLR_BIT(UCSR1B, UDRIE1);
 1be:	8c 91       	ld	r24, X
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	8c 93       	st	X, r24
  //receiver enable
  SET_BIT(UCSR1B, RXEN1);
 1c4:	8c 91       	ld	r24, X
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	8c 93       	st	X, r24
  //transmitted enabled
  SET_BIT(UCSR1B, TXEN1);
 1ca:	8c 91       	ld	r24, X
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	8c 93       	st	X, r24
   
  //UCSR0C
  //UMSEL=0 -> async uart
  CLR_BIT(UCSR1C, UMSEL11);
 1d0:	ea ec       	ldi	r30, 0xCA	; 202
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	80 83       	st	Z, r24
  CLR_BIT(UCSR1C, UMSEL10);
 1da:	80 81       	ld	r24, Z
 1dc:	8f 7b       	andi	r24, 0xBF	; 191
 1de:	80 83       	st	Z, r24
  //UPM=0 -> no parity, UPM=2 -> even parity, UPM=3 -> odd parity
  CLR_BIT(UCSR1C, UPM11);
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7d       	andi	r24, 0xDF	; 223
 1e4:	80 83       	st	Z, r24
  CLR_BIT(UCSR1C, UPM10);
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 7e       	andi	r24, 0xEF	; 239
 1ea:	80 83       	st	Z, r24
  //USBS0=0 -> 1 stop, USBS0=1, 2 stop bits
  CLR_BIT(UCSR1C, USBS0);
 1ec:	80 81       	ld	r24, Z
 1ee:	87 7f       	andi	r24, 0xF7	; 247
 1f0:	80 83       	st	Z, r24
  //UCSZ=3 -> 8 data bits
  CLR_BIT(UCSR1B, UCSZ12);  
 1f2:	8c 91       	ld	r24, X
 1f4:	8b 7f       	andi	r24, 0xFB	; 251
 1f6:	8c 93       	st	X, r24
  SET_BIT(UCSR1C, UCSZ11);
 1f8:	80 81       	ld	r24, Z
 1fa:	84 60       	ori	r24, 0x04	; 4
 1fc:	80 83       	st	Z, r24
  SET_BIT(UCSR1C, UCSZ10);
 1fe:	80 81       	ld	r24, Z
 200:	82 60       	ori	r24, 0x02	; 2
 202:	80 83       	st	Z, r24

  UBRR1H = (uint8_t)(brr>>8);
 204:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = (uint8_t)(brr&0xFF);
 208:	89 e1       	ldi	r24, 0x19	; 25
 20a:	80 93 cc 00 	sts	0x00CC, r24
 
}
 20e:	08 95       	ret

00000210 <setupUSART0>:
{

  uint16_t brr = 25;

  //disable power reduction for usart0
  CLR_BIT(PRR0, PRUSART0);
 210:	e4 e6       	ldi	r30, 0x64	; 100
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	80 83       	st	Z, r24

  //UCSR0A
  //clear rx & tx complete flags
  CLR_BIT(UCSR0A, RXC0);
 21a:	e0 ec       	ldi	r30, 0xC0	; 192
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	8f 77       	andi	r24, 0x7F	; 127
 222:	80 83       	st	Z, r24
  CLR_BIT(UCSR0A, TXC0);
 224:	80 81       	ld	r24, Z
 226:	8f 7b       	andi	r24, 0xBF	; 191
 228:	80 83       	st	Z, r24
  //set double rate
  SET_BIT(UCSR0A, U2X0);
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24
  //disable multiprocessor communication mode
  CLR_BIT(UCSR0A, MPCM0);
 230:	80 81       	ld	r24, Z
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	80 83       	st	Z, r24

  // UCSR0B
  //enable rx complete interrupt
  SET_BIT(UCSR0B, RXCIE0);
 236:	a1 ec       	ldi	r26, 0xC1	; 193
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	8c 91       	ld	r24, X
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	8c 93       	st	X, r24
  //disable tx complete interrupt
  CLR_BIT(UCSR0B, TXCIE0); 
 240:	8c 91       	ld	r24, X
 242:	8f 7b       	andi	r24, 0xBF	; 191
 244:	8c 93       	st	X, r24
  //disable data register empty interrupt
  CLR_BIT(UCSR0B, UDRIE0);
 246:	8c 91       	ld	r24, X
 248:	8f 7d       	andi	r24, 0xDF	; 223
 24a:	8c 93       	st	X, r24
  //receiver enable
  SET_BIT(UCSR0B, RXEN0);
 24c:	8c 91       	ld	r24, X
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	8c 93       	st	X, r24
  //transmitted enabled
  SET_BIT(UCSR0B, TXEN0);
 252:	8c 91       	ld	r24, X
 254:	88 60       	ori	r24, 0x08	; 8
 256:	8c 93       	st	X, r24
   
  //UCSR0C
  //UMSEL=0 -> async uart
  CLR_BIT(UCSR0C, UMSEL01);
 258:	e2 ec       	ldi	r30, 0xC2	; 194
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8f 77       	andi	r24, 0x7F	; 127
 260:	80 83       	st	Z, r24
  CLR_BIT(UCSR0C, UMSEL00);
 262:	80 81       	ld	r24, Z
 264:	8f 7b       	andi	r24, 0xBF	; 191
 266:	80 83       	st	Z, r24
  //UPM=0 -> no parity, UPM=2 -> even parity, UPM=3 -> odd parity
  CLR_BIT(UCSR0C, UPM01);
 268:	80 81       	ld	r24, Z
 26a:	8f 7d       	andi	r24, 0xDF	; 223
 26c:	80 83       	st	Z, r24
  CLR_BIT(UCSR0C, UPM00);
 26e:	80 81       	ld	r24, Z
 270:	8f 7e       	andi	r24, 0xEF	; 239
 272:	80 83       	st	Z, r24
  //USBS0=0 -> 1 stop, USBS0=1, 2 stop bits
  CLR_BIT(UCSR0C, USBS0);
 274:	80 81       	ld	r24, Z
 276:	87 7f       	andi	r24, 0xF7	; 247
 278:	80 83       	st	Z, r24
  //UCSZ=3 -> 8 data bits
  CLR_BIT(UCSR0B, UCSZ02);  
 27a:	8c 91       	ld	r24, X
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	8c 93       	st	X, r24
  SET_BIT(UCSR0C, UCSZ01);
 280:	80 81       	ld	r24, Z
 282:	84 60       	ori	r24, 0x04	; 4
 284:	80 83       	st	Z, r24
  SET_BIT(UCSR0C, UCSZ00);
 286:	80 81       	ld	r24, Z
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	80 83       	st	Z, r24

  UBRR0H = (uint8_t)(brr>>8);
 28c:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (uint8_t)(brr&0xFF);
 290:	89 e1       	ldi	r24, 0x19	; 25
 292:	80 93 c4 00 	sts	0x00C4, r24
}
 296:	08 95       	ret

00000298 <setupClock>:

void setupClock()
{
  CLKPR = 0x00;
 298:	10 92 61 00 	sts	0x0061, r1
  CLKPR = 0x80;
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	80 93 61 00 	sts	0x0061, r24
  CLKPR = 0x00;
 2a2:	10 92 61 00 	sts	0x0061, r1
  while(READ_BIT(CLKPR, CLKPCE));
 2a6:	80 91 61 00 	lds	r24, 0x0061
 2aa:	87 fd       	sbrc	r24, 7
 2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <setupClock+0xe>
}
 2ae:	08 95       	ret

000002b0 <setupIO>:

void setupIO()
{
  DDRE |= 1<<2;
 2b0:	6a 9a       	sbi	0x0d, 2	; 13

  CLR_BIT(DDRE, 0);
 2b2:	68 98       	cbi	0x0d, 0	; 13
  SET_BIT(DDRE, 1);
 2b4:	69 9a       	sbi	0x0d, 1	; 13
  SET_BIT(DDRE, 2);
 2b6:	6a 9a       	sbi	0x0d, 2	; 13
  SET_BIT(DDRE, 3);
 2b8:	6b 9a       	sbi	0x0d, 3	; 13
  SET_BIT(DDRE, 4);
 2ba:	6c 9a       	sbi	0x0d, 4	; 13
  CLR_BIT(DDRE, 5);
 2bc:	6d 98       	cbi	0x0d, 5	; 13

  CLR_BIT(DDRD, 2);
 2be:	52 98       	cbi	0x0a, 2	; 10
  SET_BIT(DDRD, 3);
 2c0:	53 9a       	sbi	0x0a, 3	; 10


  DDRF = 0;
 2c2:	10 ba       	out	0x10, r1	; 16
  SET_BIT(MCUCR, JTD);
 2c4:	85 b7       	in	r24, 0x35	; 53
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	85 bf       	out	0x35, r24	; 53
  SET_BIT(MCUCR, JTD);
 2ca:	85 b7       	in	r24, 0x35	; 53
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	85 bf       	out	0x35, r24	; 53
}
 2d0:	08 95       	ret

000002d2 <setupAdc>:

void setupAdc()
{
  ADCSRB = (0<<MUX5);
 2d2:	10 92 7b 00 	sts	0x007B, r1
  ADMUX = (1<<REFS1) | (1<<REFS0) | (0<<MUX4) | (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
 2d6:	80 ec       	ldi	r24, 0xC0	; 192
 2d8:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 2dc:	8f e8       	ldi	r24, 0x8F	; 143
 2de:	80 93 7a 00 	sts	0x007A, r24

  do
    {
      printStr("waiting for AVDDOK\r\n", STRLEN("waiting for AVDDOK\r\n"));
 2e2:	89 e0       	ldi	r24, 0x09	; 9
 2e4:	92 e0       	ldi	r25, 0x02	; 2
 2e6:	64 e1       	ldi	r22, 0x14	; 20
 2e8:	39 df       	rcall	.-398    	; 0x15c <printStr>
    }
  while(!READ_BIT(ADCSRB, AVDDOK));
 2ea:	80 91 7b 00 	lds	r24, 0x007B
 2ee:	87 ff       	sbrs	r24, 7
 2f0:	f8 cf       	rjmp	.-16     	; 0x2e2 <setupAdc+0x10>
  
  do
    {
      printStr("waiting for REFOK\r\n", STRLEN("waiting for REFOK\r\n")); 
 2f2:	8e e1       	ldi	r24, 0x1E	; 30
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	63 e1       	ldi	r22, 0x13	; 19
 2f8:	31 df       	rcall	.-414    	; 0x15c <printStr>
    }
  while(!READ_BIT(ADCSRB, REFOK));
 2fa:	80 91 7b 00 	lds	r24, 0x007B
 2fe:	85 ff       	sbrs	r24, 5
 300:	f8 cf       	rjmp	.-16     	; 0x2f2 <setupAdc+0x20>
  
}
 302:	08 95       	ret

00000304 <main>:
int main(void) 
{
  uint8_t msgBuffer[128];
  uint8_t msgLen = 0;
  uint32_t voltage = 0;
  setupClock();
 304:	c9 df       	rcall	.-110    	; 0x298 <setupClock>
  setupUSART0();
 306:	84 df       	rcall	.-248    	; 0x210 <setupUSART0>
  setupUSART1();
 308:	3f df       	rcall	.-386    	; 0x188 <setupUSART1>
  setupIO();
 30a:	d2 df       	rcall	.-92     	; 0x2b0 <setupIO>
  setupAdc();
 30c:	e2 df       	rcall	.-60     	; 0x2d2 <setupAdc>
  sei();
 30e:	78 94       	sei
  SET_BIT(ADCSRA, ADSC);
 310:	80 91 7a 00 	lds	r24, 0x007A
 314:	80 64       	ori	r24, 0x40	; 64
 316:	80 93 7a 00 	sts	0x007A, r24
  
  SET_BIT(PORTE, 2);
 31a:	72 9a       	sbi	0x0e, 2	; 14
  SET_BIT(PORTE, 3);
 31c:	73 9a       	sbi	0x0e, 3	; 14
  SET_BIT(PORTE, 4);
 31e:	74 9a       	sbi	0x0e, 4	; 14

  printStr("starting while loop\r\n", strlen("starting while loop\r\n"));
 320:	82 e3       	ldi	r24, 0x32	; 50
 322:	92 e0       	ldi	r25, 0x02	; 2
 324:	65 e1       	ldi	r22, 0x15	; 21
 326:	1a df       	rcall	.-460    	; 0x15c <printStr>
      //PRINT_REG(MCUCR);
      //PRINT_REG(ADMUX);
      //PRINT_REG(ADCSRB);
      //PRINT_REG(SMCR);
      //PRINT_REG(PRR0);
      if(serial_flag==1)
 328:	80 91 5d 02 	lds	r24, 0x025D
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	11 f4       	brne	.+4      	; 0x334 <main+0x30>
	{
  	  serial_flag = 0;
 330:	10 92 5d 02 	sts	0x025D, r1
  	}
      if(serial_flag==2)
 334:	80 91 5d 02 	lds	r24, 0x025D
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	11 f4       	brne	.+4      	; 0x340 <main+0x3c>
	{
	  serial_flag = 0;
 33c:	10 92 5d 02 	sts	0x025D, r1
	}
      if(adc_flag && 0)
 340:	80 91 5c 02 	lds	r24, 0x025C
      
      //while(!READ_BIT(UCSR1A, RXC1)){}
      //myByte = UDR1;
      //CLR_BIT(UCSR1A, RXC1);
      
    }
 344:	f1 cf       	rjmp	.-30     	; 0x328 <main+0x24>

00000346 <__vector_29>:
  return 0;
}

ISR(ADC_vect, ISR_BLOCK)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
  adc_flag = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 5c 02 	sts	0x025C, r24
  //adcVal = ADCL;
  //adcVal |= ((uint16_t)ADCH)<<8;
  adcVal = ADC;
 35a:	80 91 78 00 	lds	r24, 0x0078
 35e:	90 91 79 00 	lds	r25, 0x0079
 362:	90 93 5b 02 	sts	0x025B, r25
 366:	80 93 5a 02 	sts	0x025A, r24
  //adcVal = ADCH;
}
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_25>:

ISR(USART0_RX_vect, ISR_BLOCK)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	0b b6       	in	r0, 0x3b	; 59
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	8f 93       	push	r24
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
  myByte0=UDR0;
 38c:	e6 ec       	ldi	r30, 0xC6	; 198
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	80 93 58 02 	sts	0x0258, r24
  UDR0=myByte0; //echo
 396:	80 91 58 02 	lds	r24, 0x0258
 39a:	80 83       	st	Z, r24
  UDR1=myByte0; //forward
 39c:	80 91 58 02 	lds	r24, 0x0258
 3a0:	80 93 ce 00 	sts	0x00CE, r24
  serial_flag=1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 5d 02 	sts	0x025D, r24
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	8f 91       	pop	r24
 3b0:	0f 90       	pop	r0
 3b2:	0b be       	out	0x3b, r0	; 59
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_36>:
ISR(USART1_RX_vect, ISR_BLOCK)
{
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	0b b6       	in	r0, 0x3b	; 59
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	8f 93       	push	r24
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
  myByte1 = UDR1;
 3d2:	ee ec       	ldi	r30, 0xCE	; 206
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	80 93 59 02 	sts	0x0259, r24
  UDR1=myByte1; //echo
 3dc:	80 91 59 02 	lds	r24, 0x0259
 3e0:	80 83       	st	Z, r24
  UDR0=myByte1; //forward
 3e2:	80 91 59 02 	lds	r24, 0x0259
 3e6:	80 93 c6 00 	sts	0x00C6, r24
  serial_flag=2;
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	80 93 5d 02 	sts	0x025D, r24
}
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	8f 91       	pop	r24
 3f6:	0f 90       	pop	r0
 3f8:	0b be       	out	0x3b, r0	; 59
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <__vector_default>:
ISR(BADISR_vect)
{
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
  FLIP_BIT(PORTE, PORTE4);
 412:	8e b1       	in	r24, 0x0e	; 14
 414:	90 e1       	ldi	r25, 0x10	; 16
 416:	89 27       	eor	r24, r25
 418:	8e b9       	out	0x0e, r24	; 14
}
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
